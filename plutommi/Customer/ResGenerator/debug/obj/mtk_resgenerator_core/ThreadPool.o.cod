GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 1


   1              		.file	"ThreadPool.cpp"
   4              		.text
   5              	Ltext0:
 4175              	LC0:
 4176 0000 556E6162 		.ascii "Unable to create thread pool\0"
 4176      6C652074 
 4176      6F206372 
 4176      65617465 
 4176      20746872 
 4177 001d 90       		.align 2
 4182              	.globl __ZN10ThreadPoolC2Eii
 4184              	__ZN10ThreadPoolC2Eii:
   1:../../MMI/Resource/ThreadPool.cpp **** #include <windows.h>
   2:../../MMI/Resource/ThreadPool.cpp **** #include "ThreadPool.h"
   3:../../MMI/Resource/ThreadPool.cpp **** #include <process.h>
   4:../../MMI/Resource/ThreadPool.cpp **** #include <assert.h>
   5:../../MMI/Resource/ThreadPool.cpp **** #include "ResgenLogCAPI.h"
   6:../../MMI/Resource/ThreadPool.cpp **** 
   7:../../MMI/Resource/ThreadPool.cpp **** #define THREADP_TAG "THREADPOLL"
   8:../../MMI/Resource/ThreadPool.cpp **** 
   9:../../MMI/Resource/ThreadPool.cpp **** #define THREADP_LOG_D(format, args...) RES_LOG_D((THREADP_TAG), (format) , ##args)
  10:../../MMI/Resource/ThreadPool.cpp **** #define THREADP_LOG_V(format, args...) RES_LOG_V((THREADP_TAG), (format) , ##args)
  11:../../MMI/Resource/ThreadPool.cpp **** #define THREADP_LOG_W(format, args...) RES_LOG_W((THREADP_TAG), (format) , ##args)
  12:../../MMI/Resource/ThreadPool.cpp **** #define THREADP_LOG_E(format, args...) RES_LOG_E((THREADP_TAG), (format) , ##args)
  13:../../MMI/Resource/ThreadPool.cpp **** 
  14:../../MMI/Resource/ThreadPool.cpp **** ThreadPool::ThreadPool(int poolSize, int waitTimeForThreadsToCompleteMS)
  15:../../MMI/Resource/ThreadPool.cpp **** {
 4186              	LM1:
 4187 001e 55       		pushl	%ebp
 4188 001f 89E5     		movl	%esp, %ebp
 4189 0021 57       		pushl	%edi
 4190 0022 56       		pushl	%esi
 4191 0023 53       		pushl	%ebx
 4192 0024 83EC7C   		subl	$124, %esp
 4193 0027 C745C400 		movl	$___gxx_personality_sj0, -60(%ebp)
 4193      000000
 4194 002e C745C800 		movl	$LLSDA644, -56(%ebp)
 4194      000000
 4195 0035 8D45CC   		leal	-52(%ebp), %eax
 4196 0038 8D55E8   		leal	-24(%ebp), %edx
 4197 003b 8910     		movl	%edx, (%eax)
 4198 003d BA820100 		movl	$L21, %edx
 4198      00
 4199 0042 895004   		movl	%edx, 4(%eax)
 4200 0045 896008   		movl	%esp, 8(%eax)
 4201 0048 8D45AC   		leal	-84(%ebp), %eax
 4202 004b 890424   		movl	%eax, (%esp)
 4203 004e E8000000 		call	__Unwind_SjLj_Register
 4203      00
 4205              	LM2:
 4206              	LBB2:
 4207 0053 8B4508   		movl	8(%ebp), %eax
 4208 0056 C7000800 		movl	$__ZTV10ThreadPool+8, (%eax)
 4208      0000
 4209 005c 8D45D8   		leal	-40(%ebp), %eax
 4210 005f 890424   		movl	%eax, (%esp)
 4211 0062 E8000000 		call	__ZNSaIN10ThreadPool7JobDataEEC1Ev
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 2


 4211      00
 4212 0067 8D45D8   		leal	-40(%ebp), %eax
 4213 006a 89442404 		movl	%eax, 4(%esp)
 4214 006e 8B4508   		movl	8(%ebp), %eax
 4215 0071 83C004   		addl	$4, %eax
 4216 0074 890424   		movl	%eax, (%esp)
 4217 0077 C745B003 		movl	$3, -80(%ebp)
 4217      000000
 4218 007e E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EEC1ERKS2_
 4218      00
 4219 0083 EB29     		jmp	L3
 4220              	L2:
 4221 0085 8B45A4   		movl	-92(%ebp), %eax
 4222 0088 8945A8   		movl	%eax, -88(%ebp)
 4223 008b 8D45D8   		leal	-40(%ebp), %eax
 4224 008e 890424   		movl	%eax, (%esp)
 4225 0091 E8000000 		call	__ZNSaIN10ThreadPool7JobDataEED1Ev
 4225      00
 4226 0096 8B55A8   		movl	-88(%ebp), %edx
 4227 0099 8955A4   		movl	%edx, -92(%ebp)
 4228              	L4:
 4229 009c 8B45A4   		movl	-92(%ebp), %eax
 4230 009f 890424   		movl	%eax, (%esp)
 4231 00a2 C745B0FF 		movl	$-1, -80(%ebp)
 4231      FFFFFF
 4232 00a9 E8000000 		call	__Unwind_SjLj_Resume
 4232      00
 4233              	L3:
 4234 00ae 8D45D8   		leal	-40(%ebp), %eax
 4235 00b1 890424   		movl	%eax, (%esp)
 4236 00b4 E8000000 		call	__ZNSaIN10ThreadPool7JobDataEED1Ev
 4236      00
 4237 00b9 8D45D8   		leal	-40(%ebp), %eax
 4238 00bc 890424   		movl	%eax, (%esp)
 4239 00bf E8000000 		call	__ZNSaIN10ThreadPool10ThreadDataEEC1Ev
 4239      00
 4240 00c4 8D45D8   		leal	-40(%ebp), %eax
 4241 00c7 89442404 		movl	%eax, 4(%esp)
 4242 00cb 8B4508   		movl	8(%ebp), %eax
 4243 00ce 83C008   		addl	$8, %eax
 4244 00d1 890424   		movl	%eax, (%esp)
 4245 00d4 C745B002 		movl	$2, -80(%ebp)
 4245      000000
 4246 00db E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EEC1ERKS2_
 4246      00
 4247 00e0 EB1C     		jmp	L7
 4248              	L6:
 4249 00e2 8B55A4   		movl	-92(%ebp), %edx
 4250 00e5 8955A0   		movl	%edx, -96(%ebp)
 4251 00e8 8D45D8   		leal	-40(%ebp), %eax
 4252 00eb 890424   		movl	%eax, (%esp)
 4253 00ee E8000000 		call	__ZNSaIN10ThreadPool10ThreadDataEED1Ev
 4253      00
 4254 00f3 8B45A0   		movl	-96(%ebp), %eax
 4255 00f6 8945A4   		movl	%eax, -92(%ebp)
 4256              	L8:
 4257 00f9 E9C80000 		jmp	L17
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 3


 4257      00
 4258              	L7:
 4259 00fe 8D45D8   		leal	-40(%ebp), %eax
 4260 0101 890424   		movl	%eax, (%esp)
 4261 0104 E8000000 		call	__ZNSaIN10ThreadPool10ThreadDataEED1Ev
 4261      00
  16:../../MMI/Resource/ThreadPool.cpp ****     m_nWaitForThreadsToDieMS = waitTimeForThreadsToCompleteMS;
 4263              	LM3:
 4264 0109 8B5508   		movl	8(%ebp), %edx
 4265 010c 8B4510   		movl	16(%ebp), %eax
 4266 010f 894214   		movl	%eax, 20(%edx)
  17:../../MMI/Resource/ThreadPool.cpp ****     m_hNotifyShutdown = NULL;
 4268              	LM4:
 4269 0112 8B4508   		movl	8(%ebp), %eax
 4270 0115 C7401800 		movl	$0, 24(%eax)
 4270      000000
  18:../../MMI/Resource/ThreadPool.cpp **** 
  19:../../MMI/Resource/ThreadPool.cpp ****     InitializeCriticalSection(&m_cs);
 4272              	LM5:
 4273 011c 8B4508   		movl	8(%ebp), %eax
 4274 011f 83C01C   		addl	$28, %eax
 4275 0122 890424   		movl	%eax, (%esp)
 4276 0125 C745B001 		movl	$1, -80(%ebp)
 4276      000000
 4277 012c E8000000 		call	_InitializeCriticalSection@4
 4277      00
 4278 0131 83EC04   		subl	$4, %esp
  20:../../MMI/Resource/ThreadPool.cpp **** 
  21:../../MMI/Resource/ThreadPool.cpp ****     if (poolSize > 0 && !Create(poolSize))
 4280              	LM6:
 4281 0134 837D0C00 		cmpl	$0, 12(%ebp)
 4282 0138 0F8EBB00 		jle	L1
 4282      0000
 4283 013e 8B450C   		movl	12(%ebp), %eax
 4284 0141 89442404 		movl	%eax, 4(%esp)
 4285 0145 8B4508   		movl	8(%ebp), %eax
 4286 0148 890424   		movl	%eax, (%esp)
 4287 014b E8C40600 		call	__ZN10ThreadPool6CreateEi
 4287      00
 4288 0150 84C0     		testb	%al, %al
 4289 0152 0F85A100 		jne	L1
 4289      0000
  22:../../MMI/Resource/ThreadPool.cpp ****         throw "Unable to create thread pool";
 4291              	LM7:
 4292 0158 C7042404 		movl	$4, (%esp)
 4292      000000
 4293 015f E8000000 		call	___cxa_allocate_exception
 4293      00
 4294 0164 C7000000 		movl	$LC0, (%eax)
 4294      0000
 4295              	L11:
 4296 016a C7442408 		movl	$0, 8(%esp)
 4296      00000000 
 4297 0172 C7442404 		movl	$__ZTIPKc, 4(%esp)
 4297      00000000 
 4298 017a 890424   		movl	%eax, (%esp)
 4299 017d E8000000 		call	___cxa_throw
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 4


 4299      00
 4300              	L21:
 4301 0182 8D6D18   		leal	24(%ebp), %ebp
 4302 0185 8B55B0   		movl	-80(%ebp), %edx
 4303 0188 895594   		movl	%edx, -108(%ebp)
 4304 018b 8B45B4   		movl	-76(%ebp), %eax
 4305 018e 8945A4   		movl	%eax, -92(%ebp)
 4306 0191 837D9401 		cmpl	$1, -108(%ebp)
 4307 0195 0F8447FF 		je	L6
 4307      FFFF
 4308 019b 837D9402 		cmpl	$2, -108(%ebp)
 4309 019f 0F84E0FE 		je	L2
 4309      FFFF
 4310              	L13:
 4311 01a5 8B55A4   		movl	-92(%ebp), %edx
 4312 01a8 89559C   		movl	%edx, -100(%ebp)
 4313 01ab 8B4508   		movl	8(%ebp), %eax
 4314 01ae 83C008   		addl	$8, %eax
 4315 01b1 890424   		movl	%eax, (%esp)
 4316 01b4 C745B000 		movl	$0, -80(%ebp)
 4316      000000
 4317 01bb E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4317      00
 4318 01c0 8B459C   		movl	-100(%ebp), %eax
 4319 01c3 8945A4   		movl	%eax, -92(%ebp)
 4320              	L15:
 4321              	L17:
 4322 01c6 8B55A4   		movl	-92(%ebp), %edx
 4323 01c9 895598   		movl	%edx, -104(%ebp)
 4324 01cc 8B4508   		movl	8(%ebp), %eax
 4325 01cf 83C004   		addl	$4, %eax
 4326 01d2 890424   		movl	%eax, (%esp)
 4327 01d5 C745B000 		movl	$0, -80(%ebp)
 4327      000000
 4328 01dc E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4328      00
 4329 01e1 8B4598   		movl	-104(%ebp), %eax
 4330 01e4 8945A4   		movl	%eax, -92(%ebp)
 4331              	L19:
 4332 01e7 8B55A4   		movl	-92(%ebp), %edx
 4333 01ea 891424   		movl	%edx, (%esp)
 4334 01ed C745B0FF 		movl	$-1, -80(%ebp)
 4334      FFFFFF
 4335 01f4 E8000000 		call	__Unwind_SjLj_Resume
 4335      00
  23:../../MMI/Resource/ThreadPool.cpp **** }
 4337              	LM8:
 4338              	L1:
 4339 01f9 8D45AC   		leal	-84(%ebp), %eax
 4340 01fc 890424   		movl	%eax, (%esp)
 4341 01ff E8000000 		call	__Unwind_SjLj_Unregister
 4341      00
 4342 0204 8D65F4   		leal	-12(%ebp), %esp
 4343 0207 5B       		popl	%ebx
 4344 0208 5E       		popl	%esi
 4345 0209 5F       		popl	%edi
 4346 020a 5D       		popl	%ebp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 5


 4347 020b C3       		ret
 4348              	LBE2:
 4349              		.section	.gcc_except_table,""
 4350              	LLSDA644:
 4351 0000 FF       		.byte	0xff
 4352 0001 FF       		.byte	0xff
 4353 0002 01       		.byte	0x1
 4354 0003 06       		.uleb128 LLSDACSE644-LLSDACSB644
 4355              	LLSDACSB644:
 4356 0004 00       		.uleb128 0x0
 4357 0005 00       		.uleb128 0x0
 4358 0006 01       		.uleb128 0x1
 4359 0007 00       		.uleb128 0x0
 4360 0008 02       		.uleb128 0x2
 4361 0009 00       		.uleb128 0x0
 4362              	LLSDACSE644:
 4363              		.text
 4364              	Lscope0:
 4366              		.align 2
 4371              	.globl __ZN10ThreadPoolC1Eii
 4373              	__ZN10ThreadPoolC1Eii:
 4375              	LM9:
 4376 020c 55       		pushl	%ebp
 4377 020d 89E5     		movl	%esp, %ebp
 4378 020f 57       		pushl	%edi
 4379 0210 56       		pushl	%esi
 4380 0211 53       		pushl	%ebx
 4381 0212 83EC7C   		subl	$124, %esp
 4382 0215 C745C400 		movl	$___gxx_personality_sj0, -60(%ebp)
 4382      000000
 4383 021c C745C80A 		movl	$LLSDA646, -56(%ebp)
 4383      000000
 4384 0223 8D45CC   		leal	-52(%ebp), %eax
 4385 0226 8D55E8   		leal	-24(%ebp), %edx
 4386 0229 8910     		movl	%edx, (%eax)
 4387 022b BA700300 		movl	$L42, %edx
 4387      00
 4388 0230 895004   		movl	%edx, 4(%eax)
 4389 0233 896008   		movl	%esp, 8(%eax)
 4390 0236 8D45AC   		leal	-84(%ebp), %eax
 4391 0239 890424   		movl	%eax, (%esp)
 4392 023c E8000000 		call	__Unwind_SjLj_Register
 4392      00
 4394              	LM10:
 4395              	LBB3:
 4396 0241 8B4508   		movl	8(%ebp), %eax
 4397 0244 C7000800 		movl	$__ZTV10ThreadPool+8, (%eax)
 4397      0000
 4398 024a 8D45D8   		leal	-40(%ebp), %eax
 4399 024d 890424   		movl	%eax, (%esp)
 4400 0250 E8000000 		call	__ZNSaIN10ThreadPool7JobDataEEC1Ev
 4400      00
 4401 0255 8D45D8   		leal	-40(%ebp), %eax
 4402 0258 89442404 		movl	%eax, 4(%esp)
 4403 025c 8B4508   		movl	8(%ebp), %eax
 4404 025f 83C004   		addl	$4, %eax
 4405 0262 890424   		movl	%eax, (%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 6


 4406 0265 C745B003 		movl	$3, -80(%ebp)
 4406      000000
 4407 026c E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EEC1ERKS2_
 4407      00
 4408 0271 EB29     		jmp	L24
 4409              	L23:
 4410 0273 8B45A4   		movl	-92(%ebp), %eax
 4411 0276 8945A8   		movl	%eax, -88(%ebp)
 4412 0279 8D45D8   		leal	-40(%ebp), %eax
 4413 027c 890424   		movl	%eax, (%esp)
 4414 027f E8000000 		call	__ZNSaIN10ThreadPool7JobDataEED1Ev
 4414      00
 4415 0284 8B55A8   		movl	-88(%ebp), %edx
 4416 0287 8955A4   		movl	%edx, -92(%ebp)
 4417              	L25:
 4418 028a 8B45A4   		movl	-92(%ebp), %eax
 4419 028d 890424   		movl	%eax, (%esp)
 4420 0290 C745B0FF 		movl	$-1, -80(%ebp)
 4420      FFFFFF
 4421 0297 E8000000 		call	__Unwind_SjLj_Resume
 4421      00
 4422              	L24:
 4423 029c 8D45D8   		leal	-40(%ebp), %eax
 4424 029f 890424   		movl	%eax, (%esp)
 4425 02a2 E8000000 		call	__ZNSaIN10ThreadPool7JobDataEED1Ev
 4425      00
 4426 02a7 8D45D8   		leal	-40(%ebp), %eax
 4427 02aa 890424   		movl	%eax, (%esp)
 4428 02ad E8000000 		call	__ZNSaIN10ThreadPool10ThreadDataEEC1Ev
 4428      00
 4429 02b2 8D45D8   		leal	-40(%ebp), %eax
 4430 02b5 89442404 		movl	%eax, 4(%esp)
 4431 02b9 8B4508   		movl	8(%ebp), %eax
 4432 02bc 83C008   		addl	$8, %eax
 4433 02bf 890424   		movl	%eax, (%esp)
 4434 02c2 C745B002 		movl	$2, -80(%ebp)
 4434      000000
 4435 02c9 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EEC1ERKS2_
 4435      00
 4436 02ce EB1C     		jmp	L28
 4437              	L27:
 4438 02d0 8B55A4   		movl	-92(%ebp), %edx
 4439 02d3 8955A0   		movl	%edx, -96(%ebp)
 4440 02d6 8D45D8   		leal	-40(%ebp), %eax
 4441 02d9 890424   		movl	%eax, (%esp)
 4442 02dc E8000000 		call	__ZNSaIN10ThreadPool10ThreadDataEED1Ev
 4442      00
 4443 02e1 8B45A0   		movl	-96(%ebp), %eax
 4444 02e4 8945A4   		movl	%eax, -92(%ebp)
 4445              	L29:
 4446 02e7 E9C80000 		jmp	L38
 4446      00
 4447              	L28:
 4448 02ec 8D45D8   		leal	-40(%ebp), %eax
 4449 02ef 890424   		movl	%eax, (%esp)
 4450 02f2 E8000000 		call	__ZNSaIN10ThreadPool10ThreadDataEED1Ev
 4450      00
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 7


 4452              	LM11:
 4453 02f7 8B5508   		movl	8(%ebp), %edx
 4454 02fa 8B4510   		movl	16(%ebp), %eax
 4455 02fd 894214   		movl	%eax, 20(%edx)
 4457              	LM12:
 4458 0300 8B4508   		movl	8(%ebp), %eax
 4459 0303 C7401800 		movl	$0, 24(%eax)
 4459      000000
 4461              	LM13:
 4462 030a 8B4508   		movl	8(%ebp), %eax
 4463 030d 83C01C   		addl	$28, %eax
 4464 0310 890424   		movl	%eax, (%esp)
 4465 0313 C745B001 		movl	$1, -80(%ebp)
 4465      000000
 4466 031a E8000000 		call	_InitializeCriticalSection@4
 4466      00
 4467 031f 83EC04   		subl	$4, %esp
 4469              	LM14:
 4470 0322 837D0C00 		cmpl	$0, 12(%ebp)
 4471 0326 0F8EBB00 		jle	L22
 4471      0000
 4472 032c 8B450C   		movl	12(%ebp), %eax
 4473 032f 89442404 		movl	%eax, 4(%esp)
 4474 0333 8B4508   		movl	8(%ebp), %eax
 4475 0336 890424   		movl	%eax, (%esp)
 4476 0339 E8D60400 		call	__ZN10ThreadPool6CreateEi
 4476      00
 4477 033e 84C0     		testb	%al, %al
 4478 0340 0F85A100 		jne	L22
 4478      0000
 4480              	LM15:
 4481 0346 C7042404 		movl	$4, (%esp)
 4481      000000
 4482 034d E8000000 		call	___cxa_allocate_exception
 4482      00
 4483 0352 C7000000 		movl	$LC0, (%eax)
 4483      0000
 4484              	L32:
 4485 0358 C7442408 		movl	$0, 8(%esp)
 4485      00000000 
 4486 0360 C7442404 		movl	$__ZTIPKc, 4(%esp)
 4486      00000000 
 4487 0368 890424   		movl	%eax, (%esp)
 4488 036b E8000000 		call	___cxa_throw
 4488      00
 4489              	L42:
 4490 0370 8D6D18   		leal	24(%ebp), %ebp
 4491 0373 8B55B0   		movl	-80(%ebp), %edx
 4492 0376 895594   		movl	%edx, -108(%ebp)
 4493 0379 8B45B4   		movl	-76(%ebp), %eax
 4494 037c 8945A4   		movl	%eax, -92(%ebp)
 4495 037f 837D9401 		cmpl	$1, -108(%ebp)
 4496 0383 0F8447FF 		je	L27
 4496      FFFF
 4497 0389 837D9402 		cmpl	$2, -108(%ebp)
 4498 038d 0F84E0FE 		je	L23
 4498      FFFF
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 8


 4499              	L34:
 4500 0393 8B55A4   		movl	-92(%ebp), %edx
 4501 0396 89559C   		movl	%edx, -100(%ebp)
 4502 0399 8B4508   		movl	8(%ebp), %eax
 4503 039c 83C008   		addl	$8, %eax
 4504 039f 890424   		movl	%eax, (%esp)
 4505 03a2 C745B000 		movl	$0, -80(%ebp)
 4505      000000
 4506 03a9 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4506      00
 4507 03ae 8B459C   		movl	-100(%ebp), %eax
 4508 03b1 8945A4   		movl	%eax, -92(%ebp)
 4509              	L36:
 4510              	L38:
 4511 03b4 8B55A4   		movl	-92(%ebp), %edx
 4512 03b7 895598   		movl	%edx, -104(%ebp)
 4513 03ba 8B4508   		movl	8(%ebp), %eax
 4514 03bd 83C004   		addl	$4, %eax
 4515 03c0 890424   		movl	%eax, (%esp)
 4516 03c3 C745B000 		movl	$0, -80(%ebp)
 4516      000000
 4517 03ca E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4517      00
 4518 03cf 8B4598   		movl	-104(%ebp), %eax
 4519 03d2 8945A4   		movl	%eax, -92(%ebp)
 4520              	L40:
 4521 03d5 8B55A4   		movl	-92(%ebp), %edx
 4522 03d8 891424   		movl	%edx, (%esp)
 4523 03db C745B0FF 		movl	$-1, -80(%ebp)
 4523      FFFFFF
 4524 03e2 E8000000 		call	__Unwind_SjLj_Resume
 4524      00
 4526              	LM16:
 4527              	L22:
 4528 03e7 8D45AC   		leal	-84(%ebp), %eax
 4529 03ea 890424   		movl	%eax, (%esp)
 4530 03ed E8000000 		call	__Unwind_SjLj_Unregister
 4530      00
 4531 03f2 8D65F4   		leal	-12(%ebp), %esp
 4532 03f5 5B       		popl	%ebx
 4533 03f6 5E       		popl	%esi
 4534 03f7 5F       		popl	%edi
 4535 03f8 5D       		popl	%ebp
 4536 03f9 C3       		ret
 4537              	LBE3:
 4538              		.section	.gcc_except_table,""
 4539              	LLSDA646:
 4540 000a FF       		.byte	0xff
 4541 000b FF       		.byte	0xff
 4542 000c 01       		.byte	0x1
 4543 000d 06       		.uleb128 LLSDACSE646-LLSDACSB646
 4544              	LLSDACSB646:
 4545 000e 00       		.uleb128 0x0
 4546 000f 00       		.uleb128 0x0
 4547 0010 01       		.uleb128 0x1
 4548 0011 00       		.uleb128 0x0
 4549 0012 02       		.uleb128 0x2
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 9


 4550 0013 00       		.uleb128 0x0
 4551              	LLSDACSE646:
 4552              		.text
 4553              	Lscope1:
 4556              		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev,"x"
 4557              		.linkonce discard
 4558              		.align 2
 4561              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4563              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev:
 4565              	Ltext1:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // List implementation -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * Copyright (c) 1996,1997
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * Permission to use, copy, modify, distribute and sell this software
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 10


  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * representations about the suitability of this software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** /** @file stl_list.h
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****  */
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** #ifndef __GLIBCPP_INTERNAL_LIST_H
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** #define __GLIBCPP_INTERNAL_LIST_H
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** #include <bits/concept_check.h>
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** 
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** namespace std
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** {
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   // Supporting structures are split into common and templated types; the
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   // latter publicly inherits from the former in an effort to reduce code
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   // duplication.  This results in some "needless" static_cast'ing later on,
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   // but it's all safe downcasting.
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /// @if maint Common part of a node in the %list.  @endif
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   struct _List_node_base
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_node_base* _M_next;   ///< Self-explanatory
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_node_base* _M_prev;   ///< Self-explanatory
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   };
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /// @if maint An actual node in the %list.  @endif
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   template<typename _Tp>
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     struct _List_node : public _List_node_base
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _Tp _M_data;                ///< User's data.
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   };
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /**
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @if maint
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @brief Common part of a list::iterator.
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  A simple type to walk a doubly-linked list.  All operations here should
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  be self-explanatory after taking any decent introductory data structures
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  course.
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @endif
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   */
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   struct _List_iterator_base
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef size_t                        size_type;
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef ptrdiff_t                     difference_type;
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef bidirectional_iterator_tag    iterator_category;
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /// The only member points to the %list element.
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_node_base* _M_node;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 11


 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_iterator_base(_List_node_base* __x)
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     : _M_node(__x)
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { }
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_iterator_base()
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { }
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /// Walk the %list forward.
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_incr()
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { _M_node = _M_node->_M_next; }
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /// Walk the %list backward.
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_decr()
 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { _M_node = _M_node->_M_prev; }
 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     bool
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator==(const _List_iterator_base& __x) const
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { return _M_node == __x._M_node; }
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     bool
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator!=(const _List_iterator_base& __x) const
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { return _M_node != __x._M_node; }
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   };
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /**
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @brief A list::iterator.
 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  In addition to being used externally, a list holds one of these
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  internally, pointing to the sequence of data.
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @if maint
 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  All the functions are op overloads.
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @endif
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   */
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     struct _List_iterator : public _List_iterator_base
 144:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
 145:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;
 146:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;
 147:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_iterator<_Tp,_Ref,_Ptr>             _Self;
 148:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 149:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _Tp                                       value_type;
 150:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _Ptr                                      pointer;
 151:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _Ref                                      reference;
 152:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_node<_Tp>                           _Node;
 153:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 154:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_iterator(_Node* __x)
 155:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     : _List_iterator_base(__x)
 156:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { }
 157:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 158:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_iterator()
 159:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { }
 160:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 161:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_iterator(const iterator& __x)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 12


 162:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     : _List_iterator_base(__x._M_node)
 163:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { }
 164:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 165:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     reference
 166:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator*() const
 167:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { return static_cast<_Node*>(_M_node)->_M_data; }
 168:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // Must downcast from List_node_base to _List_node to get to _M_data.
 169:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 170:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     pointer
 171:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator->() const
 172:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { return &(operator*()); }
 173:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 174:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _Self&
 175:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator++()
 176:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 177:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       this->_M_incr();
 178:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       return *this;
 179:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 180:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 181:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _Self
 182:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator++(int)
 183:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 184:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _Self __tmp = *this;
 185:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       this->_M_incr();
 186:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       return __tmp;
 187:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 188:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 189:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _Self&
 190:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator--()
 191:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 192:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       this->_M_decr();
 193:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       return *this;
 194:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 195:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 196:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _Self
 197:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator--(int)
 198:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 199:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _Self __tmp = *this;
 200:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       this->_M_decr();
 201:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       return __tmp;
 202:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 203:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   };
 204:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 205:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 206:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /// @if maint Primary default version.  @endif
 207:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /**
 208:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @if maint
 209:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  See bits/stl_deque.h's _Deque_alloc_base for an explanation.
 210:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @endif
 211:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   */
 212:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   template<typename _Tp, typename _Allocator, bool _IsStatic>
 213:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     class _List_alloc_base
 214:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
 215:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   public:
 216:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef typename _Alloc_traits<_Tp, _Allocator>::allocator_type
 217:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****             allocator_type;
 218:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 13


 219:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     allocator_type
 220:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     get_allocator() const { return _M_node_allocator; }
 221:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 222:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_alloc_base(const allocator_type& __a)
 223:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     : _M_node_allocator(__a)
 224:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { }
 225:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 226:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   protected:
 227:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_node<_Tp>*
 228:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_get_node()
 229:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { return _M_node_allocator.allocate(1); }
 230:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 231:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 232:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_put_node(_List_node<_Tp>* __p)
 233:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { _M_node_allocator.deallocate(__p, 1); }
 234:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 235:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // NOTA BENE
 236:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // The stored instance is not actually of "allocator_type"'s type.  Instead
 237:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // we rebind the type to Allocator<List_node<Tp>>, which according to
 238:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // [20.1.5]/4 should probably be the same.  List_node<Tp> is not the same
 239:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // size as Tp (it's two pointers larger), and specializations on Tp may go
 240:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // unused because List_node<Tp> is being bound instead.
 241:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     //
 242:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // We put this to the test in get_allocator above; if the two types are
 243:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // actually different, there had better be a conversion between them.
 244:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     //
 245:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // None of the predefined allocators shipped with the library (as of 3.1)
 246:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // use this instantiation anyhow; they're all instanceless.
 247:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typename _Alloc_traits<_List_node<_Tp>, _Allocator>::allocator_type
 248:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****              _M_node_allocator;
 249:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 250:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_node<_Tp>* _M_node;
 251:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   };
 252:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 253:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /// @if maint Specialization for instanceless allocators.  @endif
 254:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   template<typename _Tp, typename _Allocator>
 255:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     class _List_alloc_base<_Tp, _Allocator, true>
 256:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
 257:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   public:
 258:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef typename _Alloc_traits<_Tp, _Allocator>::allocator_type
 259:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****             allocator_type;
 260:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 261:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     allocator_type
 262:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     get_allocator() const { return allocator_type(); }
 263:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 264:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_alloc_base(const allocator_type&)
 265:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { }
 266:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 267:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   protected:
 268:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // See comment in primary template class about why this is safe for the
 269:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // standard predefined classes.
 270:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef typename _Alloc_traits<_List_node<_Tp>, _Allocator>::_Alloc_type
 271:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****             _Alloc_type;
 272:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 273:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_node<_Tp>*
 274:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_get_node()
 275:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { return _Alloc_type::allocate(1); }
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 14


 276:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 277:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 278:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_put_node(_List_node<_Tp>* __p)
 279:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { _Alloc_type::deallocate(__p, 1); }
 280:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 281:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_node<_Tp>* _M_node;
 282:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   };
 283:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 284:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 285:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /**
 286:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @if maint
 287:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  See bits/stl_deque.h's _Deque_base for an explanation.
 288:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @endif
 289:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   */
 290:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   template <typename _Tp, typename _Alloc>
 291:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     class _List_base
 292:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     : public _List_alloc_base<_Tp, _Alloc,
 293:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****                               _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
 294:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
 295:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   public:
 296:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_alloc_base<_Tp, _Alloc,
 297:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****                              _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
 298:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****             _Base;
 299:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef typename _Base::allocator_type allocator_type;
 300:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 301:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _List_base(const allocator_type& __a)
 302:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     : _Base(__a)
 303:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 304:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _M_node = _M_get_node();
 305:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _M_node->_M_next = _M_node;
 306:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _M_node->_M_prev = _M_node;
 307:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 308:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 309:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // This is what actually destroys the list.
 310:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     ~_List_base()
 311:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 312:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       __clear();
 313:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _M_put_node(_M_node);
 314:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 315:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 316:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 317:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     __clear();
 318:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   };
 319:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 320:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 321:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   /**
 322:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @brief  A standard container with linear time access to elements, and
 323:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  fixed time insertion/deletion at any point in the sequence.
 324:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 325:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @ingroup Containers
 326:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @ingroup Sequences
 327:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 328:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 329:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 330:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  <a href="tables.html#67">sequence</a>, including the
 331:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 332:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  %exception of @c at and @c operator[].
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 15


 333:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 334:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  This is a @e doubly @e linked %list.  Traversal up and down the %list
 335:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  requires linear time, but adding and removing elements (or @e nodes) is
 336:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  done in constant time, regardless of where the change takes place.
 337:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  Unlike std::vector and std::deque, random-access iterators are not
 338:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  provided, so subscripting ( @c [] ) access is not allowed.  For algorithms
 339:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  which only need sequential access, this lack makes no difference.
 340:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 341:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  Also unlike the other standard containers, std::list provides specialized 
 342:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  algorithms %unique to linked lists, such as splicing, sorting, and
 343:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  in-place reversal.
 344:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 345:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @if maint
 346:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  A couple points on memory allocation for list<Tp>:
 347:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 348:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  First, we never actually allocate a Tp, we allocate List_node<Tp>'s
 349:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  and trust [20.1.5]/4 to DTRT.  This is to ensure that after elements from
 350:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  %list<X,Alloc1> are spliced into %list<X,Alloc2>, destroying the memory of
 351:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  the second %list is a valid operation, i.e., Alloc1 giveth and Alloc2
 352:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  taketh away.
 353:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *
 354:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  Second, a %list conceptually represented as
 355:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @code
 356:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *    A <---> B <---> C <---> D
 357:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @endcode
 358:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  is actually circular; a link exists between A and D.  The %list class
 359:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  holds (as its only data member) a private list::iterator pointing to
 360:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @e D, not to @e A!  To get to the head of the %list, we start at the tail
 361:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  and move forward by one.  When this member iterator's next/previous
 362:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  pointers refer to itself, the %list is %empty.
 363:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  @endif
 364:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   */
 365:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   template<typename _Tp, typename _Alloc = allocator<_Tp> >
 366:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     class list : protected _List_base<_Tp, _Alloc>
 367:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   {
 368:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // concept requirements
 369:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     __glibcpp_class_requires(_Tp, _SGIAssignableConcept)
 370:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 371:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_base<_Tp, _Alloc>                       _Base;
 372:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 373:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   public:
 374:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _Tp                                           value_type;
 375:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef value_type*                                   pointer;
 376:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef const value_type*                             const_pointer;
 377:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_iterator<_Tp,_Tp&,_Tp*>                 iterator;
 378:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_iterator<_Tp,const _Tp&,const _Tp*>     const_iterator;
 379:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef std::reverse_iterator<const_iterator>     const_reverse_iterator;
 380:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef std::reverse_iterator<iterator>                 reverse_iterator;
 381:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef value_type&                                   reference;
 382:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef const value_type&                             const_reference;
 383:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef size_t                                        size_type;
 384:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef ptrdiff_t                                     difference_type;
 385:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef typename _Base::allocator_type                allocator_type;
 386:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 387:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   protected:
 388:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // Note that pointers-to-_Node's can be ctor-converted to iterator types.
 389:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     typedef _List_node<_Tp>                               _Node;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 16


 390:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 391:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /** @if maint
 392:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  One data member plus two memory-handling functions.  If the _Alloc
 393:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  type requires separate instances, then one of those will also be
 394:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  included, accumulated from the topmost parent.
 395:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @endif
 396:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 397:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     using _Base::_M_node;
 398:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     using _Base::_M_put_node;
 399:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     using _Base::_M_get_node;
 400:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 401:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 402:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @if maint
 403:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  An instance of user data.
 404:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 405:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Allocates space for a new node and constructs a copy of @a x in it.
 406:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @endif
 407:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 408:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _Node*
 409:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_create_node(const value_type& __x)
 410:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 411:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _Node* __p = _M_get_node();
 412:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       try {
 413:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         _Construct(&__p->_M_data, __x);
 414:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       }
 415:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       catch(...)
 416:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       {
 417:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         _M_put_node(__p);
 418:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         __throw_exception_again;
 419:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       }
 420:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       return __p;
 421:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 422:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 423:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 424:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @if maint
 425:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Allocates space for a new node and default-constructs a new instance
 426:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  of @c value_type in it.
 427:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @endif
 428:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 429:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _Node*
 430:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     _M_create_node()
 431:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 432:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       _Node* __p = _M_get_node();
 433:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       try {
 434:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         _Construct(&__p->_M_data);
 435:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       }
 436:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       catch(...)
 437:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       {
 438:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         _M_put_node(__p);
 439:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         __throw_exception_again;
 440:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       }
 441:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       return __p;
 442:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 443:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 444:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   public:
 445:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // [23.2.2.1] construct/copy/destroy
 446:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // (assign() and get_allocator() are also listed in this section)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 17


 447:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 448:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Default constructor creates no elements.
 449:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 450:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     explicit
 451:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     list(const allocator_type& __a = allocator_type())
 452:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     : _Base(__a) { }
 453:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 454:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 455:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Create a %list with copies of an exemplar element.
 456:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  n  The number of elements to initially create.
 457:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  value  An element to copy.
 458:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      * 
 459:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This constructor fills the %list with @a n copies of @a value.
 460:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 461:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     list(size_type __n, const value_type& __value,
 462:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****          const allocator_type& __a = allocator_type())
 463:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       : _Base(__a)
 464:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       { this->insert(begin(), __n, __value); }
 465:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 466:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 467:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Create a %list with default elements.
 468:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  n  The number of elements to initially create.
 469:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      * 
 470:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This constructor fills the %list with @a n copies of a
 471:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  default-constructed element.
 472:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 473:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     explicit
 474:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     list(size_type __n)
 475:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       : _Base(allocator_type())
 476:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       { this->insert(begin(), __n, value_type()); }
 477:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 478:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 479:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  %List copy constructor.
 480:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  A %list of identical element and allocator types.
 481:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      * 
 482:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  The newly-created %list uses a copy of the allocation object used
 483:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  by @a x.
 484:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 485:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     list(const list& __x)
 486:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       : _Base(__x.get_allocator())
 487:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       { this->insert(begin(), __x.begin(), __x.end()); }
 488:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 489:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 490:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Builds a %list from a range.
 491:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  first  An input iterator.
 492:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  last  An input iterator.
 493:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      * 
 494:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Create a %list consisting of copies of the elements from [first,last).
 495:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This is linear in N (where N is distance(first,last)).
 496:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 497:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @if maint
 498:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  We don't need any dispatching tricks here, because insert does all of
 499:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  that anyway.
 500:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @endif
 501:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 502:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     template<typename _InputIterator>
 503:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       list(_InputIterator __first, _InputIterator __last,
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 18


 504:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****            const allocator_type& __a = allocator_type())
 505:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       : _Base(__a)
 506:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       { this->insert(begin(), __first, __last); }
 507:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 508:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 509:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  The dtor only erases the elements, and note that if the elements
 510:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  themselves are pointers, the pointed-to memory is not touched in any
 511:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  way.  Managing the pointer is the user's responsibilty.
 512:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 513:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     ~list() { }
 4567              	LM17:
 4568              	L45:
 4569 0000 55       		pushl	%ebp
 4570 0001 89E5     		movl	%esp, %ebp
 4571 0003 83EC08   		subl	$8, %esp
 4573              	LM18:
 4574              	LBB4:
 4575 0006 8B4508   		movl	8(%ebp), %eax
 4576 0009 890424   		movl	%eax, (%esp)
 4577 000c E8000000 		call	__ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EED2Ev
 4577      00
 4578 0011 C9       		leave
 4579 0012 C3       		ret
 4580              	L43:
 4581              	LBE4:
 4582              	Lscope2:
 4584 0013 90       		.text
 4585              		.align 2
 4588              	.globl __ZN10ThreadPoolD2Ev
 4590              	__ZN10ThreadPoolD2Ev:
 4592              	Ltext2:
  24:../../MMI/Resource/ThreadPool.cpp **** 
  25:../../MMI/Resource/ThreadPool.cpp **** ThreadPool::~ThreadPool()
  26:../../MMI/Resource/ThreadPool.cpp **** {
 4594              	LM19:
 4595 03fa 55       		pushl	%ebp
 4596 03fb 89E5     		movl	%esp, %ebp
 4597 03fd 57       		pushl	%edi
 4598 03fe 56       		pushl	%esi
 4599 03ff 53       		pushl	%ebx
 4600 0400 83EC4C   		subl	$76, %esp
 4601 0403 C745E000 		movl	$___gxx_personality_sj0, -32(%ebp)
 4601      000000
 4602 040a C745E414 		movl	$LLSDA665, -28(%ebp)
 4602      000000
 4603 0411 8D45E8   		leal	-24(%ebp), %eax
 4604 0414 8D55F4   		leal	-12(%ebp), %edx
 4605 0417 8910     		movl	%edx, (%eax)
 4606 0419 BA5D0400 		movl	$L60, %edx
 4606      00
 4607 041e 895004   		movl	%edx, 4(%eax)
 4608 0421 896008   		movl	%esp, 8(%eax)
 4609 0424 8D45C8   		leal	-56(%ebp), %eax
 4610 0427 890424   		movl	%eax, (%esp)
 4611 042a E8000000 		call	__Unwind_SjLj_Register
 4611      00
 4613              	LM20:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 19


 4614              	LBB5:
 4615 042f 8B4508   		movl	8(%ebp), %eax
 4616 0432 C7000800 		movl	$__ZTV10ThreadPool+8, (%eax)
 4616      0000
  27:../../MMI/Resource/ThreadPool.cpp ****     Destroy();
 4618              	LM21:
 4619 0438 8B4508   		movl	8(%ebp), %eax
 4620 043b 890424   		movl	%eax, (%esp)
 4621 043e C745CC01 		movl	$1, -52(%ebp)
 4621      000000
 4622 0445 E8820600 		call	__ZN10ThreadPool7DestroyEv
 4622      00
  28:../../MMI/Resource/ThreadPool.cpp ****     DeleteCriticalSection(&m_cs);
 4624              	LM22:
 4625 044a 8B4508   		movl	8(%ebp), %eax
 4626 044d 83C01C   		addl	$28, %eax
 4627 0450 890424   		movl	%eax, (%esp)
 4628 0453 E8000000 		call	_DeleteCriticalSection@4
 4628      00
 4629 0458 83EC04   		subl	$4, %esp
 4630 045b EB34     		jmp	L51
 4631              	L60:
 4632 045d 8D6D0C   		leal	12(%ebp), %ebp
 4633 0460 8B45CC   		movl	-52(%ebp), %eax
 4634 0463 8B55D0   		movl	-48(%ebp), %edx
 4635 0466 8955C0   		movl	%edx, -64(%ebp)
 4636 0469 83F801   		cmpl	$1, %eax
 4637 046c 743A     		je	L54
 4638              	L50:
 4639 046e 8B45C0   		movl	-64(%ebp), %eax
 4640 0471 8945C4   		movl	%eax, -60(%ebp)
 4641 0474 8B4508   		movl	8(%ebp), %eax
 4642 0477 83C008   		addl	$8, %eax
 4643 047a 890424   		movl	%eax, (%esp)
 4644 047d C745CC00 		movl	$0, -52(%ebp)
 4644      000000
 4645 0484 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4645      00
 4646 0489 8B55C4   		movl	-60(%ebp), %edx
 4647 048c 8955C0   		movl	%edx, -64(%ebp)
 4648              	L52:
 4649 048f EB17     		jmp	L54
 4650              	L51:
 4651 0491 8B4508   		movl	8(%ebp), %eax
 4652 0494 83C008   		addl	$8, %eax
 4653 0497 890424   		movl	%eax, (%esp)
 4654 049a C745CC02 		movl	$2, -52(%ebp)
 4654      000000
 4655 04a1 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4655      00
 4656 04a6 EB33     		jmp	L55
 4657              	L54:
 4658 04a8 8B45C0   		movl	-64(%ebp), %eax
 4659 04ab 8945BC   		movl	%eax, -68(%ebp)
 4660 04ae 8B4508   		movl	8(%ebp), %eax
 4661 04b1 83C004   		addl	$4, %eax
 4662 04b4 890424   		movl	%eax, (%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 20


 4663 04b7 C745CC00 		movl	$0, -52(%ebp)
 4663      000000
 4664 04be E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4664      00
 4665 04c3 8B55BC   		movl	-68(%ebp), %edx
 4666 04c6 8955C0   		movl	%edx, -64(%ebp)
 4667              	L56:
 4668 04c9 8B45C0   		movl	-64(%ebp), %eax
 4669 04cc 890424   		movl	%eax, (%esp)
 4670 04cf C745CCFF 		movl	$-1, -52(%ebp)
 4670      FFFFFF
 4671 04d6 E8000000 		call	__Unwind_SjLj_Resume
 4671      00
 4672              	L55:
 4673 04db 8B4508   		movl	8(%ebp), %eax
 4674 04de 83C004   		addl	$4, %eax
 4675 04e1 890424   		movl	%eax, (%esp)
 4676 04e4 C745CCFF 		movl	$-1, -52(%ebp)
 4676      FFFFFF
 4677 04eb E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4677      00
  29:../../MMI/Resource/ThreadPool.cpp **** }
 4679              	LM23:
 4680              	LBE5:
 4681 04f0 B8010000 		movl	$1, %eax
 4681      00
 4682 04f5 83E000   		andl	$0, %eax
 4683 04f8 84C0     		testb	%al, %al
 4684 04fa 740B     		je	L48
 4685 04fc 8B4508   		movl	8(%ebp), %eax
 4686 04ff 890424   		movl	%eax, (%esp)
 4687 0502 E8000000 		call	__ZdlPv
 4687      00
 4688              	L48:
 4689 0507 8D45C8   		leal	-56(%ebp), %eax
 4690 050a 890424   		movl	%eax, (%esp)
 4691 050d E8000000 		call	__Unwind_SjLj_Unregister
 4691      00
 4692 0512 8D65F4   		leal	-12(%ebp), %esp
 4693 0515 5B       		popl	%ebx
 4694 0516 5E       		popl	%esi
 4695 0517 5F       		popl	%edi
 4696 0518 5D       		popl	%ebp
 4697 0519 C3       		ret
 4698              		.section	.gcc_except_table,""
 4699              	LLSDA665:
 4700 0014 FF       		.byte	0xff
 4701 0015 FF       		.byte	0xff
 4702 0016 01       		.byte	0x1
 4703 0017 04       		.uleb128 LLSDACSE665-LLSDACSB665
 4704              	LLSDACSB665:
 4705 0018 00       		.uleb128 0x0
 4706 0019 00       		.uleb128 0x0
 4707 001a 01       		.uleb128 0x1
 4708 001b 00       		.uleb128 0x0
 4709              	LLSDACSE665:
 4710              		.text
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 21


 4711              	Lscope3:
 4713              		.align 2
 4716              	.globl __ZN10ThreadPoolD1Ev
 4718              	__ZN10ThreadPoolD1Ev:
 4720              	LM24:
 4721 051a 55       		pushl	%ebp
 4722 051b 89E5     		movl	%esp, %ebp
 4723 051d 57       		pushl	%edi
 4724 051e 56       		pushl	%esi
 4725 051f 53       		pushl	%ebx
 4726 0520 83EC4C   		subl	$76, %esp
 4727 0523 C745E000 		movl	$___gxx_personality_sj0, -32(%ebp)
 4727      000000
 4728 052a C745E41C 		movl	$LLSDA667, -28(%ebp)
 4728      000000
 4729 0531 8D45E8   		leal	-24(%ebp), %eax
 4730 0534 8D55F4   		leal	-12(%ebp), %edx
 4731 0537 8910     		movl	%edx, (%eax)
 4732 0539 BA7D0500 		movl	$L73, %edx
 4732      00
 4733 053e 895004   		movl	%edx, 4(%eax)
 4734 0541 896008   		movl	%esp, 8(%eax)
 4735 0544 8D45C8   		leal	-56(%ebp), %eax
 4736 0547 890424   		movl	%eax, (%esp)
 4737 054a E8000000 		call	__Unwind_SjLj_Register
 4737      00
 4739              	LM25:
 4740              	LBB6:
 4741 054f 8B4508   		movl	8(%ebp), %eax
 4742 0552 C7000800 		movl	$__ZTV10ThreadPool+8, (%eax)
 4742      0000
 4744              	LM26:
 4745 0558 8B4508   		movl	8(%ebp), %eax
 4746 055b 890424   		movl	%eax, (%esp)
 4747 055e C745CC01 		movl	$1, -52(%ebp)
 4747      000000
 4748 0565 E8620500 		call	__ZN10ThreadPool7DestroyEv
 4748      00
 4750              	LM27:
 4751 056a 8B4508   		movl	8(%ebp), %eax
 4752 056d 83C01C   		addl	$28, %eax
 4753 0570 890424   		movl	%eax, (%esp)
 4754 0573 E8000000 		call	_DeleteCriticalSection@4
 4754      00
 4755 0578 83EC04   		subl	$4, %esp
 4756 057b EB34     		jmp	L64
 4757              	L73:
 4758 057d 8D6D0C   		leal	12(%ebp), %ebp
 4759 0580 8B45CC   		movl	-52(%ebp), %eax
 4760 0583 8B55D0   		movl	-48(%ebp), %edx
 4761 0586 8955C0   		movl	%edx, -64(%ebp)
 4762 0589 83F801   		cmpl	$1, %eax
 4763 058c 743A     		je	L67
 4764              	L63:
 4765 058e 8B45C0   		movl	-64(%ebp), %eax
 4766 0591 8945C4   		movl	%eax, -60(%ebp)
 4767 0594 8B4508   		movl	8(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 22


 4768 0597 83C008   		addl	$8, %eax
 4769 059a 890424   		movl	%eax, (%esp)
 4770 059d C745CC00 		movl	$0, -52(%ebp)
 4770      000000
 4771 05a4 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4771      00
 4772 05a9 8B55C4   		movl	-60(%ebp), %edx
 4773 05ac 8955C0   		movl	%edx, -64(%ebp)
 4774              	L65:
 4775 05af EB17     		jmp	L67
 4776              	L64:
 4777 05b1 8B4508   		movl	8(%ebp), %eax
 4778 05b4 83C008   		addl	$8, %eax
 4779 05b7 890424   		movl	%eax, (%esp)
 4780 05ba C745CC02 		movl	$2, -52(%ebp)
 4780      000000
 4781 05c1 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4781      00
 4782 05c6 EB33     		jmp	L68
 4783              	L67:
 4784 05c8 8B45C0   		movl	-64(%ebp), %eax
 4785 05cb 8945BC   		movl	%eax, -68(%ebp)
 4786 05ce 8B4508   		movl	8(%ebp), %eax
 4787 05d1 83C004   		addl	$4, %eax
 4788 05d4 890424   		movl	%eax, (%esp)
 4789 05d7 C745CC00 		movl	$0, -52(%ebp)
 4789      000000
 4790 05de E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4790      00
 4791 05e3 8B55BC   		movl	-68(%ebp), %edx
 4792 05e6 8955C0   		movl	%edx, -64(%ebp)
 4793              	L69:
 4794 05e9 8B45C0   		movl	-64(%ebp), %eax
 4795 05ec 890424   		movl	%eax, (%esp)
 4796 05ef C745CCFF 		movl	$-1, -52(%ebp)
 4796      FFFFFF
 4797 05f6 E8000000 		call	__Unwind_SjLj_Resume
 4797      00
 4798              	L68:
 4799 05fb 8B4508   		movl	8(%ebp), %eax
 4800 05fe 83C004   		addl	$4, %eax
 4801 0601 890424   		movl	%eax, (%esp)
 4802 0604 C745CCFF 		movl	$-1, -52(%ebp)
 4802      FFFFFF
 4803 060b E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4803      00
 4805              	LM28:
 4806              	LBE6:
 4807 0610 B8010000 		movl	$1, %eax
 4807      00
 4808 0615 83E002   		andl	$2, %eax
 4809 0618 84C0     		testb	%al, %al
 4810 061a 740B     		je	L61
 4811 061c 8B4508   		movl	8(%ebp), %eax
 4812 061f 890424   		movl	%eax, (%esp)
 4813 0622 E8000000 		call	__ZdlPv
 4813      00
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 23


 4814              	L61:
 4815 0627 8D45C8   		leal	-56(%ebp), %eax
 4816 062a 890424   		movl	%eax, (%esp)
 4817 062d E8000000 		call	__Unwind_SjLj_Unregister
 4817      00
 4818 0632 8D65F4   		leal	-12(%ebp), %esp
 4819 0635 5B       		popl	%ebx
 4820 0636 5E       		popl	%esi
 4821 0637 5F       		popl	%edi
 4822 0638 5D       		popl	%ebp
 4823 0639 C3       		ret
 4824              		.section	.gcc_except_table,""
 4825              	LLSDA667:
 4826 001c FF       		.byte	0xff
 4827 001d FF       		.byte	0xff
 4828 001e 01       		.byte	0x1
 4829 001f 04       		.uleb128 LLSDACSE667-LLSDACSB667
 4830              	LLSDACSB667:
 4831 0020 00       		.uleb128 0x0
 4832 0021 00       		.uleb128 0x0
 4833 0022 01       		.uleb128 0x1
 4834 0023 00       		.uleb128 0x0
 4835              	LLSDACSE667:
 4836              		.text
 4837              	Lscope4:
 4839              		.align 2
 4842              	.globl __ZN10ThreadPoolD0Ev
 4844              	__ZN10ThreadPoolD0Ev:
 4846              	LM29:
 4847 063a 55       		pushl	%ebp
 4848 063b 89E5     		movl	%esp, %ebp
 4849 063d 57       		pushl	%edi
 4850 063e 56       		pushl	%esi
 4851 063f 53       		pushl	%ebx
 4852 0640 83EC4C   		subl	$76, %esp
 4853 0643 C745E000 		movl	$___gxx_personality_sj0, -32(%ebp)
 4853      000000
 4854 064a C745E424 		movl	$LLSDA669, -28(%ebp)
 4854      000000
 4855 0651 8D45E8   		leal	-24(%ebp), %eax
 4856 0654 8D55F4   		leal	-12(%ebp), %edx
 4857 0657 8910     		movl	%edx, (%eax)
 4858 0659 BA9D0600 		movl	$L86, %edx
 4858      00
 4859 065e 895004   		movl	%edx, 4(%eax)
 4860 0661 896008   		movl	%esp, 8(%eax)
 4861 0664 8D45C8   		leal	-56(%ebp), %eax
 4862 0667 890424   		movl	%eax, (%esp)
 4863 066a E8000000 		call	__Unwind_SjLj_Register
 4863      00
 4865              	LM30:
 4866              	LBB7:
 4867 066f 8B4508   		movl	8(%ebp), %eax
 4868 0672 C7000800 		movl	$__ZTV10ThreadPool+8, (%eax)
 4868      0000
 4870              	LM31:
 4871 0678 8B4508   		movl	8(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 24


 4872 067b 890424   		movl	%eax, (%esp)
 4873 067e C745CC01 		movl	$1, -52(%ebp)
 4873      000000
 4874 0685 E8420400 		call	__ZN10ThreadPool7DestroyEv
 4874      00
 4876              	LM32:
 4877 068a 8B4508   		movl	8(%ebp), %eax
 4878 068d 83C01C   		addl	$28, %eax
 4879 0690 890424   		movl	%eax, (%esp)
 4880 0693 E8000000 		call	_DeleteCriticalSection@4
 4880      00
 4881 0698 83EC04   		subl	$4, %esp
 4882 069b EB34     		jmp	L77
 4883              	L86:
 4884 069d 8D6D0C   		leal	12(%ebp), %ebp
 4885 06a0 8B45CC   		movl	-52(%ebp), %eax
 4886 06a3 8B55D0   		movl	-48(%ebp), %edx
 4887 06a6 8955C0   		movl	%edx, -64(%ebp)
 4888 06a9 83F801   		cmpl	$1, %eax
 4889 06ac 743A     		je	L80
 4890              	L76:
 4891 06ae 8B45C0   		movl	-64(%ebp), %eax
 4892 06b1 8945C4   		movl	%eax, -60(%ebp)
 4893 06b4 8B4508   		movl	8(%ebp), %eax
 4894 06b7 83C008   		addl	$8, %eax
 4895 06ba 890424   		movl	%eax, (%esp)
 4896 06bd C745CC00 		movl	$0, -52(%ebp)
 4896      000000
 4897 06c4 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4897      00
 4898 06c9 8B55C4   		movl	-60(%ebp), %edx
 4899 06cc 8955C0   		movl	%edx, -64(%ebp)
 4900              	L78:
 4901 06cf EB17     		jmp	L80
 4902              	L77:
 4903 06d1 8B4508   		movl	8(%ebp), %eax
 4904 06d4 83C008   		addl	$8, %eax
 4905 06d7 890424   		movl	%eax, (%esp)
 4906 06da C745CC02 		movl	$2, -52(%ebp)
 4906      000000
 4907 06e1 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 4907      00
 4908 06e6 EB33     		jmp	L81
 4909              	L80:
 4910 06e8 8B45C0   		movl	-64(%ebp), %eax
 4911 06eb 8945BC   		movl	%eax, -68(%ebp)
 4912 06ee 8B4508   		movl	8(%ebp), %eax
 4913 06f1 83C004   		addl	$4, %eax
 4914 06f4 890424   		movl	%eax, (%esp)
 4915 06f7 C745CC00 		movl	$0, -52(%ebp)
 4915      000000
 4916 06fe E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4916      00
 4917 0703 8B55BC   		movl	-68(%ebp), %edx
 4918 0706 8955C0   		movl	%edx, -64(%ebp)
 4919              	L82:
 4920 0709 8B45C0   		movl	-64(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 25


 4921 070c 890424   		movl	%eax, (%esp)
 4922 070f C745CCFF 		movl	$-1, -52(%ebp)
 4922      FFFFFF
 4923 0716 E8000000 		call	__Unwind_SjLj_Resume
 4923      00
 4924              	L81:
 4925 071b 8B4508   		movl	8(%ebp), %eax
 4926 071e 83C004   		addl	$4, %eax
 4927 0721 890424   		movl	%eax, (%esp)
 4928 0724 C745CCFF 		movl	$-1, -52(%ebp)
 4928      FFFFFF
 4929 072b E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
 4929      00
 4931              	LM33:
 4932              	LBE7:
 4933 0730 B8010000 		movl	$1, %eax
 4933      00
 4934 0735 83E003   		andl	$3, %eax
 4935 0738 84C0     		testb	%al, %al
 4936 073a 740B     		je	L74
 4937 073c 8B4508   		movl	8(%ebp), %eax
 4938 073f 890424   		movl	%eax, (%esp)
 4939 0742 E8000000 		call	__ZdlPv
 4939      00
 4940              	L74:
 4941 0747 8D45C8   		leal	-56(%ebp), %eax
 4942 074a 890424   		movl	%eax, (%esp)
 4943 074d E8000000 		call	__Unwind_SjLj_Unregister
 4943      00
 4944 0752 8D65F4   		leal	-12(%ebp), %esp
 4945 0755 5B       		popl	%ebx
 4946 0756 5E       		popl	%esi
 4947 0757 5F       		popl	%edi
 4948 0758 5D       		popl	%ebp
 4949 0759 C3       		ret
 4950              		.section	.gcc_except_table,""
 4951              	LLSDA669:
 4952 0024 FF       		.byte	0xff
 4953 0025 FF       		.byte	0xff
 4954 0026 01       		.byte	0x1
 4955 0027 04       		.uleb128 LLSDACSE669-LLSDACSB669
 4956              	LLSDACSB669:
 4957 0028 00       		.uleb128 0x0
 4958 0029 00       		.uleb128 0x0
 4959 002a 01       		.uleb128 0x1
 4960 002b 00       		.uleb128 0x0
 4961              	LLSDACSE669:
 4962              		.text
 4963              	Lscope5:
 4965 075a 8DB60000 		.align 32
 4965      0000
 4966              	LC1:
 4967 0760 2E2E2F2E 		.ascii "../../MMI/Resource/ThreadPool.cpp\0"
 4967      2E2F4D4D 
 4967      492F5265 
 4967      736F7572 
 4967      63652F54 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 26


 4968              	LC2:
 4969 0782 6D5F684E 		.ascii "m_hNotifyShutdown != NULL\0"
 4969      6F746966 
 4969      79536875 
 4969      74646F77 
 4969      6E20213D 
 4970 079c 8D742600 		.align 32
 4971              	LC3:
 4972 07a0 494E5641 		.ascii "INVALID_HANDLE_VALUE != hThread\0"
 4972      4C49445F 
 4972      48414E44 
 4972      4C455F56 
 4972      414C5545 
 4973              		.align 32
 4974              	LC4:
 4975 07c0 54687265 		.ascii "Thread %d creation failed in ThreadPool::Create()\0"
 4975      61642025 
 4975      64206372 
 4975      65617469 
 4975      6F6E2066 
 4976              	LC5:
 4977 07f2 54485245 		.ascii "THREADPOLL\0"
 4977      4144504F 
 4977      4C4C00
 4978              	LC6:
 4979 07fd 43726561 		.ascii "Create Thread, ID = %d\0"
 4979      74652054 
 4979      68726561 
 4979      642C2049 
 4979      44203D20 
 4980              		.align 2
 4984              	.globl __ZN10ThreadPool6CreateEi
 4986              	__ZN10ThreadPool6CreateEi:
  30:../../MMI/Resource/ThreadPool.cpp **** 
  31:../../MMI/Resource/ThreadPool.cpp **** bool ThreadPool::Create(int poolSize)
  32:../../MMI/Resource/ThreadPool.cpp **** {
 4988              	LM34:
 4989 0814 55       		pushl	%ebp
 4990 0815 89E5     		movl	%esp, %ebp
 4991 0817 53       		pushl	%ebx
 4992 0818 83EC54   		subl	$84, %esp
  33:../../MMI/Resource/ThreadPool.cpp ****     Destroy();
 4994              	LM35:
 4995              	LBB8:
 4996 081b 8B4508   		movl	8(%ebp), %eax
 4997 081e 890424   		movl	%eax, (%esp)
 4998 0821 E8A60200 		call	__ZN10ThreadPool7DestroyEv
 4998      00
  34:../../MMI/Resource/ThreadPool.cpp ****     if (poolSize == 0)
 5000              	LM36:
 5001 0826 837D0C00 		cmpl	$0, 12(%ebp)
 5002 082a 750C     		jne	L88
  35:../../MMI/Resource/ThreadPool.cpp ****         return true;
 5004              	LM37:
 5005 082c C745D401 		movl	$1, -44(%ebp)
 5005      000000
 5006 0833 E99A0100 		jmp	L87
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 27


 5006      00
 5007              	L88:
  36:../../MMI/Resource/ThreadPool.cpp **** 
  37:../../MMI/Resource/ThreadPool.cpp ****     // create the event which will signal the threads to stop
  38:../../MMI/Resource/ThreadPool.cpp ****     m_hNotifyShutdown = CreateEvent(NULL, TRUE, FALSE, NULL);
 5009              	LM38:
 5010 0838 8B5D08   		movl	8(%ebp), %ebx
 5011 083b C744240C 		movl	$0, 12(%esp)
 5011      00000000 
 5012 0843 C7442408 		movl	$0, 8(%esp)
 5012      00000000 
 5013 084b C7442404 		movl	$1, 4(%esp)
 5013      01000000 
 5014 0853 C7042400 		movl	$0, (%esp)
 5014      000000
 5015 085a E8000000 		call	_CreateEventA@16
 5015      00
 5016 085f 83EC10   		subl	$16, %esp
 5017 0862 894318   		movl	%eax, 24(%ebx)
  39:../../MMI/Resource/ThreadPool.cpp ****     assert(m_hNotifyShutdown != NULL);
 5019              	LM39:
 5020 0865 8B4508   		movl	8(%ebp), %eax
 5021 0868 83781800 		cmpl	$0, 24(%eax)
 5022 086c 751C     		jne	L90
 5023 086e C7442408 		movl	$39, 8(%esp)
 5023      27000000 
 5024 0876 C7442404 		movl	$LC1, 4(%esp)
 5024      60070000 
 5025 087e C7042482 		movl	$LC2, (%esp)
 5025      070000
 5026 0885 E8000000 		call	__assert
 5026      00
 5027              	L90:
  40:../../MMI/Resource/ThreadPool.cpp ****     if (m_hNotifyShutdown == NULL)
 5029              	LM40:
 5030 088a 8B4508   		movl	8(%ebp), %eax
 5031 088d 83781800 		cmpl	$0, 24(%eax)
 5032 0891 750C     		jne	L91
  41:../../MMI/Resource/ThreadPool.cpp ****         return false;
 5034              	LM41:
 5035 0893 C745D400 		movl	$0, -44(%ebp)
 5035      000000
 5036 089a E9330100 		jmp	L87
 5036      00
 5037              	L91:
  42:../../MMI/Resource/ThreadPool.cpp **** 
  43:../../MMI/Resource/ThreadPool.cpp ****     // create the threads
  44:../../MMI/Resource/ThreadPool.cpp ****     for (int nIndex = 0; nIndex < poolSize; ++nIndex)
 5039              	LM42:
 5040              	LBB9:
 5041 089f C745F400 		movl	$0, -12(%ebp)
 5041      000000
 5042              	L92:
 5043 08a6 8B45F4   		movl	-12(%ebp), %eax
 5044 08a9 3B450C   		cmpl	12(%ebp), %eax
 5045 08ac 7C05     		jl	L95
 5046 08ae E9180100 		jmp	L93
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 28


 5046      00
 5047              	L95:
  45:../../MMI/Resource/ThreadPool.cpp ****     {
  46:../../MMI/Resource/ThreadPool.cpp ****         UINT uThreadId;
 5049              	LM43:
  47:../../MMI/Resource/ThreadPool.cpp ****         HANDLE hThread = (HANDLE)_beginthreadex(
 5051              	LM44:
 5052              	LBB10:
 5053              	LBB11:
 5054 08b3 8D45F0   		leal	-16(%ebp), %eax
 5055 08b6 89442414 		movl	%eax, 20(%esp)
 5056 08ba C7442410 		movl	$4, 16(%esp)
 5056      04000000 
 5057 08c2 8B4508   		movl	8(%ebp), %eax
 5058 08c5 8944240C 		movl	%eax, 12(%esp)
 5059 08c9 C7442408 		movl	$__ZN10ThreadPool10ThreadProcEPv@4, 8(%esp)
 5059      40100000 
 5060 08d1 C7442404 		movl	$0, 4(%esp)
 5060      00000000 
 5061 08d9 C7042400 		movl	$0, (%esp)
 5061      000000
 5062 08e0 E8000000 		call	__beginthreadex
 5062      00
 5063 08e5 8945EC   		movl	%eax, -20(%ebp)
  48:../../MMI/Resource/ThreadPool.cpp ****             NULL, 0, ThreadPool::ThreadProc, this,
  49:../../MMI/Resource/ThreadPool.cpp ****             CREATE_SUSPENDED, (UINT*)&uThreadId);
  50:../../MMI/Resource/ThreadPool.cpp ****         DWORD dwThreadId = uThreadId;
 5065              	LM45:
 5066 08e8 8B45F0   		movl	-16(%ebp), %eax
 5067 08eb 8945E8   		movl	%eax, -24(%ebp)
  51:../../MMI/Resource/ThreadPool.cpp ****         assert(INVALID_HANDLE_VALUE != hThread);
 5069              	LM46:
 5070 08ee 837DECFF 		cmpl	$-1, -20(%ebp)
 5071 08f2 751C     		jne	L97
 5072 08f4 C7442408 		movl	$51, 8(%esp)
 5072      33000000 
 5073 08fc C7442404 		movl	$LC1, 4(%esp)
 5073      60070000 
 5074 0904 C70424A0 		movl	$LC3, (%esp)
 5074      070000
 5075 090b E8000000 		call	__assert
 5075      00
 5076              	L97:
  52:../../MMI/Resource/ThreadPool.cpp **** 
  53:../../MMI/Resource/ThreadPool.cpp ****         if (hThread == INVALID_HANDLE_VALUE){
 5078              	LM47:
 5079 0910 837DECFF 		cmpl	$-1, -20(%ebp)
 5080 0914 752F     		jne	L98
  54:../../MMI/Resource/ThreadPool.cpp ****             THREADP_LOG_E("Thread %d creation failed in ThreadPool::Create()", nIndex);
 5082              	LM48:
 5083 0916 8B45F4   		movl	-12(%ebp), %eax
 5084 0919 8944240C 		movl	%eax, 12(%esp)
 5085 091d C7442408 		movl	$LC4, 8(%esp)
 5085      C0070000 
 5086 0925 C7442404 		movl	$LC5, 4(%esp)
 5086      F2070000 
 5087 092d C7042403 		movl	$3, (%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 29


 5087      000000
 5088 0934 E8000000 		call	_reslog_adaptor_log
 5088      00
  55:../../MMI/Resource/ThreadPool.cpp ****             return false;
 5090              	LM49:
 5091 0939 C745D400 		movl	$0, -44(%ebp)
 5091      000000
 5092 0940 E98D0000 		jmp	L87
 5092      00
 5093              	L98:
  56:../../MMI/Resource/ThreadPool.cpp ****         }
  57:../../MMI/Resource/ThreadPool.cpp **** 
  58:../../MMI/Resource/ThreadPool.cpp ****         // add the entry to the thread list
  59:../../MMI/Resource/ThreadPool.cpp ****         ThreadData td;
  60:../../MMI/Resource/ThreadPool.cpp ****         td.hWait = CreateEvent(NULL, TRUE, FALSE, NULL);
 5095              	LM50:
 5096 0945 C744240C 		movl	$0, 12(%esp)
 5096      00000000 
 5097 094d C7442408 		movl	$0, 8(%esp)
 5097      00000000 
 5098 0955 C7442404 		movl	$1, 4(%esp)
 5098      01000000 
 5099 095d C7042400 		movl	$0, (%esp)
 5099      000000
 5100 0964 E8000000 		call	_CreateEventA@16
 5100      00
 5101 0969 83EC10   		subl	$16, %esp
 5102 096c 8945D8   		movl	%eax, -40(%ebp)
  61:../../MMI/Resource/ThreadPool.cpp ****         td.hThread = hThread;
 5104              	LM51:
 5105 096f 8B45EC   		movl	-20(%ebp), %eax
 5106 0972 8945DC   		movl	%eax, -36(%ebp)
  62:../../MMI/Resource/ThreadPool.cpp ****         td.dwThreadId = dwThreadId;
 5108              	LM52:
 5109 0975 8B45E8   		movl	-24(%ebp), %eax
 5110 0978 8945E0   		movl	%eax, -32(%ebp)
  63:../../MMI/Resource/ThreadPool.cpp ****         THREADP_LOG_D("Create Thread, ID = %d", td.dwThreadId);
 5112              	LM53:
 5113 097b 8B45E0   		movl	-32(%ebp), %eax
 5114 097e 8944240C 		movl	%eax, 12(%esp)
 5115 0982 C7442408 		movl	$LC6, 8(%esp)
 5115      FD070000 
 5116 098a C7442404 		movl	$LC5, 4(%esp)
 5116      F2070000 
 5117 0992 C7042400 		movl	$0, (%esp)
 5117      000000
 5118 0999 E8000000 		call	_reslog_adaptor_log
 5118      00
  64:../../MMI/Resource/ThreadPool.cpp ****         m_threads.push_back(td);
 5120              	LM54:
 5121 099e 8D45D8   		leal	-40(%ebp), %eax
 5122 09a1 89442404 		movl	%eax, 4(%esp)
 5123 09a5 8B4508   		movl	8(%ebp), %eax
 5124 09a8 83C008   		addl	$8, %eax
 5125 09ab 890424   		movl	%eax, (%esp)
 5126 09ae E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE9push_backERKS1_
 5126      00
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 30


  65:../../MMI/Resource/ThreadPool.cpp ****         ResumeThread(hThread);
 5128              	LM55:
 5129 09b3 8B45EC   		movl	-20(%ebp), %eax
 5130 09b6 890424   		movl	%eax, (%esp)
 5131 09b9 E8000000 		call	_ResumeThread@4
 5131      00
 5132 09be 83EC04   		subl	$4, %esp
 5134              	LM56:
 5135 09c1 8D45F4   		leal	-12(%ebp), %eax
 5136              	LBE11:
 5137              	LBE10:
 5138 09c4 FF00     		incl	(%eax)
 5139 09c6 E9DBFEFF 		jmp	L92
 5139      FF
 5140              	L93:
  66:../../MMI/Resource/ThreadPool.cpp ****     }
  67:../../MMI/Resource/ThreadPool.cpp ****     return true;
 5142              	LM57:
 5143              	LBE9:
 5144 09cb C745D401 		movl	$1, -44(%ebp)
 5144      000000
  68:../../MMI/Resource/ThreadPool.cpp **** }
 5146              	LM58:
 5147              	L87:
 5148              	LBE8:
 5149 09d2 8B45D4   		movl	-44(%ebp), %eax
 5150 09d5 8B5DFC   		movl	-4(%ebp), %ebx
 5151 09d8 C9       		leave
 5152 09d9 C3       		ret
 5162              	Lscope6:
 5168 09da 8DB60000 		.align 32
 5168      0000
 5169              	LC7:
 5170 09e0 436C6F73 		.ascii "Close hWait handle: 0x%x, thread ID = %d\0"
 5170      65206857 
 5170      61697420 
 5170      68616E64 
 5170      6C653A20 
 5171 0a09 90909090 		.align 32
 5171      90909090 
 5171      90909090 
 5171      90909090 
 5171      90909090 
 5172              	LC8:
 5173 0a20 43616E6E 		.ascii "Cannnot close hWait handle, error = 0x%x\0"
 5173      6E6F7420 
 5173      636C6F73 
 5173      65206857 
 5173      61697420 
 5174 0a49 90909090 		.align 32
 5174      90909090 
 5174      90909090 
 5174      90909090 
 5174      90909090 
 5175              	LC9:
 5176 0a60 436C6F73 		.ascii "Close hThread handle: 0x%x, thread ID = %d\0"
 5176      65206854 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 31


 5176      68726561 
 5176      64206861 
 5176      6E646C65 
 5177 0a8b 90909090 		.align 32
 5177      90909090 
 5177      90909090 
 5177      90909090 
 5177      90909090 
 5178              	LC10:
 5179 0aa0 43616E6E 		.ascii "Cannnot close hThread handle, error = 0x%x\0"
 5179      6E6F7420 
 5179      636C6F73 
 5179      65206854 
 5179      68726561 
 5180 0acb 90       		.align 2
 5183              	.globl __ZN10ThreadPool7DestroyEv
 5185              	__ZN10ThreadPool7DestroyEv:
  69:../../MMI/Resource/ThreadPool.cpp **** 
  70:../../MMI/Resource/ThreadPool.cpp **** void ThreadPool::Destroy()
  71:../../MMI/Resource/ThreadPool.cpp **** {
 5187              	LM59:
 5188 0acc 55       		pushl	%ebp
 5189 0acd 89E5     		movl	%esp, %ebp
 5190 0acf 53       		pushl	%ebx
 5191 0ad0 83EC74   		subl	$116, %esp
  72:../../MMI/Resource/ThreadPool.cpp ****     // Never created?
  73:../../MMI/Resource/ThreadPool.cpp ****     if (!m_hNotifyShutdown)
 5193              	LM60:
 5194              	LBB12:
 5195 0ad3 8B4508   		movl	8(%ebp), %eax
 5196 0ad6 83781800 		cmpl	$0, 24(%eax)
 5197 0ada 7505     		jne	L100
  74:../../MMI/Resource/ThreadPool.cpp ****         return;
 5199              	LM61:
 5200 0adc E99B0200 		jmp	L99
 5200      00
 5201              	L100:
  75:../../MMI/Resource/ThreadPool.cpp **** 
  76:../../MMI/Resource/ThreadPool.cpp ****     // tell all threads to shutdown.
  77:../../MMI/Resource/ThreadPool.cpp ****     SetEvent(m_hNotifyShutdown);
 5203              	LM62:
 5204 0ae1 8B4508   		movl	8(%ebp), %eax
 5205 0ae4 8B4018   		movl	24(%eax), %eax
 5206 0ae7 890424   		movl	%eax, (%esp)
 5207 0aea E8000000 		call	_SetEvent@4
 5207      00
 5208 0aef 83EC04   		subl	$4, %esp
  78:../../MMI/Resource/ThreadPool.cpp ****     int timElapsed = 0;
 5210              	LM63:
 5211 0af2 C745F400 		movl	$0, -12(%ebp)
 5211      000000
  79:../../MMI/Resource/ThreadPool.cpp ****     while (GetWorkingThreadCount() > 0 && timElapsed < m_nWaitForThreadsToDieMS)
 5213              	LM64:
 5214              	L101:
 5215 0af9 8B4508   		movl	8(%ebp), %eax
 5216 0afc 890424   		movl	%eax, (%esp)
 5217 0aff E87E0200 		call	__ZN10ThreadPool21GetWorkingThreadCountEv
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 32


 5217      00
 5218 0b04 85C0     		testl	%eax, %eax
 5219 0b06 7E24     		jle	L102
 5220 0b08 8B5508   		movl	8(%ebp), %edx
 5221 0b0b 8B45F4   		movl	-12(%ebp), %eax
 5222 0b0e 3B4214   		cmpl	20(%edx), %eax
 5223 0b11 7C02     		jl	L103
 5224 0b13 EB17     		jmp	L102
 5225              	L103:
  80:../../MMI/Resource/ThreadPool.cpp ****     {
  81:../../MMI/Resource/ThreadPool.cpp ****         Sleep(100); // give the threads a chance to complete
 5227              	LM65:
 5228 0b15 C7042464 		movl	$100, (%esp)
 5228      000000
 5229 0b1c E8000000 		call	_Sleep@4
 5229      00
 5230 0b21 83EC04   		subl	$4, %esp
  82:../../MMI/Resource/ThreadPool.cpp ****         timElapsed += 100;
 5232              	LM66:
 5233 0b24 8D45F4   		leal	-12(%ebp), %eax
 5234 0b27 830064   		addl	$100, (%eax)
 5235 0b2a EBCD     		jmp	L101
 5236              	L102:
  83:../../MMI/Resource/ThreadPool.cpp ****     }
  84:../../MMI/Resource/ThreadPool.cpp **** 
  85:../../MMI/Resource/ThreadPool.cpp ****     // walk through the events and threads and close them all
  86:../../MMI/Resource/ThreadPool.cpp ****     for (ThreadList::iterator iter = m_threads.begin(); iter != m_threads.end(); ++iter)
 5238              	LM67:
 5239 0b2c 8B4508   		movl	8(%ebp), %eax
 5240              	LBB13:
 5241 0b2f 83C008   		addl	$8, %eax
 5242 0b32 890424   		movl	%eax, (%esp)
 5243 0b35 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 5243      00
 5244 0b3a 8945F0   		movl	%eax, -16(%ebp)
 5245              	L105:
 5246 0b3d 8B4508   		movl	8(%ebp), %eax
 5247 0b40 83C008   		addl	$8, %eax
 5248 0b43 890424   		movl	%eax, (%esp)
 5249 0b46 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 5249      00
 5250 0b4b 8945EC   		movl	%eax, -20(%ebp)
 5251 0b4e 8D45EC   		leal	-20(%ebp), %eax
 5252 0b51 89442404 		movl	%eax, 4(%esp)
 5253 0b55 8D45F0   		leal	-16(%ebp), %eax
 5254 0b58 890424   		movl	%eax, (%esp)
 5255 0b5b E8000000 		call	__ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorI
 5255      00
 5256 0b60 84C0     		testb	%al, %al
 5257 0b62 7505     		jne	L108
 5258 0b64 E91A0100 		jmp	L106
 5258      00
 5259              	L108:
  87:../../MMI/Resource/ThreadPool.cpp ****     {
  88:../../MMI/Resource/ThreadPool.cpp ****         THREADP_LOG_D("Close hWait handle: 0x%x, thread ID = %d", iter->hWait, iter->dwThreadId);
 5261              	LM68:
 5262 0b69 8D45F0   		leal	-16(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 33


 5263 0b6c 890424   		movl	%eax, (%esp)
 5264 0b6f E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5264      00
 5265 0b74 89C3     		movl	%eax, %ebx
 5266 0b76 8D45F0   		leal	-16(%ebp), %eax
 5267 0b79 890424   		movl	%eax, (%esp)
 5268 0b7c E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5268      00
 5269 0b81 89C2     		movl	%eax, %edx
 5270 0b83 8B4308   		movl	8(%ebx), %eax
 5271 0b86 89442410 		movl	%eax, 16(%esp)
 5272 0b8a 8B02     		movl	(%edx), %eax
 5273 0b8c 8944240C 		movl	%eax, 12(%esp)
 5274 0b90 C7442408 		movl	$LC7, 8(%esp)
 5274      E0090000 
 5275 0b98 C7442404 		movl	$LC5, 4(%esp)
 5275      F2070000 
 5276 0ba0 C7042400 		movl	$0, (%esp)
 5276      000000
 5277 0ba7 E8000000 		call	_reslog_adaptor_log
 5277      00
  89:../../MMI/Resource/ThreadPool.cpp ****         if(CloseHandle(iter->hWait)== 0){
 5279              	LM69:
 5280 0bac 8D45F0   		leal	-16(%ebp), %eax
 5281 0baf 890424   		movl	%eax, (%esp)
 5282 0bb2 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5282      00
 5283 0bb7 8B00     		movl	(%eax), %eax
 5284 0bb9 890424   		movl	%eax, (%esp)
 5285 0bbc E8000000 		call	_CloseHandle@4
 5285      00
 5286 0bc1 83EC04   		subl	$4, %esp
 5287 0bc4 85C0     		testl	%eax, %eax
 5288 0bc6 7525     		jne	L109
  90:../../MMI/Resource/ThreadPool.cpp ****             THREADP_LOG_E("Cannnot close hWait handle, error = 0x%x", GetLastError());
 5290              	LM70:
 5291 0bc8 E8000000 		call	_GetLastError@0
 5291      00
 5292 0bcd 8944240C 		movl	%eax, 12(%esp)
 5293 0bd1 C7442408 		movl	$LC8, 8(%esp)
 5293      200A0000 
 5294 0bd9 C7442404 		movl	$LC5, 4(%esp)
 5294      F2070000 
 5295 0be1 C7042403 		movl	$3, (%esp)
 5295      000000
 5296 0be8 E8000000 		call	_reslog_adaptor_log
 5296      00
 5297              	L109:
  91:../../MMI/Resource/ThreadPool.cpp ****         }
  92:../../MMI/Resource/ThreadPool.cpp **** 
  93:../../MMI/Resource/ThreadPool.cpp ****         THREADP_LOG_D("Close hThread handle: 0x%x, thread ID = %d", iter->hThread, iter->dwThreadId
 5299              	LM71:
 5300 0bed 8D45F0   		leal	-16(%ebp), %eax
 5301 0bf0 890424   		movl	%eax, (%esp)
 5302 0bf3 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5302      00
 5303 0bf8 89C3     		movl	%eax, %ebx
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 34


 5304 0bfa 8D45F0   		leal	-16(%ebp), %eax
 5305 0bfd 890424   		movl	%eax, (%esp)
 5306 0c00 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5306      00
 5307 0c05 89C2     		movl	%eax, %edx
 5308 0c07 8B4308   		movl	8(%ebx), %eax
 5309 0c0a 89442410 		movl	%eax, 16(%esp)
 5310 0c0e 8B4204   		movl	4(%edx), %eax
 5311 0c11 8944240C 		movl	%eax, 12(%esp)
 5312 0c15 C7442408 		movl	$LC9, 8(%esp)
 5312      600A0000 
 5313 0c1d C7442404 		movl	$LC5, 4(%esp)
 5313      F2070000 
 5314 0c25 C7042400 		movl	$0, (%esp)
 5314      000000
 5315 0c2c E8000000 		call	_reslog_adaptor_log
 5315      00
  94:../../MMI/Resource/ThreadPool.cpp ****         if(CloseHandle(iter->hThread)==0){
 5317              	LM72:
 5318 0c31 8D45F0   		leal	-16(%ebp), %eax
 5319 0c34 890424   		movl	%eax, (%esp)
 5320 0c37 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5320      00
 5321 0c3c 8B4004   		movl	4(%eax), %eax
 5322 0c3f 890424   		movl	%eax, (%esp)
 5323 0c42 E8000000 		call	_CloseHandle@4
 5323      00
 5324 0c47 83EC04   		subl	$4, %esp
 5325 0c4a 85C0     		testl	%eax, %eax
 5326 0c4c 7525     		jne	L107
  95:../../MMI/Resource/ThreadPool.cpp ****             THREADP_LOG_E("Cannnot close hThread handle, error = 0x%x", GetLastError());
 5328              	LM73:
 5329 0c4e E8000000 		call	_GetLastError@0
 5329      00
 5330 0c53 8944240C 		movl	%eax, 12(%esp)
 5331 0c57 C7442408 		movl	$LC10, 8(%esp)
 5331      A00A0000 
 5332 0c5f C7442404 		movl	$LC5, 4(%esp)
 5332      F2070000 
 5333 0c67 C7042403 		movl	$3, (%esp)
 5333      000000
 5334 0c6e E8000000 		call	_reslog_adaptor_log
 5334      00
 5336              	LM74:
 5337              	L107:
 5338 0c73 8D45F0   		leal	-16(%ebp), %eax
 5339 0c76 890424   		movl	%eax, (%esp)
 5340 0c79 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 5340      00
 5341 0c7e E9BAFEFF 		jmp	L105
 5341      FF
 5342              	L106:
  96:../../MMI/Resource/ThreadPool.cpp ****         }
  97:../../MMI/Resource/ThreadPool.cpp ****     }
  98:../../MMI/Resource/ThreadPool.cpp **** 
  99:../../MMI/Resource/ThreadPool.cpp ****     // close the shutdown event
 100:../../MMI/Resource/ThreadPool.cpp ****     CloseHandle(m_hNotifyShutdown);
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 35


 5344              	LM75:
 5345              	LBE13:
 5346 0c83 8B4508   		movl	8(%ebp), %eax
 5347 0c86 8B4018   		movl	24(%eax), %eax
 5348 0c89 890424   		movl	%eax, (%esp)
 5349 0c8c E8000000 		call	_CloseHandle@4
 5349      00
 5350 0c91 83EC04   		subl	$4, %esp
 101:../../MMI/Resource/ThreadPool.cpp ****     m_hNotifyShutdown = NULL;
 5352              	LM76:
 5353 0c94 8B4508   		movl	8(%ebp), %eax
 5354 0c97 C7401800 		movl	$0, 24(%eax)
 5354      000000
 102:../../MMI/Resource/ThreadPool.cpp **** 
 103:../../MMI/Resource/ThreadPool.cpp ****     // free any jobs not released
 104:../../MMI/Resource/ThreadPool.cpp ****     for (JobList::iterator funcIter = m_jobList.begin();
 5356              	LM77:
 5357              	LBB14:
 5358 0c9e 8D55D8   		leal	-40(%ebp), %edx
 5359 0ca1 8B4508   		movl	8(%ebp), %eax
 5360 0ca4 83C004   		addl	$4, %eax
 5361 0ca7 89442404 		movl	%eax, 4(%esp)
 5362 0cab 891424   		movl	%edx, (%esp)
 5363 0cae E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv
 5363      00
 5364 0cb3 83EC04   		subl	$4, %esp
 5365              	L111:
 5366 0cb6 8D55C8   		leal	-56(%ebp), %edx
 5367 0cb9 8B4508   		movl	8(%ebp), %eax
 5368 0cbc 83C004   		addl	$4, %eax
 5369 0cbf 89442404 		movl	%eax, 4(%esp)
 5370 0cc3 891424   		movl	%edx, (%esp)
 5371 0cc6 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv
 5371      00
 5372 0ccb 83EC04   		subl	$4, %esp
 5373 0cce 8D45C8   		leal	-56(%ebp), %eax
 5374 0cd1 89442404 		movl	%eax, 4(%esp)
 5375 0cd5 8D45D8   		leal	-40(%ebp), %eax
 5376 0cd8 890424   		movl	%eax, (%esp)
 5377 0cdb E8000000 		call	__ZNKSt19_List_iterator_baseneERKS_
 5377      00
 5378 0ce0 84C0     		testb	%al, %al
 5379 0ce2 7502     		jne	L114
 5380 0ce4 EB7A     		jmp	L112
 5381              	L114:
 105:../../MMI/Resource/ThreadPool.cpp ****         funcIter != m_jobList.end(); funcIter++)
 106:../../MMI/Resource/ThreadPool.cpp ****         if (funcIter->runObject && funcIter->runObject->AutoDelete())
 5383              	LM78:
 5384 0ce6 8D45D8   		leal	-40(%ebp), %eax
 5385 0ce9 890424   		movl	%eax, (%esp)
 5386 0cec E8000000 		call	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
 5386      00
 5387 0cf1 83780800 		cmpl	$0, 8(%eax)
 5388 0cf5 7447     		je	L113
 5389 0cf7 8D45D8   		leal	-40(%ebp), %eax
 5390 0cfa 890424   		movl	%eax, (%esp)
 5391 0cfd E8000000 		call	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 36


 5391      00
 5392 0d02 8B4008   		movl	8(%eax), %eax
 5393 0d05 8B10     		movl	(%eax), %edx
 5394 0d07 83C20C   		addl	$12, %edx
 5395 0d0a 890424   		movl	%eax, (%esp)
 5396 0d0d 8B02     		movl	(%edx), %eax
 5397 0d0f FFD0     		call	*%eax
 5398 0d11 84C0     		testb	%al, %al
 5399 0d13 7429     		je	L113
 107:../../MMI/Resource/ThreadPool.cpp ****             delete funcIter->runObject;
 5401              	LM79:
 5402 0d15 8D45D8   		leal	-40(%ebp), %eax
 5403 0d18 890424   		movl	%eax, (%esp)
 5404 0d1b E8000000 		call	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
 5404      00
 5405 0d20 8B4008   		movl	8(%eax), %eax
 5406 0d23 8945B4   		movl	%eax, -76(%ebp)
 5407 0d26 837DB400 		cmpl	$0, -76(%ebp)
 5408 0d2a 7412     		je	L113
 5409 0d2c 8B55B4   		movl	-76(%ebp), %edx
 5410 0d2f 8B02     		movl	(%edx), %eax
 5411 0d31 83C004   		addl	$4, %eax
 5412 0d34 8B55B4   		movl	-76(%ebp), %edx
 5413 0d37 891424   		movl	%edx, (%esp)
 5414 0d3a 8B00     		movl	(%eax), %eax
 5415 0d3c FFD0     		call	*%eax
 5417              	LM80:
 5418              	L113:
 5419 0d3e 8D55B8   		leal	-72(%ebp), %edx
 5420 0d41 C7442408 		movl	$0, 8(%esp)
 5420      00000000 
 5421 0d49 8D45D8   		leal	-40(%ebp), %eax
 5422 0d4c 89442404 		movl	%eax, 4(%esp)
 5423 0d50 891424   		movl	%edx, (%esp)
 5424 0d53 E8000000 		call	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EppEi
 5424      00
 5425 0d58 83EC04   		subl	$4, %esp
 5426 0d5b E956FFFF 		jmp	L111
 5426      FF
 5427              	L112:
 108:../../MMI/Resource/ThreadPool.cpp **** 
 109:../../MMI/Resource/ThreadPool.cpp ****     // empty all collections
 110:../../MMI/Resource/ThreadPool.cpp ****     m_jobList.clear();
 5429              	LM81:
 5430 0d60 8B4508   		movl	8(%ebp), %eax
 5431              	LBE14:
 5432 0d63 83C004   		addl	$4, %eax
 5433 0d66 890424   		movl	%eax, (%esp)
 5434 0d69 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5clearEv
 5434      00
 111:../../MMI/Resource/ThreadPool.cpp ****     m_threads.clear();
 5436              	LM82:
 5437 0d6e 8B4508   		movl	8(%ebp), %eax
 5438 0d71 83C008   		addl	$8, %eax
 5439 0d74 890424   		movl	%eax, (%esp)
 5440 0d77 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5clearEv
 5440      00
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 37


 112:../../MMI/Resource/ThreadPool.cpp **** }
 5442              	LM83:
 5443              	L99:
 5444 0d7c 8B5DFC   		movl	-4(%ebp), %ebx
 5445 0d7f C9       		leave
 5446 0d80 C3       		ret
 5447              	LBE12:
 5457              	Lscope7:
 5459 0d81 90       		.align 2
 5462              	.globl __ZN10ThreadPool21GetWorkingThreadCountEv
 5464              	__ZN10ThreadPool21GetWorkingThreadCountEv:
 113:../../MMI/Resource/ThreadPool.cpp **** 
 114:../../MMI/Resource/ThreadPool.cpp **** int ThreadPool::GetWorkingThreadCount()
 115:../../MMI/Resource/ThreadPool.cpp **** {
 5466              	LM84:
 5467 0d82 55       		pushl	%ebp
 5468 0d83 89E5     		movl	%esp, %ebp
 5469 0d85 83EC18   		subl	$24, %esp
 116:../../MMI/Resource/ThreadPool.cpp ****     int nCount = 0;
 5471              	LM85:
 5472              	LBB15:
 5473 0d88 C745FC00 		movl	$0, -4(%ebp)
 5473      000000
 117:../../MMI/Resource/ThreadPool.cpp ****     EnterCriticalSection(&m_cs);
 5475              	LM86:
 5476 0d8f 8B4508   		movl	8(%ebp), %eax
 5477 0d92 83C01C   		addl	$28, %eax
 5478 0d95 890424   		movl	%eax, (%esp)
 5479 0d98 E8000000 		call	_EnterCriticalSection@4
 5479      00
 5480 0d9d 83EC04   		subl	$4, %esp
 118:../../MMI/Resource/ThreadPool.cpp ****     for (ThreadList::iterator iter = m_threads.begin(); iter != m_threads.end(); ++iter)
 5482              	LM87:
 5483 0da0 8B4508   		movl	8(%ebp), %eax
 5484              	LBB16:
 5485 0da3 83C008   		addl	$8, %eax
 5486 0da6 890424   		movl	%eax, (%esp)
 5487 0da9 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 5487      00
 5488 0dae 8945F8   		movl	%eax, -8(%ebp)
 5489              	L119:
 5490 0db1 8B4508   		movl	8(%ebp), %eax
 5491 0db4 83C008   		addl	$8, %eax
 5492 0db7 890424   		movl	%eax, (%esp)
 5493 0dba E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 5493      00
 5494 0dbf 8945F4   		movl	%eax, -12(%ebp)
 5495 0dc2 8D45F4   		leal	-12(%ebp), %eax
 5496 0dc5 89442404 		movl	%eax, 4(%esp)
 5497 0dc9 8D45F8   		leal	-8(%ebp), %eax
 5498 0dcc 890424   		movl	%eax, (%esp)
 5499 0dcf E8000000 		call	__ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorI
 5499      00
 5500 0dd4 84C0     		testb	%al, %al
 5501 0dd6 7502     		jne	L122
 5502 0dd8 EB36     		jmp	L120
 5503              	L122:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 38


 119:../../MMI/Resource/ThreadPool.cpp ****         if (WaitForSingleObject(iter->hWait, 0) == WAIT_OBJECT_0)
 5505              	LM88:
 5506 0dda 8D45F8   		leal	-8(%ebp), %eax
 5507 0ddd 890424   		movl	%eax, (%esp)
 5508 0de0 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5508      00
 5509 0de5 C7442404 		movl	$0, 4(%esp)
 5509      00000000 
 5510 0ded 8B00     		movl	(%eax), %eax
 5511 0def 890424   		movl	%eax, (%esp)
 5512 0df2 E8000000 		call	_WaitForSingleObject@8
 5512      00
 5513 0df7 83EC08   		subl	$8, %esp
 5514 0dfa 85C0     		testl	%eax, %eax
 5515 0dfc 7505     		jne	L121
 120:../../MMI/Resource/ThreadPool.cpp ****             ++nCount;
 5517              	LM89:
 5518 0dfe 8D45FC   		leal	-4(%ebp), %eax
 5519 0e01 FF00     		incl	(%eax)
 5521              	LM90:
 5522              	L121:
 5523 0e03 8D45F8   		leal	-8(%ebp), %eax
 5524 0e06 890424   		movl	%eax, (%esp)
 5525 0e09 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 5525      00
 5526 0e0e EBA1     		jmp	L119
 5527              	L120:
 121:../../MMI/Resource/ThreadPool.cpp ****     LeaveCriticalSection(&m_cs);
 5529              	LM91:
 5530 0e10 8B4508   		movl	8(%ebp), %eax
 5531              	LBE16:
 5532 0e13 83C01C   		addl	$28, %eax
 5533 0e16 890424   		movl	%eax, (%esp)
 5534 0e19 E8000000 		call	_LeaveCriticalSection@4
 5534      00
 5535 0e1e 83EC04   		subl	$4, %esp
 122:../../MMI/Resource/ThreadPool.cpp ****     return nCount;
 5537              	LM92:
 5538 0e21 8B45FC   		movl	-4(%ebp), %eax
 123:../../MMI/Resource/ThreadPool.cpp **** }
 5540              	LM93:
 5541 0e24 C9       		leave
 5542 0e25 C3       		ret
 5543              	LBE15:
 5550              	Lscope8:
 5552 0e26 90909090 		.align 32
 5552      90909090 
 5552      90909090 
 5552      90909090 
 5552      90909090 
 5553              	LC11:
 5554 0e40 7046756E 		.ascii "pFunc != NULL || runObject != NULL\0"
 5554      6320213D 
 5554      204E554C 
 5554      4C207C7C 
 5554      2072756E 
 5555 0e63 90       		.align 2
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 39


 5562              	.globl __ZN10ThreadPool13AddJobToQueueEPFmPvES0_PNS_10IRunObjectENS_14ThreadPriorityE
 5564              	__ZN10ThreadPool13AddJobToQueueEPFmPvES0_PNS_10IRunObjectENS_14ThreadPriorityE:
 124:../../MMI/Resource/ThreadPool.cpp **** 
 125:../../MMI/Resource/ThreadPool.cpp **** void ThreadPool::AddJobToQueue(
 126:../../MMI/Resource/ThreadPool.cpp ****     LPTHREAD_START_ROUTINE pFunc, LPVOID pData,
 127:../../MMI/Resource/ThreadPool.cpp ****     IRunObject* runObject, ThreadPriority priority)
 128:../../MMI/Resource/ThreadPool.cpp **** {
 5566              	LM94:
 5567 0e64 55       		pushl	%ebp
 5568 0e65 89E5     		movl	%esp, %ebp
 5569 0e67 83EC38   		subl	$56, %esp
 129:../../MMI/Resource/ThreadPool.cpp ****     assert(pFunc != NULL || runObject != NULL);
 5571              	LM95:
 5572              	LBB17:
 5573 0e6a 837D0C00 		cmpl	$0, 12(%ebp)
 5574 0e6e 7522     		jne	L126
 5575 0e70 837D1400 		cmpl	$0, 20(%ebp)
 5576 0e74 751C     		jne	L126
 5577 0e76 C7442408 		movl	$129, 8(%esp)
 5577      81000000 
 5578 0e7e C7442404 		movl	$LC1, 4(%esp)
 5578      60070000 
 5579 0e86 C7042440 		movl	$LC11, (%esp)
 5579      0E0000
 5580 0e8d E8000000 		call	__assert
 5580      00
 5581              	L126:
 130:../../MMI/Resource/ThreadPool.cpp ****     JobData jobData;
 131:../../MMI/Resource/ThreadPool.cpp ****     jobData.lpStartAddress = pFunc;
 5583              	LM96:
 5584 0e92 8B450C   		movl	12(%ebp), %eax
 5585 0e95 8945E8   		movl	%eax, -24(%ebp)
 132:../../MMI/Resource/ThreadPool.cpp ****     jobData.pData = pData;
 5587              	LM97:
 5588 0e98 8B4510   		movl	16(%ebp), %eax
 5589 0e9b 8945EC   		movl	%eax, -20(%ebp)
 133:../../MMI/Resource/ThreadPool.cpp ****     jobData.runObject = runObject;
 5591              	LM98:
 5592 0e9e 8B4514   		movl	20(%ebp), %eax
 5593 0ea1 8945F0   		movl	%eax, -16(%ebp)
 134:../../MMI/Resource/ThreadPool.cpp **** 
 135:../../MMI/Resource/ThreadPool.cpp ****     // add it to the list
 136:../../MMI/Resource/ThreadPool.cpp ****     EnterCriticalSection(&m_cs);
 5595              	LM99:
 5596 0ea4 8B4508   		movl	8(%ebp), %eax
 5597 0ea7 83C01C   		addl	$28, %eax
 5598 0eaa 890424   		movl	%eax, (%esp)
 5599 0ead E8000000 		call	_EnterCriticalSection@4
 5599      00
 5600 0eb2 83EC04   		subl	$4, %esp
 137:../../MMI/Resource/ThreadPool.cpp ****     {
 138:../../MMI/Resource/ThreadPool.cpp ****         if (priority == Low)
 5602              	LM100:
 5603              	LBB18:
 5604 0eb5 837D1801 		cmpl	$1, 24(%ebp)
 5605 0eb9 7517     		jne	L127
 139:../../MMI/Resource/ThreadPool.cpp ****             m_jobList.push_back(jobData);
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 40


 5607              	LM101:
 5608 0ebb 8D45E8   		leal	-24(%ebp), %eax
 5609 0ebe 89442404 		movl	%eax, 4(%esp)
 5610 0ec2 8B4508   		movl	8(%ebp), %eax
 5611 0ec5 83C004   		addl	$4, %eax
 5612 0ec8 890424   		movl	%eax, (%esp)
 5613 0ecb E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9push_backERKS1_
 5613      00
 5614 0ed0 EB15     		jmp	L128
 5615              	L127:
 140:../../MMI/Resource/ThreadPool.cpp ****         else
 141:../../MMI/Resource/ThreadPool.cpp ****             m_jobList.push_front(jobData);
 5617              	LM102:
 5618 0ed2 8D45E8   		leal	-24(%ebp), %eax
 5619 0ed5 89442404 		movl	%eax, 4(%esp)
 5620 0ed9 8B4508   		movl	8(%ebp), %eax
 5621 0edc 83C004   		addl	$4, %eax
 5622 0edf 890424   		movl	%eax, (%esp)
 5623 0ee2 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE10push_frontERKS1_
 5623      00
 5624              	L128:
 142:../../MMI/Resource/ThreadPool.cpp **** 
 143:../../MMI/Resource/ThreadPool.cpp ****         // See if any threads are free
 144:../../MMI/Resource/ThreadPool.cpp ****         for (ThreadList::iterator iter = m_threads.begin(); iter != m_threads.end(); ++iter)
 5626              	LM103:
 5627 0ee7 8B4508   		movl	8(%ebp), %eax
 5628              	LBB19:
 5629 0eea 83C008   		addl	$8, %eax
 5630 0eed 890424   		movl	%eax, (%esp)
 5631 0ef0 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 5631      00
 5632 0ef5 8945E4   		movl	%eax, -28(%ebp)
 5633              	L129:
 5634 0ef8 8B4508   		movl	8(%ebp), %eax
 5635 0efb 83C008   		addl	$8, %eax
 5636 0efe 890424   		movl	%eax, (%esp)
 5637 0f01 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 5637      00
 5638 0f06 8945E0   		movl	%eax, -32(%ebp)
 5639 0f09 8D45E0   		leal	-32(%ebp), %eax
 5640 0f0c 89442404 		movl	%eax, 4(%esp)
 5641 0f10 8D45E4   		leal	-28(%ebp), %eax
 5642 0f13 890424   		movl	%eax, (%esp)
 5643 0f16 E8000000 		call	__ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorI
 5643      00
 5644 0f1b 84C0     		testb	%al, %al
 5645 0f1d 7502     		jne	L132
 5646 0f1f EB4E     		jmp	L130
 5647              	L132:
 145:../../MMI/Resource/ThreadPool.cpp ****         {
 146:../../MMI/Resource/ThreadPool.cpp ****             if (WaitForSingleObject(iter->hWait, 0) == WAIT_TIMEOUT)
 5649              	LM104:
 5650 0f21 8D45E4   		leal	-28(%ebp), %eax
 5651 0f24 890424   		movl	%eax, (%esp)
 5652 0f27 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5652      00
 5653 0f2c C7442404 		movl	$0, 4(%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 41


 5653      00000000 
 5654 0f34 8B00     		movl	(%eax), %eax
 5655 0f36 890424   		movl	%eax, (%esp)
 5656 0f39 E8000000 		call	_WaitForSingleObject@8
 5656      00
 5657 0f3e 83EC08   		subl	$8, %esp
 5658 0f41 3D020100 		cmpl	$258, %eax
 5658      00
 5659 0f46 751A     		jne	L131
 147:../../MMI/Resource/ThreadPool.cpp ****             {
 148:../../MMI/Resource/ThreadPool.cpp ****                 // here is a free thread, wake it up
 149:../../MMI/Resource/ThreadPool.cpp ****                 SetEvent(iter->hWait);
 5661              	LM105:
 5662 0f48 8D45E4   		leal	-28(%ebp), %eax
 5663 0f4b 890424   		movl	%eax, (%esp)
 5664 0f4e E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5664      00
 5665 0f53 8B00     		movl	(%eax), %eax
 5666 0f55 890424   		movl	%eax, (%esp)
 5667 0f58 E8000000 		call	_SetEvent@4
 5667      00
 5668 0f5d 83EC04   		subl	$4, %esp
 150:../../MMI/Resource/ThreadPool.cpp ****                 break;
 5670              	LM106:
 5671 0f60 EB0D     		jmp	L130
 5673              	LM107:
 5674              	L131:
 5675 0f62 8D45E4   		leal	-28(%ebp), %eax
 5676 0f65 890424   		movl	%eax, (%esp)
 5677 0f68 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 5677      00
 5678 0f6d EB89     		jmp	L129
 5679              	L130:
 151:../../MMI/Resource/ThreadPool.cpp ****             }
 152:../../MMI/Resource/ThreadPool.cpp ****         }
 153:../../MMI/Resource/ThreadPool.cpp ****     }
 154:../../MMI/Resource/ThreadPool.cpp ****     LeaveCriticalSection(&m_cs);
 5681              	LM108:
 5682 0f6f 8B4508   		movl	8(%ebp), %eax
 5683              	LBE19:
 5684              	LBE18:
 5685 0f72 83C01C   		addl	$28, %eax
 5686 0f75 890424   		movl	%eax, (%esp)
 5687 0f78 E8000000 		call	_LeaveCriticalSection@4
 5687      00
 5688 0f7d 83EC04   		subl	$4, %esp
 155:../../MMI/Resource/ThreadPool.cpp **** }
 5690              	LM109:
 5691 0f80 C9       		leave
 5692 0f81 C3       		ret
 5693              	LBE17:
 5700              	Lscope9:
 5702              		.align 2
 5706              	.globl __ZN10ThreadPool13GetWaitHandleEm
 5708              	__ZN10ThreadPool13GetWaitHandleEm:
 156:../../MMI/Resource/ThreadPool.cpp **** 
 157:../../MMI/Resource/ThreadPool.cpp **** // Called by the worker thread to get its wake-up event handle
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 42


 158:../../MMI/Resource/ThreadPool.cpp **** HANDLE ThreadPool::GetWaitHandle(DWORD dwThreadId)
 159:../../MMI/Resource/ThreadPool.cpp **** {
 5710              	LM110:
 5711 0f82 55       		pushl	%ebp
 5712 0f83 89E5     		movl	%esp, %ebp
 5713 0f85 83EC18   		subl	$24, %esp
 160:../../MMI/Resource/ThreadPool.cpp ****     HANDLE hWait = NULL;
 5715              	LM111:
 5716              	LBB20:
 5717 0f88 C745FC00 		movl	$0, -4(%ebp)
 5717      000000
 161:../../MMI/Resource/ThreadPool.cpp ****     EnterCriticalSection(&m_cs);
 5719              	LM112:
 5720 0f8f 8B4508   		movl	8(%ebp), %eax
 5721 0f92 83C01C   		addl	$28, %eax
 5722 0f95 890424   		movl	%eax, (%esp)
 5723 0f98 E8000000 		call	_EnterCriticalSection@4
 5723      00
 5724 0f9d 83EC04   		subl	$4, %esp
 162:../../MMI/Resource/ThreadPool.cpp ****     for (ThreadList::iterator iter = m_threads.begin(); !hWait && iter != m_threads.end(); ++iter)
 5726              	LM113:
 5727 0fa0 8B4508   		movl	8(%ebp), %eax
 5728              	LBB21:
 5729 0fa3 83C008   		addl	$8, %eax
 5730 0fa6 890424   		movl	%eax, (%esp)
 5731 0fa9 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 5731      00
 5732 0fae 8945F8   		movl	%eax, -8(%ebp)
 5733              	L135:
 5734 0fb1 837DFC00 		cmpl	$0, -4(%ebp)
 5735 0fb5 7559     		jne	L136
 5736 0fb7 8B4508   		movl	8(%ebp), %eax
 5737 0fba 83C008   		addl	$8, %eax
 5738 0fbd 890424   		movl	%eax, (%esp)
 5739 0fc0 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 5739      00
 5740 0fc5 8945F4   		movl	%eax, -12(%ebp)
 5741 0fc8 8D45F4   		leal	-12(%ebp), %eax
 5742 0fcb 89442404 		movl	%eax, 4(%esp)
 5743 0fcf 8D45F8   		leal	-8(%ebp), %eax
 5744 0fd2 890424   		movl	%eax, (%esp)
 5745 0fd5 E8000000 		call	__ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorI
 5745      00
 5746 0fda 84C0     		testb	%al, %al
 5747 0fdc 7502     		jne	L138
 5748 0fde EB30     		jmp	L136
 5749              	L138:
 163:../../MMI/Resource/ThreadPool.cpp ****         if (iter->dwThreadId == dwThreadId)
 5751              	LM114:
 5752 0fe0 8D45F8   		leal	-8(%ebp), %eax
 5753 0fe3 890424   		movl	%eax, (%esp)
 5754 0fe6 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5754      00
 5755 0feb 8B4008   		movl	8(%eax), %eax
 5756 0fee 3B450C   		cmpl	12(%ebp), %eax
 5757 0ff1 7510     		jne	L137
 164:../../MMI/Resource/ThreadPool.cpp ****             hWait = iter->hWait;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 43


 5759              	LM115:
 5760 0ff3 8D45F8   		leal	-8(%ebp), %eax
 5761 0ff6 890424   		movl	%eax, (%esp)
 5762 0ff9 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 5762      00
 5763 0ffe 8B00     		movl	(%eax), %eax
 5764 1000 8945FC   		movl	%eax, -4(%ebp)
 5766              	LM116:
 5767              	L137:
 5768 1003 8D45F8   		leal	-8(%ebp), %eax
 5769 1006 890424   		movl	%eax, (%esp)
 5770 1009 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 5770      00
 5771 100e EBA1     		jmp	L135
 5772              	L136:
 165:../../MMI/Resource/ThreadPool.cpp ****     LeaveCriticalSection(&m_cs);
 5774              	LM117:
 5775 1010 8B4508   		movl	8(%ebp), %eax
 5776              	LBE21:
 5777 1013 83C01C   		addl	$28, %eax
 5778 1016 890424   		movl	%eax, (%esp)
 5779 1019 E8000000 		call	_LeaveCriticalSection@4
 5779      00
 5780 101e 83EC04   		subl	$4, %esp
 166:../../MMI/Resource/ThreadPool.cpp ****     return hWait;
 5782              	LM118:
 5783 1021 8B45FC   		movl	-4(%ebp), %eax
 167:../../MMI/Resource/ThreadPool.cpp **** }
 5785              	LM119:
 5786 1024 C9       		leave
 5787 1025 C3       		ret
 5788              	LBE20:
 5795              	Lscope10:
 5797              	LC12:
 5798 1026 4E554C4C 		.ascii "NULL != pool\0"
 5798      20213D20 
 5798      706F6F6C 
 5798      00
 5799              	LC13:
 5800 1033 57616974 		.ascii "Wait failed\0"
 5800      20666169 
 5800      6C656400 
 5801 103f 90       		.align 2
 5804              	.globl __ZN10ThreadPool10ThreadProcEPv@4
 5806              	__ZN10ThreadPool10ThreadProcEPv@4:
 168:../../MMI/Resource/ThreadPool.cpp **** 
 169:../../MMI/Resource/ThreadPool.cpp **** // static method:
 170:../../MMI/Resource/ThreadPool.cpp **** // This is the worker thread function which will run
 171:../../MMI/Resource/ThreadPool.cpp **** // continuously till the Thread Pool is deleted.
 172:../../MMI/Resource/ThreadPool.cpp **** UINT __stdcall ThreadPool::ThreadProc(LPVOID pParam)
 173:../../MMI/Resource/ThreadPool.cpp **** {
 5808              	LM120:
 5809 1040 55       		pushl	%ebp
 5810 1041 89E5     		movl	%esp, %ebp
 5811 1043 56       		pushl	%esi
 5812 1044 53       		pushl	%ebx
 5813 1045 83EC70   		subl	$112, %esp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 44


 174:../../MMI/Resource/ThreadPool.cpp ****     ThreadPool* pool = static_cast<ThreadPool*>(pParam);
 5815              	LM121:
 5816              	LBB22:
 5817 1048 8B4508   		movl	8(%ebp), %eax
 5818 104b 8945F4   		movl	%eax, -12(%ebp)
 175:../../MMI/Resource/ThreadPool.cpp ****     assert(NULL != pool);
 5820              	LM122:
 5821 104e 837DF400 		cmpl	$0, -12(%ebp)
 5822 1052 751C     		jne	L143
 5823 1054 C7442408 		movl	$175, 8(%esp)
 5823      AF000000 
 5824 105c C7442404 		movl	$LC1, 4(%esp)
 5824      60070000 
 5825 1064 C7042426 		movl	$LC12, (%esp)
 5825      100000
 5826 106b E8000000 		call	__assert
 5826      00
 5827              	L143:
 176:../../MMI/Resource/ThreadPool.cpp ****     if (pool == NULL)
 5829              	LM123:
 5830 1070 837DF400 		cmpl	$0, -12(%ebp)
 5831 1074 750C     		jne	L144
 177:../../MMI/Resource/ThreadPool.cpp ****         return 1;
 5833              	LM124:
 5834 1076 C745A401 		movl	$1, -92(%ebp)
 5834      000000
 5835 107d E9080200 		jmp	L141
 5835      00
 5836              	L144:
 178:../../MMI/Resource/ThreadPool.cpp **** 
 179:../../MMI/Resource/ThreadPool.cpp ****     DWORD dwThreadId = GetCurrentThreadId();
 5838              	LM125:
 5839 1082 E8000000 		call	_GetCurrentThreadId@0
 5839      00
 5840 1087 8945F0   		movl	%eax, -16(%ebp)
 180:../../MMI/Resource/ThreadPool.cpp ****     HANDLE hWaits[2] = { pool->GetWaitHandle(dwThreadId), pool->m_hNotifyShutdown };
 5842              	LM126:
 5843 108a 8B45F0   		movl	-16(%ebp), %eax
 5844 108d 89442404 		movl	%eax, 4(%esp)
 5845 1091 8B45F4   		movl	-12(%ebp), %eax
 5846 1094 890424   		movl	%eax, (%esp)
 5847 1097 E8E6FEFF 		call	__ZN10ThreadPool13GetWaitHandleEm
 5847      FF
 5848 109c 89C3     		movl	%eax, %ebx
 5849 109e 8B45F4   		movl	-12(%ebp), %eax
 5850 10a1 8B7018   		movl	24(%eax), %esi
 5851 10a4 895DE8   		movl	%ebx, -24(%ebp)
 5852 10a7 8975EC   		movl	%esi, -20(%ebp)
 181:../../MMI/Resource/ThreadPool.cpp ****     bool bContinue = true;
 5854              	LM127:
 5855 10aa C645E701 		movb	$1, -25(%ebp)
 182:../../MMI/Resource/ThreadPool.cpp ****     while (bContinue)
 5857              	LM128:
 5858              	L145:
 5859 10ae 807DE700 		cmpb	$0, -25(%ebp)
 5860 10b2 7505     		jne	L147
 5861 10b4 E9BC0100 		jmp	L146
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 45


 5861      00
 5862              	L147:
 183:../../MMI/Resource/ThreadPool.cpp ****     {
 184:../../MMI/Resource/ThreadPool.cpp ****         DWORD waitResult = WaitForMultipleObjects(2, hWaits, FALSE, INFINITE);
 5864              	LM129:
 5865              	LBB23:
 5866              	LBB24:
 5867 10b9 C744240C 		movl	$-1, 12(%esp)
 5867      FFFFFFFF 
 5868 10c1 C7442408 		movl	$0, 8(%esp)
 5868      00000000 
 5869 10c9 8D45E8   		leal	-24(%ebp), %eax
 5870 10cc 89442404 		movl	%eax, 4(%esp)
 5871 10d0 C7042402 		movl	$2, (%esp)
 5871      000000
 5872 10d7 E8000000 		call	_WaitForMultipleObjects@16
 5872      00
 5873 10dc 83EC10   		subl	$16, %esp
 5874 10df 8945E0   		movl	%eax, -32(%ebp)
 185:../../MMI/Resource/ThreadPool.cpp ****         if (waitResult == WAIT_FAILED)
 5876              	LM130:
 5877 10e2 837DE0FF 		cmpl	$-1, -32(%ebp)
 5878 10e6 752A     		jne	L148
 186:../../MMI/Resource/ThreadPool.cpp ****             throw "Wait failed";
 5880              	LM131:
 5881 10e8 C7042404 		movl	$4, (%esp)
 5881      000000
 5882 10ef E8000000 		call	___cxa_allocate_exception
 5882      00
 5883 10f4 C7003310 		movl	$LC13, (%eax)
 5883      0000
 5884              	L149:
 5885 10fa C7442408 		movl	$0, 8(%esp)
 5885      00000000 
 5886 1102 C7442404 		movl	$__ZTIPKc, 4(%esp)
 5886      00000000 
 5887 110a 890424   		movl	%eax, (%esp)
 5888 110d E8000000 		call	___cxa_throw
 5888      00
 5889              	L148:
 187:../../MMI/Resource/ThreadPool.cpp ****         if (waitResult == WAIT_OBJECT_0 || waitResult == WAIT_OBJECT_0 + 1)
 5891              	LM132:
 5892              	LBB25:
 5893 1112 837DE000 		cmpl	$0, -32(%ebp)
 5894 1116 7408     		je	L152
 5895 1118 837DE001 		cmpl	$1, -32(%ebp)
 5896 111c 7402     		je	L152
 5897 111e EB8E     		jmp	L145
 5898              	L152:
 188:../../MMI/Resource/ThreadPool.cpp ****         {
 189:../../MMI/Resource/ThreadPool.cpp ****             // Shutting down?
 190:../../MMI/Resource/ThreadPool.cpp ****             if (pool->CheckThreadStop())
 5900              	LM133:
 5901              	LBB26:
 5902 1120 8B45F4   		movl	-12(%ebp), %eax
 5903 1123 890424   		movl	%eax, (%esp)
 5904 1126 E8000000 		call	__ZN10ThreadPool15CheckThreadStopEv
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 46


 5904      00
 5905 112b 84C0     		testb	%al, %al
 5906 112d 7405     		je	L153
 191:../../MMI/Resource/ThreadPool.cpp ****                 break;
 5908              	LM134:
 5909 112f E9410100 		jmp	L146
 5909      00
 5910              	L153:
 192:../../MMI/Resource/ThreadPool.cpp **** 
 193:../../MMI/Resource/ThreadPool.cpp ****             // We have been woken up.  Get the next available job
 194:../../MMI/Resource/ThreadPool.cpp ****             EnterCriticalSection(&pool->m_cs);
 5912              	LM135:
 5913 1134 8B45F4   		movl	-12(%ebp), %eax
 5914 1137 83C01C   		addl	$28, %eax
 5915 113a 890424   		movl	%eax, (%esp)
 5916 113d E8000000 		call	_EnterCriticalSection@4
 5916      00
 5917 1142 83EC04   		subl	$4, %esp
 195:../../MMI/Resource/ThreadPool.cpp ****             JobList::iterator iter = pool->m_jobList.begin();
 5919              	LM136:
 5920 1145 8D55C8   		leal	-56(%ebp), %edx
 5921 1148 8B45F4   		movl	-12(%ebp), %eax
 5922 114b 83C004   		addl	$4, %eax
 5923 114e 89442404 		movl	%eax, 4(%esp)
 5924 1152 891424   		movl	%edx, (%esp)
 5925 1155 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv
 5925      00
 5926 115a 83EC04   		subl	$4, %esp
 196:../../MMI/Resource/ThreadPool.cpp ****             if (iter == pool->m_jobList.end())
 5928              	LM137:
 5929              	LBB27:
 5930 115d 8D55B8   		leal	-72(%ebp), %edx
 5931 1160 8B45F4   		movl	-12(%ebp), %eax
 5932 1163 83C004   		addl	$4, %eax
 5933 1166 89442404 		movl	%eax, 4(%esp)
 5934 116a 891424   		movl	%edx, (%esp)
 5935 116d E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv
 5935      00
 5936 1172 83EC04   		subl	$4, %esp
 5937 1175 8D45B8   		leal	-72(%ebp), %eax
 5938 1178 89442404 		movl	%eax, 4(%esp)
 5939 117c 8D45C8   		leal	-56(%ebp), %eax
 5940 117f 890424   		movl	%eax, (%esp)
 5941 1182 E8000000 		call	__ZNKSt19_List_iterator_baseeqERKS_
 5941      00
 5942 1187 84C0     		testb	%al, %al
 5943 1189 7424     		je	L154
 197:../../MMI/Resource/ThreadPool.cpp ****             {
 198:../../MMI/Resource/ThreadPool.cpp ****                 // No job available, go back to sleep
 199:../../MMI/Resource/ThreadPool.cpp ****                 ResetEvent(hWaits[0]);
 5945              	LM138:
 5946 118b 8B45E8   		movl	-24(%ebp), %eax
 5947 118e 890424   		movl	%eax, (%esp)
 5948 1191 E8000000 		call	_ResetEvent@4
 5948      00
 5949 1196 83EC04   		subl	$4, %esp
 200:../../MMI/Resource/ThreadPool.cpp ****                 LeaveCriticalSection(&pool->m_cs);
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 47


 5951              	LM139:
 5952 1199 8B45F4   		movl	-12(%ebp), %eax
 5953 119c 83C01C   		addl	$28, %eax
 5954 119f 890424   		movl	%eax, (%esp)
 5955 11a2 E8000000 		call	_LeaveCriticalSection@4
 5955      00
 5956 11a7 83EC04   		subl	$4, %esp
 201:../../MMI/Resource/ThreadPool.cpp ****                 continue;
 5958              	LM140:
 5959 11aa E9FFFEFF 		jmp	L145
 5959      FF
 5960              	L154:
 202:../../MMI/Resource/ThreadPool.cpp ****             }
 203:../../MMI/Resource/ThreadPool.cpp ****             else
 204:../../MMI/Resource/ThreadPool.cpp ****             {
 205:../../MMI/Resource/ThreadPool.cpp ****                 // Get the job and remove it from the queue
 206:../../MMI/Resource/ThreadPool.cpp ****                 LPTHREAD_START_ROUTINE proc = iter->lpStartAddress;
 5962              	LM141:
 5963              	LBB28:
 5964 11af 8D45C8   		leal	-56(%ebp), %eax
 5965 11b2 890424   		movl	%eax, (%esp)
 5966 11b5 E8000000 		call	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
 5966      00
 5967 11ba 8B00     		movl	(%eax), %eax
 5968 11bc 8945B4   		movl	%eax, -76(%ebp)
 207:../../MMI/Resource/ThreadPool.cpp ****                 LPVOID data = iter->pData;
 5970              	LM142:
 5971 11bf 8D45C8   		leal	-56(%ebp), %eax
 5972 11c2 890424   		movl	%eax, (%esp)
 5973 11c5 E8000000 		call	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
 5973      00
 5974 11ca 8B4004   		movl	4(%eax), %eax
 5975 11cd 8945B0   		movl	%eax, -80(%ebp)
 208:../../MMI/Resource/ThreadPool.cpp ****                 IRunObject* runObject = iter->runObject;
 5977              	LM143:
 5978 11d0 8D45C8   		leal	-56(%ebp), %eax
 5979 11d3 890424   		movl	%eax, (%esp)
 5980 11d6 E8000000 		call	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
 5980      00
 5981 11db 8B4008   		movl	8(%eax), %eax
 5982 11de 8945AC   		movl	%eax, -84(%ebp)
 209:../../MMI/Resource/ThreadPool.cpp ****                 pool->m_jobList.pop_front();
 5984              	LM144:
 5985 11e1 8B45F4   		movl	-12(%ebp), %eax
 5986 11e4 83C004   		addl	$4, %eax
 5987 11e7 890424   		movl	%eax, (%esp)
 5988 11ea E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9pop_frontEv
 5988      00
 210:../../MMI/Resource/ThreadPool.cpp ****                 LeaveCriticalSection(&pool->m_cs);
 5990              	LM145:
 5991 11ef 8B45F4   		movl	-12(%ebp), %eax
 5992 11f2 83C01C   		addl	$28, %eax
 5993 11f5 890424   		movl	%eax, (%esp)
 5994 11f8 E8000000 		call	_LeaveCriticalSection@4
 5994      00
 5995 11fd 83EC04   		subl	$4, %esp
 211:../../MMI/Resource/ThreadPool.cpp **** 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 48


 212:../../MMI/Resource/ThreadPool.cpp ****                 // Run the job
 213:../../MMI/Resource/ThreadPool.cpp ****                 if (proc)
 5997              	LM146:
 5998              	LBB29:
 5999 1200 837DB400 		cmpl	$0, -76(%ebp)
 6000 1204 7413     		je	L156
 214:../../MMI/Resource/ThreadPool.cpp ****                     proc(data);
 6002              	LM147:
 6003 1206 8B45B0   		movl	-80(%ebp), %eax
 6004 1209 890424   		movl	%eax, (%esp)
 6005 120c 8B45B4   		movl	-76(%ebp), %eax
 6006 120f FFD0     		call	*%eax
 6007 1211 83EC04   		subl	$4, %esp
 6008 1214 E995FEFF 		jmp	L145
 6008      FF
 6009              	L156:
 215:../../MMI/Resource/ThreadPool.cpp ****                 else if (runObject)
 6011              	LM148:
 6012              	LBB30:
 6013              	LBB31:
 6014 1219 837DAC00 		cmpl	$0, -84(%ebp)
 6015 121d 0F848BFE 		je	L145
 6015      FFFF
 216:../../MMI/Resource/ThreadPool.cpp ****                 {
 217:../../MMI/Resource/ThreadPool.cpp ****                     bool autoDelete = runObject->AutoDelete();
 6017              	LM149:
 6018              	LBB32:
 6019 1223 8B45AC   		movl	-84(%ebp), %eax
 6020 1226 8B10     		movl	(%eax), %edx
 6021 1228 83C20C   		addl	$12, %edx
 6022 122b 8B45AC   		movl	-84(%ebp), %eax
 6023 122e 890424   		movl	%eax, (%esp)
 6024 1231 8B02     		movl	(%edx), %eax
 6025 1233 FFD0     		call	*%eax
 6026 1235 8845AB   		movb	%al, -85(%ebp)
 218:../../MMI/Resource/ThreadPool.cpp ****                     runObject->Run(); // may execute "delete this"
 6028              	LM150:
 6029 1238 8B45AC   		movl	-84(%ebp), %eax
 6030 123b 8B10     		movl	(%eax), %edx
 6031 123d 83C208   		addl	$8, %edx
 6032 1240 8B45AC   		movl	-84(%ebp), %eax
 6033 1243 890424   		movl	%eax, (%esp)
 6034 1246 8B02     		movl	(%edx), %eax
 6035 1248 FFD0     		call	*%eax
 219:../../MMI/Resource/ThreadPool.cpp ****                     if (autoDelete)
 6037              	LM151:
 6038 124a 807DAB00 		cmpb	$0, -85(%ebp)
 6039 124e 0F845AFE 		je	L145
 6039      FFFF
 220:../../MMI/Resource/ThreadPool.cpp ****                         delete runObject;
 6041              	LM152:
 6042 1254 837DAC00 		cmpl	$0, -84(%ebp)
 6043 1258 0F8450FE 		je	L145
 6043      FFFF
 6044 125e 8B45AC   		movl	-84(%ebp), %eax
 6045 1261 8B10     		movl	(%eax), %edx
 6046 1263 83C204   		addl	$4, %edx
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 49


 6047 1266 8B45AC   		movl	-84(%ebp), %eax
 6048 1269 890424   		movl	%eax, (%esp)
 6049 126c 8B02     		movl	(%edx), %eax
 6050 126e FFD0     		call	*%eax
 6051 1270 E939FEFF 		jmp	L145
 6051      FF
 6052              	L146:
 221:../../MMI/Resource/ThreadPool.cpp ****                 }
 222:../../MMI/Resource/ThreadPool.cpp ****             }
 223:../../MMI/Resource/ThreadPool.cpp ****         }
 224:../../MMI/Resource/ThreadPool.cpp ****     }
 225:../../MMI/Resource/ThreadPool.cpp ****     // Thread is shutting down
 226:../../MMI/Resource/ThreadPool.cpp ****     ResetEvent(hWaits[0]);
 6054              	LM153:
 6055              	LBE32:
 6056              	LBE31:
 6057              	LBE30:
 6058              	LBE29:
 6059              	LBE28:
 6060              	LBE27:
 6061              	LBE26:
 6062              	LBE25:
 6063              	LBE24:
 6064              	LBE23:
 6065 1275 8B45E8   		movl	-24(%ebp), %eax
 6066 1278 890424   		movl	%eax, (%esp)
 6067 127b E8000000 		call	_ResetEvent@4
 6067      00
 6068 1280 83EC04   		subl	$4, %esp
 227:../../MMI/Resource/ThreadPool.cpp ****     return 0;
 6070              	LM154:
 6071 1283 C745A400 		movl	$0, -92(%ebp)
 6071      000000
 228:../../MMI/Resource/ThreadPool.cpp **** }
 6073              	LM155:
 6074              	L141:
 6075              	LBE22:
 6076 128a 8B45A4   		movl	-92(%ebp), %eax
 6077 128d 8D65F8   		leal	-8(%ebp), %esp
 6078 1290 5B       		popl	%ebx
 6079 1291 5E       		popl	%esi
 6080 1292 5D       		popl	%ebp
 6081 1293 C20400   		ret	$4
 6102              	Lscope11:
 6104              		.section	.text$_ZNSaIN10ThreadPool7JobDataEEC1Ev,"x"
 6105              		.linkonce discard
 6106              		.align 2
 6109              	.globl __ZNSaIN10ThreadPool7JobDataEEC1Ev
 6111              	__ZNSaIN10ThreadPool7JobDataEEC1Ev:
 6113              	Ltext3:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // Allocators -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // terms of the GNU General Public License as published by the
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 50


   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * Copyright (c) 1996-1997
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * Silicon Graphics Computer Systems, Inc.
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * Permission to use, copy, modify, distribute and sell this software
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * and its documentation for any purpose is hereby granted without fee,
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * provided that the above copyright notice appear in all copies and
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * that both that copyright notice and this permission notice appear
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * in supporting documentation.  Silicon Graphics makes no
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * representations about the suitability of this software for any
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  */
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** /** @file stl_alloc.h
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  This is an internal header file, included by other library headers.
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  You should not attempt to use it directly.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  */
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #ifndef __GLIBCPP_INTERNAL_ALLOC_H
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #define __GLIBCPP_INTERNAL_ALLOC_H
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** /**
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  @defgroup Allocators Memory Allocators
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  @if maint
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  stl_alloc.h implements some node allocators.  These are NOT the same as
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  allocators in the C++ standard, nor in the original H-P STL.  They do not
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  encapsulate different pointer types; we assume that there is only one
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  pointer type.  The C++ standard allocators are intended to allocate
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  individual objects, not pools or arenas.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  In this file allocators are of two different styles:  "standard" and
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  "SGI" (quotes included).  "Standard" allocators conform to 20.4.  "SGI"
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  allocators differ in AT LEAST the following ways (add to this list as you
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  discover them):
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 51


  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *   - "Standard" allocate() takes two parameters (n_count,hint=0) but "SGI"
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *     allocate() takes one paramter (n_size).
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *   - Likewise, "standard" deallocate()'s argument is a count, but in "SGI"
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *     is a byte size.
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *   - max_size(), construct(), and destroy() are missing in "SGI" allocators.
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *   - reallocate(p,oldsz,newsz) is added in "SGI", and behaves as
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *     if p=realloc(p,newsz).
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  "SGI" allocators may be wrapped in __allocator to convert the interface
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  into a "standard" one.
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  @endif
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  @note The @c reallocate member functions have been deprecated for 3.2
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *        and will be removed in 3.4.  You must define @c _GLIBCPP_DEPRECATED
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *        to make this visible in 3.2; see c++config.h.
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  The canonical description of these classes is in docs/html/ext/howto.html
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****  *  or online at http://gcc.gnu.org/onlinedocs/libstdc++/ext/howto.html#3
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** */
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #include <cstddef>
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #include <cstdlib>
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #include <cstring>
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #include <bits/functexcept.h>   // For __throw_bad_alloc
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #include <bits/stl_threads.h>
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** #include <bits/atomicity.h>
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** namespace std
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** {
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   /**
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @if maint
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  A new-based allocator, as required by the standard.  Allocation and
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  deallocation forward to global new and delete.  "SGI" style, minus
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  reallocate().
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @endif
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  (See @link Allocators allocators info @endlink for more.)
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    */
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   class __new_alloc
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   {
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   public:
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     static void*
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     allocate(size_t __n)
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     { return ::operator new(__n); }
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     static void
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     deallocate(void* __p, size_t)
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     { ::operator delete(__p); }
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   };
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   /**
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @if maint
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  A malloc-based allocator.  Typically slower than the
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  __default_alloc_template (below).  Typically thread-safe and more
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  storage efficient.  The template argument is unused and is only present
 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  to permit multiple instantiations (but see __default_alloc_template
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 52


 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  for caveats).  "SGI" style, plus __set_malloc_handler for OOM conditions.
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @endif
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  (See @link Allocators allocators info @endlink for more.)
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    */
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<int __inst>
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     class __malloc_alloc_template
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     private:
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void* _S_oom_malloc(size_t);
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void* _S_oom_realloc(void*, size_t);
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void (* __malloc_alloc_oom_handler)();
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     public:
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void*
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       allocate(size_t __n)
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         void* __result = malloc(__n);
 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         if (__builtin_expect(__result == 0, 0))
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  __result = _S_oom_malloc(__n);
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return __result;
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 144:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void
 145:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       deallocate(void* __p, size_t /* __n */)
 146:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       { free(__p); }
 147:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 148:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void*
 149:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       reallocate(void* __p, size_t /* old_sz */, size_t __new_sz)
 150:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 151:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         void* __result = realloc(__p, __new_sz);
 152:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         if (__builtin_expect(__result == 0, 0))
 153:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __result = _S_oom_realloc(__p, __new_sz);
 154:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return __result;
 155:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 156:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 157:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void (* __set_malloc_handler(void (*__f)()))()
 158:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 159:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         void (* __old)() = __malloc_alloc_oom_handler;
 160:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         __malloc_alloc_oom_handler = __f;
 161:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return __old;
 162:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 163:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     };
 164:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 165:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // malloc_alloc out-of-memory handling
 166:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<int __inst>
 167:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;
 168:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 169:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<int __inst>
 170:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     void*
 171:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __malloc_alloc_template<__inst>::
 172:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     _S_oom_malloc(size_t __n)
 173:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 174:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       void (* __my_malloc_handler)();
 175:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       void* __result;
 176:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 177:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       for (;;)
 178:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         {
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 53


 179:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __my_malloc_handler = __malloc_alloc_oom_handler;
 180:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           if (__builtin_expect(__my_malloc_handler == 0, 0))
 181:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             __throw_bad_alloc();
 182:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           (*__my_malloc_handler)();
 183:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __result = malloc(__n);
 184:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           if (__result)
 185:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             return __result;
 186:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         }
 187:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     }
 188:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 189:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<int __inst>
 190:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     void*
 191:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __malloc_alloc_template<__inst>::
 192:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     _S_oom_realloc(void* __p, size_t __n)
 193:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 194:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       void (* __my_malloc_handler)();
 195:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       void* __result;
 196:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 197:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       for (;;)
 198:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         {
 199:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __my_malloc_handler = __malloc_alloc_oom_handler;
 200:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           if (__builtin_expect(__my_malloc_handler == 0, 0))
 201:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             __throw_bad_alloc();
 202:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           (*__my_malloc_handler)();
 203:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __result = realloc(__p, __n);
 204:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           if (__result)
 205:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             return __result;
 206:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         }
 207:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     }
 208:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 209:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // Should not be referenced within the library anymore.
 210:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   typedef __new_alloc                 __mem_interface;
 211:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 212:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   /**
 213:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @if maint
 214:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  This is used primarily (only?) in _Alloc_traits and other places to
 215:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  help provide the _Alloc_type typedef.  All it does is forward the
 216:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  requests after some minimal checking.
 217:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 218:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  This is neither "standard"-conforming nor "SGI".  The _Alloc parameter
 219:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  must be "SGI" style.
 220:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @endif
 221:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  (See @link Allocators allocators info @endlink for more.)
 222:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    */
 223:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<typename _Tp, typename _Alloc>
 224:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     class __simple_alloc
 225:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 226:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     public:
 227:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static _Tp*
 228:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       allocate(size_t __n)
 229:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 230:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	_Tp* __ret = 0;
 231:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	if (__n)
 232:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  __ret = static_cast<_Tp*>(_Alloc::allocate(__n * sizeof(_Tp)));
 233:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	return __ret;
 234:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 235:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 54


 236:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static _Tp*
 237:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       allocate()
 238:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       { return (_Tp*) _Alloc::allocate(sizeof (_Tp)); }
 239:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   
 240:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void
 241:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       deallocate(_Tp* __p, size_t __n)
 242:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       { if (0 != __n) _Alloc::deallocate(__p, __n * sizeof (_Tp)); }
 243:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   
 244:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void
 245:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       deallocate(_Tp* __p)
 246:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       { _Alloc::deallocate(__p, sizeof (_Tp)); }
 247:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     };
 248:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 249:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 250:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   /**
 251:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @if maint
 252:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  An adaptor for an underlying allocator (_Alloc) to check the size
 253:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  arguments for debugging.
 254:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 255:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  "There is some evidence that this can confuse Purify." - SGI comment
 256:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 257:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  This adaptor is "SGI" style.  The _Alloc parameter must also be "SGI".
 258:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @endif
 259:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  (See @link Allocators allocators info @endlink for more.)
 260:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    */
 261:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<typename _Alloc>
 262:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     class __debug_alloc
 263:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 264:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     private:
 265:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // Size of space used to store size.  Note that this must be
 266:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // large enough to preserve alignment.
 267:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       enum {_S_extra = 8};
 268:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 269:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     public:
 270:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void*
 271:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       allocate(size_t __n)
 272:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 273:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         char* __result = (char*)_Alloc::allocate(__n + (int) _S_extra);
 274:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         *(size_t*)__result = __n;
 275:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return __result + (int) _S_extra;
 276:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 277:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 278:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void
 279:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       deallocate(void* __p, size_t __n)
 280:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 281:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         char* __real_p = (char*)__p - (int) _S_extra;
 282:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         if (*(size_t*)__real_p != __n)
 283:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  abort();
 284:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         _Alloc::deallocate(__real_p, __n + (int) _S_extra);
 285:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 286:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 287:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void*
 288:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       reallocate(void* __p, size_t __old_sz, size_t __new_sz)
 289:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 290:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         char* __real_p = (char*)__p - (int) _S_extra;
 291:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         if (*(size_t*)__real_p != __old_sz)
 292:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  abort();
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 55


 293:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         char* __result = (char*) _Alloc::reallocate(__real_p, 
 294:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 						    __old_sz + (int) _S_extra,
 295:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 						    __new_sz + (int) _S_extra);
 296:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         *(size_t*)__result = __new_sz;
 297:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return __result + (int) _S_extra;
 298:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 299:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     };
 300:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 301:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 302:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   /**
 303:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @if maint
 304:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  Default node allocator.  "SGI" style.  Uses various allocators to
 305:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  fulfill underlying requests (and makes as few requests as possible
 306:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  when in default high-speed pool mode).
 307:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 308:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  Important implementation properties:
 309:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  0. If globally mandated, then allocate objects from __new_alloc
 310:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  1. If the clients request an object of size > _MAX_BYTES, the resulting
 311:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *     object will be obtained directly from __new_alloc
 312:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  2. In all other cases, we allocate an object of size exactly
 313:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *     _S_round_up(requested_size).  Thus the client has enough size
 314:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *     information that we can return the object to the proper free list
 315:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *     without permanently losing part of the object.
 316:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 317:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  The first template parameter specifies whether more than one thread may
 318:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  use this allocator.  It is safe to allocate an object from one instance
 319:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  of a default_alloc and deallocate it with another one.  This effectively
 320:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  transfers its ownership to the second one.  This may have undesirable
 321:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  effects on reference locality.
 322:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 323:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  The second parameter is unused and serves only to allow the creation of
 324:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  multiple default_alloc instances.  Note that containers built on different
 325:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  allocator instances have different types, limiting the utility of this
 326:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  approach.  If you do not wish to share the free lists with the main
 327:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  default_alloc instance, instantiate this with a non-zero __inst.
 328:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 329:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @endif
 330:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  (See @link Allocators allocators info @endlink for more.)
 331:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    */
 332:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 333:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     class __default_alloc_template
 334:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 335:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     private:
 336:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       enum {_ALIGN = 8};
 337:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       enum {_MAX_BYTES = 128};
 338:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       enum {_NFREELISTS = _MAX_BYTES / _ALIGN};
 339:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 340:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       union _Obj
 341:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 342:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         union _Obj* _M_free_list_link;
 343:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         char        _M_client_data[1];    // The client sees this.
 344:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       };
 345:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 346:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static _Obj* volatile         _S_free_list[_NFREELISTS];
 347:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 348:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // Chunk allocation state.
 349:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static char*                  _S_start_free;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 56


 350:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static char*                  _S_end_free;
 351:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static size_t                 _S_heap_size;
 352:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 353:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static _STL_mutex_lock        _S_node_allocator_lock;
 354:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 355:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static size_t
 356:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _S_round_up(size_t __bytes)
 357:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       { return (((__bytes) + (size_t) _ALIGN-1) & ~((size_t) _ALIGN - 1)); }
 358:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 359:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static size_t
 360:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _S_freelist_index(size_t __bytes)
 361:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       { return (((__bytes) + (size_t)_ALIGN - 1)/(size_t)_ALIGN - 1); }
 362:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 363:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // Returns an object of size __n, and optionally adds to size __n
 364:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // free list.
 365:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void*
 366:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _S_refill(size_t __n);
 367:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 368:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // Allocates a chunk for nobjs of size size.  nobjs may be reduced
 369:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // if it is inconvenient to allocate the requested number.
 370:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static char*
 371:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _S_chunk_alloc(size_t __size, int& __nobjs);
 372:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 373:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // It would be nice to use _STL_auto_lock here.  But we need a
 374:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // test whether threads are in use.
 375:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       struct _Lock
 376:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 377:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         _Lock() { if (__threads) _S_node_allocator_lock._M_acquire_lock(); }
 378:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         ~_Lock() { if (__threads) _S_node_allocator_lock._M_release_lock(); }
 379:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       } __attribute__ ((__unused__));
 380:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       friend struct _Lock;
 381:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 382:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static _Atomic_word _S_force_new;
 383:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 384:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     public:
 385:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // __n must be > 0
 386:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void*
 387:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       allocate(size_t __n)
 388:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 389:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	void* __ret = 0;
 390:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 391:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	// If there is a race through here, assume answer from getenv
 392:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	// will resolve in same direction.  Inspired by techniques
 393:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	// to efficiently support threading found in basic_string.h.
 394:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	if (_S_force_new == 0)
 395:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  {
 396:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    if (getenv("GLIBCPP_FORCE_NEW"))
 397:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      __atomic_add(&_S_force_new, 1);
 398:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    else
 399:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      __atomic_add(&_S_force_new, -1);
 400:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  }
 401:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 402:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	if ((__n > (size_t) _MAX_BYTES) || (_S_force_new > 0))
 403:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  __ret = __new_alloc::allocate(__n);
 404:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	else
 405:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  {
 406:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    _Obj* volatile* __my_free_list = _S_free_list
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 57


 407:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      + _S_freelist_index(__n);
 408:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    // Acquire the lock here with a constructor call.  This
 409:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    // ensures that it is released in exit or during stack
 410:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    // unwinding.
 411:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    _Lock __lock_instance;
 412:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    _Obj* __restrict__ __result = *__my_free_list;
 413:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    if (__builtin_expect(__result == 0, 0))
 414:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      __ret = _S_refill(_S_round_up(__n));
 415:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    else
 416:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      {
 417:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 		*__my_free_list = __result -> _M_free_list_link;
 418:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 		__ret = __result;
 419:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      }	    
 420:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    if (__builtin_expect(__ret == 0, 0))
 421:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      __throw_bad_alloc();
 422:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  }
 423:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	return __ret;
 424:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 425:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 426:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // __p may not be 0
 427:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void
 428:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       deallocate(void* __p, size_t __n)
 429:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       {
 430:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	if ((__n > (size_t) _MAX_BYTES) || (_S_force_new > 0))
 431:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  __new_alloc::deallocate(__p, __n);
 432:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	else
 433:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  {
 434:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    _Obj* volatile*  __my_free_list = _S_free_list
 435:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      + _S_freelist_index(__n);
 436:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    _Obj* __q = (_Obj*)__p;
 437:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 438:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    // Acquire the lock here with a constructor call.  This
 439:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    // ensures that it is released in exit or during stack
 440:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    // unwinding.
 441:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    _Lock __lock_instance;
 442:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    __q -> _M_free_list_link = *__my_free_list;
 443:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    *__my_free_list = __q;
 444:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  }
 445:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       }
 446:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 447:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       static void*
 448:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       reallocate(void* __p, size_t __old_sz, size_t __new_sz);
 449:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     };
 450:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 451:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst> _Atomic_word
 452:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   __default_alloc_template<__threads, __inst>::_S_force_new = 0;
 453:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 454:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 455:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     inline bool
 456:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     operator==(const __default_alloc_template<__threads,__inst>&,
 457:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                const __default_alloc_template<__threads,__inst>&)
 458:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     { return true; }
 459:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 460:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 461:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     inline bool
 462:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     operator!=(const __default_alloc_template<__threads,__inst>&,
 463:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                const __default_alloc_template<__threads,__inst>&)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 58


 464:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     { return false; }
 465:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 466:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 467:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // We allocate memory in large chunks in order to avoid fragmenting the
 468:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // heap too much.  We assume that __size is properly aligned.  We hold
 469:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // the allocation lock.
 470:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 471:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     char*
 472:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __default_alloc_template<__threads, __inst>::
 473:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     _S_chunk_alloc(size_t __size, int& __nobjs)
 474:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 475:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       char* __result;
 476:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       size_t __total_bytes = __size * __nobjs;
 477:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       size_t __bytes_left = _S_end_free - _S_start_free;
 478:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 479:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       if (__bytes_left >= __total_bytes)
 480:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         {
 481:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __result = _S_start_free;
 482:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           _S_start_free += __total_bytes;
 483:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           return __result ;
 484:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         }
 485:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       else if (__bytes_left >= __size)
 486:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         {
 487:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __nobjs = (int)(__bytes_left/__size);
 488:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __total_bytes = __size * __nobjs;
 489:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __result = _S_start_free;
 490:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           _S_start_free += __total_bytes;
 491:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           return __result;
 492:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         }
 493:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       else
 494:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         {
 495:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           size_t __bytes_to_get =
 496:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             2 * __total_bytes + _S_round_up(_S_heap_size >> 4);
 497:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           // Try to make use of the left-over piece.
 498:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           if (__bytes_left > 0)
 499:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             {
 500:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               _Obj* volatile* __my_free_list =
 501:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                 _S_free_list + _S_freelist_index(__bytes_left);
 502:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 503:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               ((_Obj*)(void*)_S_start_free) -> _M_free_list_link = *__my_free_list;
 504:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               *__my_free_list = (_Obj*)(void*)_S_start_free;
 505:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             }
 506:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           _S_start_free = (char*) __new_alloc::allocate(__bytes_to_get);
 507:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           if (_S_start_free == 0)
 508:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             {
 509:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               size_t __i;
 510:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               _Obj* volatile* __my_free_list;
 511:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               _Obj* __p;
 512:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               // Try to make do with what we have.  That can't hurt.  We
 513:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               // do not try smaller requests, since that tends to result
 514:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               // in disaster on multi-process machines.
 515:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               __i = __size;
 516:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               for (; __i <= (size_t) _MAX_BYTES; __i += (size_t) _ALIGN)
 517:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                 {
 518:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                   __my_free_list = _S_free_list + _S_freelist_index(__i);
 519:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                   __p = *__my_free_list;
 520:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                   if (__p != 0)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 59


 521:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                     {
 522:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                       *__my_free_list = __p -> _M_free_list_link;
 523:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                       _S_start_free = (char*)__p;
 524:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                       _S_end_free = _S_start_free + __i;
 525:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                       return _S_chunk_alloc(__size, __nobjs);
 526:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                       // Any leftover piece will eventually make it to the
 527:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                       // right free list.
 528:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                     }
 529:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****                 }
 530:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               _S_end_free = 0;        // In case of exception.
 531:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               _S_start_free = (char*)__new_alloc::allocate(__bytes_to_get);
 532:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               // This should either throw an exception or remedy the situation.
 533:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****               // Thus we assume it succeeded.
 534:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****             }
 535:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           _S_heap_size += __bytes_to_get;
 536:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           _S_end_free = _S_start_free + __bytes_to_get;
 537:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           return _S_chunk_alloc(__size, __nobjs);
 538:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         }
 539:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     }
 540:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 541:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 542:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // Returns an object of size __n, and optionally adds to "size
 543:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // __n"'s free list.  We assume that __n is properly aligned.  We
 544:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   // hold the allocation lock.
 545:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 546:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     void*
 547:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __default_alloc_template<__threads, __inst>::_S_refill(size_t __n)
 548:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 549:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       int __nobjs = 20;
 550:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       char* __chunk = _S_chunk_alloc(__n, __nobjs);
 551:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _Obj* volatile* __my_free_list;
 552:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _Obj* __result;
 553:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _Obj* __current_obj;
 554:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       _Obj* __next_obj;
 555:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       int __i;
 556:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 557:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       if (1 == __nobjs)
 558:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return __chunk;
 559:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       __my_free_list = _S_free_list + _S_freelist_index(__n);
 560:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 561:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       // Build free list in chunk.
 562:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       __result = (_Obj*)(void*)__chunk;
 563:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       *__my_free_list = __next_obj = (_Obj*)(void*)(__chunk + __n);
 564:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       for (__i = 1; ; __i++)
 565:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         {
 566:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  __current_obj = __next_obj;
 567:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****           __next_obj = (_Obj*)(void*)((char*)__next_obj + __n);
 568:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  if (__nobjs - 1 == __i)
 569:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    {
 570:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      __current_obj -> _M_free_list_link = 0;
 571:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	      break;
 572:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    }
 573:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	  else
 574:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	    __current_obj -> _M_free_list_link = __next_obj;
 575:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 	}
 576:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       return __result;
 577:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     }
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 60


 578:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 579:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 580:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool threads, int inst>
 581:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     void*
 582:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __default_alloc_template<threads, inst>::
 583:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     reallocate(void* __p, size_t __old_sz, size_t __new_sz)
 584:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 585:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       void* __result;
 586:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       size_t __copy_sz;
 587:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 588:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       if (__old_sz > (size_t) _MAX_BYTES && __new_sz > (size_t) _MAX_BYTES)
 589:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return(realloc(__p, __new_sz));
 590:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       if (_S_round_up(__old_sz) == _S_round_up(__new_sz))
 591:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         return(__p);
 592:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       __result = allocate(__new_sz);
 593:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       __copy_sz = __new_sz > __old_sz? __old_sz : __new_sz;
 594:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       memcpy(__result, __p, __copy_sz);
 595:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       deallocate(__p, __old_sz);
 596:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       return __result;
 597:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     }
 598:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 599:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 600:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     _STL_mutex_lock
 601:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __default_alloc_template<__threads,__inst>::_S_node_allocator_lock
 602:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __STL_MUTEX_INITIALIZER;
 603:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 604:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 605:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     char* __default_alloc_template<__threads,__inst>::_S_start_free = 0;
 606:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 607:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 608:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     char* __default_alloc_template<__threads,__inst>::_S_end_free = 0;
 609:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 610:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 611:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     size_t __default_alloc_template<__threads,__inst>::_S_heap_size = 0;
 612:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 613:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<bool __threads, int __inst>
 614:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     typename __default_alloc_template<__threads,__inst>::_Obj* volatile
 615:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     __default_alloc_template<__threads,__inst>::_S_free_list[_NFREELISTS];
 616:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 617:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   typedef __default_alloc_template<true,0>    __alloc;
 618:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   typedef __default_alloc_template<false,0>   __single_client_alloc;
 619:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 620:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 621:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   /**
 622:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  @brief  The "standard" allocator, as per [20.4].
 623:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 624:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  The private _Alloc is "SGI" style.  (See comments at the top
 625:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  of stl_alloc.h.)
 626:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 627:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  The underlying allocator behaves as follows.
 628:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *    - __default_alloc_template is used via two typedefs
 629:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *    - "__single_client_alloc" typedef does no locking for threads
 630:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *    - "__alloc" typedef is threadsafe via the locks
 631:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *    - __new_alloc is used for memory requests
 632:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *
 633:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    *  (See @link Allocators allocators info @endlink for more.)
 634:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****    */
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 61


 635:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****   template<typename _Tp>
 636:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     class allocator
 637:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     {
 638:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef __alloc _Alloc;          // The underlying allocator.
 639:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****     public:
 640:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef size_t     size_type;
 641:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef ptrdiff_t  difference_type;
 642:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef _Tp*       pointer;
 643:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef const _Tp* const_pointer;
 644:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef _Tp&       reference;
 645:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef const _Tp& const_reference;
 646:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       typedef _Tp        value_type;
 647:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 648:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       template<typename _Tp1>
 649:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         struct rebind
 650:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         { typedef allocator<_Tp1> other; };
 651:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** 
 652:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       allocator() throw() {}
 6115              	LM156:
 6116              	L163:
 6117              	L162:
 6118 0000 55       		pushl	%ebp
 6119 0001 89E5     		movl	%esp, %ebp
 6121              	LM157:
 6122 0003 5D       		popl	%ebp
 6123 0004 C3       		ret
 6124              	Lscope12:
 6126 0005 909090   		.section	.text$_ZNSaIN10ThreadPool7JobDataEED1Ev,"x"
 6127              		.linkonce discard
 6128              		.align 2
 6131              	.globl __ZNSaIN10ThreadPool7JobDataEED1Ev
 6133              	__ZNSaIN10ThreadPool7JobDataEED1Ev:
 653:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h **** row() {}
 654:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       template<typename _Tp1>
 655:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****         allocator(const allocator<_Tp1>&) throw() {}
 656:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_alloc.h ****       ~allocator() throw() {}
 6135              	LM158:
 6136 0000 55       		pushl	%ebp
 6137 0001 89E5     		movl	%esp, %ebp
 6139              	LM159:
 6140 0003 5D       		popl	%ebp
 6141 0004 C3       		ret
 6142              	L168:
 6143              	L165:
 6144              	Lscope13:
 6146 0005 909090   		.section	.text$_ZNSaIN10ThreadPool10ThreadDataEEC1Ev,"x"
 6147              		.linkonce discard
 6148              		.align 2
 6151              	.globl __ZNSaIN10ThreadPool10ThreadDataEEC1Ev
 6153              	__ZNSaIN10ThreadPool10ThreadDataEEC1Ev:
 6155              	LM160:
 6156              	L171:
 6157              	L170:
 6158 0000 55       		pushl	%ebp
 6159 0001 89E5     		movl	%esp, %ebp
 6161              	LM161:
 6162 0003 5D       		popl	%ebp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 62


 6163 0004 C3       		ret
 6164              	Lscope14:
 6166 0005 909090   		.section	.text$_ZNSaIN10ThreadPool10ThreadDataEED1Ev,"x"
 6167              		.linkonce discard
 6168              		.align 2
 6171              	.globl __ZNSaIN10ThreadPool10ThreadDataEED1Ev
 6173              	__ZNSaIN10ThreadPool10ThreadDataEED1Ev:
 6175              	LM162:
 6176 0000 55       		pushl	%ebp
 6177 0001 89E5     		movl	%esp, %ebp
 6179              	LM163:
 6180 0003 5D       		popl	%ebp
 6181 0004 C3       		ret
 6182              	L176:
 6183              	L173:
 6184              	Lscope15:
 6187 0005 909090   		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EEC1ERKS2_,"x"
 6188              		.linkonce discard
 6189              		.align 2
 6193              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EEC1ERKS2_
 6195              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EEC1ERKS2_:
 6197              	Ltext4:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 63


  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * Copyright (c) 1996
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** /** @file stl_vector.h
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****  */
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** #ifndef __GLIBCPP_INTERNAL_VECTOR_H
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** #define __GLIBCPP_INTERNAL_VECTOR_H
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** #include <bits/functexcept.h>
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** #include <bits/concept_check.h>
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** namespace std
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** {
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   /// @if maint Primary default version.  @endif
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   /**
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  @if maint
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  See bits/stl_deque.h's _Deque_alloc_base for an explanation.
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  @endif
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   */
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Allocator, bool _IsStatic>
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     class _Vector_alloc_base
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     {
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     public:
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits<_Tp, _Allocator>::allocator_type
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       allocator_type;
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       allocator_type
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       get_allocator() const { return _M_data_allocator; }
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Vector_alloc_base(const allocator_type& __a)
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _M_data_allocator(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { }
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     protected:
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       allocator_type _M_data_allocator;
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp*           _M_start;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 64


  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp*           _M_finish;
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp*           _M_end_of_storage;
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp*
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _M_allocate(size_t __n) { return _M_data_allocator.allocate(__n); }
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _M_deallocate(_Tp* __p, size_t __n)
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { if (__p) _M_data_allocator.deallocate(__p, __n); }
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     };
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   /// @if maint Specialization for instanceless allocators.  @endif
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Allocator>
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     class _Vector_alloc_base<_Tp, _Allocator, true>
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     {
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     public:
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits<_Tp, _Allocator>::allocator_type
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****              allocator_type;
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       allocator_type
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       get_allocator() const { return allocator_type(); }
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Vector_alloc_base(const allocator_type&)
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _M_start(0), _M_finish(0), _M_end_of_storage(0)
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { }
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     protected:
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp* _M_start;
 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp* _M_finish;
 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp* _M_end_of_storage;
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits<_Tp, _Allocator>::_Alloc_type _Alloc_type;
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Tp*
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _M_allocate(size_t __n) { return _Alloc_type::allocate(__n); }
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _M_deallocate(_Tp* __p, size_t __n) { _Alloc_type::deallocate(__p, __n);}
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     };
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   /**
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  @if maint
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  See bits/stl_deque.h's _Deque_base for an explanation.
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  @endif
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   */
 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     struct _Vector_base
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     : public _Vector_alloc_base<_Tp, _Alloc,
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****                                 _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     {
 144:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     public:
 145:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef _Vector_alloc_base<_Tp, _Alloc,
 146:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 				 _Alloc_traits<_Tp, _Alloc>::_S_instanceless>
 147:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****          _Base;
 148:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef typename _Base::allocator_type allocator_type;
 149:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 65


 150:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 151:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _Base(__a) { }
 152:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 153:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 154:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _Base(__a)
 155:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       {
 156:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	_M_start = _M_allocate(__n);
 157:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	_M_finish = _M_start;
 158:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	_M_end_of_storage = _M_start + __n;
 159:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       }
 160:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 161:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       ~_Vector_base() 
 162:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { _M_deallocate(_M_start, _M_end_of_storage - _M_start); }
 163:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     };
 164:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 165:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 166:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   /**
 167:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  @brief  A standard container which offers fixed time access to individual
 168:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  elements in any order.
 169:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *
 170:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  @ingroup Containers
 171:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  @ingroup Sequences
 172:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *
 173:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 174:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 175:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 176:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 177:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 178:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *
 179:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic C-style array,
 180:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  it offers fast and efficient access to individual elements in any order
 181:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  and saves the user from worrying about memory and size allocation.
 182:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    *  Subscripting ( @c [] ) access is also provided as with C-style arrays.
 183:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   */
 184:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = allocator<_Tp> >
 185:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 186:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     {
 187:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       // Concept requirements.
 188:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       __glibcpp_class_requires(_Tp, _SGIAssignableConcept)
 189:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 190:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>                     _Base;
 191:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef vector<_Tp, _Alloc>                           vector_type;
 192:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 193:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     public:
 194:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef _Tp 						value_type;
 195:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef value_type* 					pointer;
 196:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef const value_type* 				const_pointer;
 197:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;
 198:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector_type>
 199:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_iterator;
 200:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>    	const_reverse_iterator;
 201:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>                reverse_iterator;
 202:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef value_type& 					reference;
 203:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef const value_type& 				const_reference;
 204:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef size_t 					size_type;
 205:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef ptrdiff_t 					difference_type;
 206:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       typedef typename _Base::allocator_type                allocator_type;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 66


 207:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 208:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     protected:
 209:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /** @if maint
 210:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  These two functions and three data members are all from the
 211:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  top-most base class, which varies depending on the type of
 212:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %allocator.  They should be pretty self-explanatory, as
 213:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector uses a simple contiguous allocation scheme.  @endif
 214:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 215:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       using _Base::_M_allocate;
 216:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       using _Base::_M_deallocate;
 217:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       using _Base::_M_start;
 218:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       using _Base::_M_finish;
 219:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       using _Base::_M_end_of_storage;
 220:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 221:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     public:
 222:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 223:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 224:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 225:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 226:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 227:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       explicit
 228:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       vector(const allocator_type& __a = allocator_type())
 229:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _Base(__a) { }
 6199              	LM164:
 6200 0000 55       		pushl	%ebp
 6201 0001 89E5     		movl	%esp, %ebp
 6202 0003 83EC08   		subl	$8, %esp
 6204              	LM165:
 6205              	LBB33:
 6206 0006 8B450C   		movl	12(%ebp), %eax
 6207 0009 89442404 		movl	%eax, 4(%esp)
 6208 000d 8B4508   		movl	8(%ebp), %eax
 6209 0010 890424   		movl	%eax, (%esp)
 6210 0013 E8000000 		call	__ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EEC2ERKS2_
 6210      00
 6211 0018 C9       		leave
 6212 0019 C3       		ret
 6213              	L179:
 6214              	L178:
 6215              	LBE33:
 6216              	Lscope16:
 6218 001a 9090     		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev,"x"
 6219              		.linkonce discard
 6220              		.align 2
 6223              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
 6225              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev:
 230:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 
 231:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 232:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Create a %vector with copies of an exemplar element.
 233:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 234:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  value  An element to copy.
 235:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        * 
 236:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of @a value.
 237:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 238:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 239:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 240:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _Base(__n, __a)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 67


 241:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { _M_finish = uninitialized_fill_n(_M_start, __n, __value); }
 242:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 243:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 244:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Create a %vector with default elements.
 245:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 246:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        * 
 247:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of a
 248:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  default-constructed element.
 249:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 250:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       explicit
 251:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       vector(size_type __n)
 252:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _Base(__n, allocator_type())
 253:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { _M_finish = uninitialized_fill_n(_M_start, __n, value_type()); }
 254:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 255:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 256:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 257:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 258:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        * 
 259:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 260:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  object used by @a x.  All the elements of @a x are copied,
 261:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  but any extra memory in
 262:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.
 263:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 264:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       vector(const vector& __x)
 265:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       : _Base(__x.size(), __x.get_allocator())
 266:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { _M_finish = uninitialized_copy(__x.begin(), __x.end(), _M_start); }
 267:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 268:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 269:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 270:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  first  An input iterator.
 271:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  last  An input iterator.
 272:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        * 
 273:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 274:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  [first,last).
 275:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 276:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or random-access, then
 277:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  this will call the elements' copy constructor N times (where N is
 278:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  distance(first,last)) and do no memory reallocation.  But if only
 279:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  input iterators are used, then this will do at most 2N calls to the
 280:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  copy constructor, and logN memory reallocations.
 281:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 282:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 283:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 284:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 285:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	: _Base(__a)
 286:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         {
 287:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 288:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
 289:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 290:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	}
 291:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 292:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 293:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the elements
 294:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
 295:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  way.  Managing the pointer is the user's responsibilty.
 296:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 297:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       ~vector() { _Destroy(_M_start, _M_finish); }
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 68


 6227              	LM166:
 6228 0000 55       		pushl	%ebp
 6229 0001 89E5     		movl	%esp, %ebp
 6230 0003 57       		pushl	%edi
 6231 0004 56       		pushl	%esi
 6232 0005 53       		pushl	%ebx
 6233 0006 83EC4C   		subl	$76, %esp
 6234 0009 C745E000 		movl	$___gxx_personality_sj0, -32(%ebp)
 6234      000000
 6235 0010 C745E42C 		movl	$LLSDA720, -28(%ebp)
 6235      000000
 6236 0017 8D45E8   		leal	-24(%ebp), %eax
 6237 001a 8D55F4   		leal	-12(%ebp), %edx
 6238 001d 8910     		movl	%edx, (%eax)
 6239 001f BA550000 		movl	$L188, %edx
 6239      00
 6240 0024 895004   		movl	%edx, 4(%eax)
 6241 0027 896008   		movl	%esp, 8(%eax)
 6242 002a 8D45C8   		leal	-56(%ebp), %eax
 6243 002d 890424   		movl	%eax, (%esp)
 6244 0030 E8000000 		call	__Unwind_SjLj_Register
 6244      00
 6246              	LM167:
 6247              	LBB34:
 6248 0035 8B4508   		movl	8(%ebp), %eax
 6249 0038 8B4004   		movl	4(%eax), %eax
 6250 003b 89442404 		movl	%eax, 4(%esp)
 6251 003f 8B4508   		movl	8(%ebp), %eax
 6252 0042 8B00     		movl	(%eax), %eax
 6253 0044 890424   		movl	%eax, (%esp)
 6254 0047 C745CC01 		movl	$1, -52(%ebp)
 6254      000000
 6255 004e E8000000 		call	__ZSt8_DestroyIPN10ThreadPool10ThreadDataEEvT_S3_
 6255      00
 6256 0053 EB39     		jmp	L184
 6257              	L188:
 6258 0055 8D6D0C   		leal	12(%ebp), %ebp
 6259 0058 8B45D0   		movl	-48(%ebp), %eax
 6260 005b 8945C0   		movl	%eax, -64(%ebp)
 6261              	L183:
 6262 005e 8B55C0   		movl	-64(%ebp), %edx
 6263 0061 8955C4   		movl	%edx, -60(%ebp)
 6264 0064 8B4508   		movl	8(%ebp), %eax
 6265 0067 890424   		movl	%eax, (%esp)
 6266 006a C745CC00 		movl	$0, -52(%ebp)
 6266      000000
 6267 0071 E8000000 		call	__ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EED2Ev
 6267      00
 6268 0076 8B45C4   		movl	-60(%ebp), %eax
 6269 0079 8945C0   		movl	%eax, -64(%ebp)
 6270              	L185:
 6271 007c 8B55C0   		movl	-64(%ebp), %edx
 6272 007f 891424   		movl	%edx, (%esp)
 6273 0082 C745CCFF 		movl	$-1, -52(%ebp)
 6273      FFFFFF
 6274 0089 E8000000 		call	__Unwind_SjLj_Resume
 6274      00
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 69


 6275              	L184:
 6276 008e 8B4508   		movl	8(%ebp), %eax
 6277 0091 890424   		movl	%eax, (%esp)
 6278 0094 C745CCFF 		movl	$-1, -52(%ebp)
 6278      FFFFFF
 6279 009b E8000000 		call	__ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EED2Ev
 6279      00
 6280              	L181:
 6281 00a0 8D45C8   		leal	-56(%ebp), %eax
 6282 00a3 890424   		movl	%eax, (%esp)
 6283 00a6 E8000000 		call	__Unwind_SjLj_Unregister
 6283      00
 6284 00ab 83C44C   		addl	$76, %esp
 6285 00ae 5B       		popl	%ebx
 6286 00af 5E       		popl	%esi
 6287 00b0 5F       		popl	%edi
 6288 00b1 5D       		popl	%ebp
 6289 00b2 C3       		ret
 6290              	LBE34:
 6291              		.section	.gcc_except_table,""
 6292              	LLSDA720:
 6293 002c FF       		.byte	0xff
 6294 002d FF       		.byte	0xff
 6295 002e 01       		.byte	0x1
 6296 002f 02       		.uleb128 LLSDACSE720-LLSDACSB720
 6297              	LLSDACSB720:
 6298 0030 00       		.uleb128 0x0
 6299 0031 00       		.uleb128 0x0
 6300              	LLSDACSE720:
 6301              		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev,"x"
 6302              		.linkonce discard
 6303              	Lscope17:
 6305 00b3 90       		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv,"x"
 6306              		.linkonce discard
 6307              		.align 2
 6310              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 6312              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv:
 298:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** *  @param  x  A %vector of identical element and allocator types.
 299:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        * 
 300:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  All the elements of @a x are copied, but any extra memory in
 301:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.  Unlike the
 302:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 303:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 304:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       vector&
 305:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       operator=(const vector& __x);
 306:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 307:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 308:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 309:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  n  Number of elements to be assigned.
 310:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  val  Value to be assigned.
 311:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 312:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function fills a %vector with @a n copies of the given
 313:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 314:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 315:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 316:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 317:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 70


 318:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val) 
 319:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 320:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 321:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 322:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 323:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  first  An input iterator.
 324:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  last   An input iterator.
 325:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 326:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 327:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  range [first,last).
 328:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 329:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 330:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 331:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 332:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 333:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 334:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         void
 335:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 336:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         {
 337:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 338:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
 339:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 340:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	}
 341:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 342:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 343:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       allocator_type
 344:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       get_allocator() const { return _Base::get_allocator(); }
 345:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 346:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       // iterators
 347:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 348:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first element in the
 349:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector.  Iteration is done in ordinary element order.
 350:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 351:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       iterator
 352:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       begin() { return iterator (_M_start); }
 353:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 354:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 355:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 356:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 357:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element order.
 358:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 359:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_iterator
 360:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       begin() const { return const_iterator (_M_start); }
 361:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 362:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 363:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 364:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 365:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element order.
 366:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 367:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       iterator
 368:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       end() { return iterator (_M_finish); }
 369:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 370:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 371:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past the last
 6314              	LM168:
 6315 0000 55       		pushl	%ebp
 6316 0001 89E5     		movl	%esp, %ebp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 71


 6317 0003 83EC18   		subl	$24, %esp
 6319              	LM169:
 6320 0006 8B4508   		movl	8(%ebp), %eax
 6321              	LBB35:
 6322 0009 83C004   		addl	$4, %eax
 6323 000c 89442404 		movl	%eax, 4(%esp)
 6324 0010 8D45FC   		leal	-4(%ebp), %eax
 6325 0013 890424   		movl	%eax, (%esp)
 6326 0016 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 6326      00
 6327 001b 8B45FC   		movl	-4(%ebp), %eax
 6328 001e C9       		leave
 6329 001f C3       		ret
 6330              	LBE35:
 6331              	Lscope18:
 6339              		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE9push_backERKS1_,"x"
 6340              		.linkonce discard
 6341              		.align 2
 6345              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE9push_backERKS1_
 6347              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE9push_backERKS1_:
 372:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** rder.
 373:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 374:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_iterator
 375:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       end() const { return const_iterator (_M_finish); }
 376:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 377:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 378:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 379:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 380:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element order.
 381:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 382:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       reverse_iterator
 383:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       rbegin() { return reverse_iterator(end()); }
 384:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 385:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 386:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 387:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 388:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  reverse element order.
 389:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 390:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_reverse_iterator
 391:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       rbegin() const { return const_reverse_iterator(end()); }
 392:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 393:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 394:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one before the
 395:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in reverse element
 396:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  order.
 397:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 398:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       reverse_iterator
 399:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       rend() { return reverse_iterator(begin()); }
 400:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 401:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 402:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 403:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 404:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  is done in reverse element order.
 405:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 406:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_reverse_iterator
 407:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       rend() const { return const_reverse_iterator(begin()); }
 408:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 72


 409:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       // [23.2.4.2] capacity
 410:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 411:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       size_type
 412:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       size() const { return size_type(end() - begin()); }
 413:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 414:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 415:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       size_type
 416:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       max_size() const { return size_type(-1) / sizeof(value_type); }
 417:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 418:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 419:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 420:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 421:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  x  Data with which new elements should be populated.
 422:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 423:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 424:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 425:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 426:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 427:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  given data.
 428:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 429:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 430:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 431:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       {
 432:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	if (__new_size < size())
 433:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  erase(begin() + __new_size, end());
 434:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	else
 435:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 436:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       }
 437:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 438:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 439:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 440:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 441:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 442:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will resize the %vector to the specified
 443:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 444:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 445:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are
 446:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  default-constructed.
 447:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 448:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 449:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       resize(size_type __new_size) { resize(__new_size, value_type()); }
 450:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 451:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 452:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can hold before
 453:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  needing to allocate more memory.
 454:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 455:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       size_type
 456:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       capacity() const
 457:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { return size_type(const_iterator(_M_end_of_storage) - begin()); }
 458:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 459:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 460:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 461:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  equal end().)
 462:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 463:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       bool
 464:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       empty() const { return begin() == end(); }
 465:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 73


 466:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 467:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 468:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *          elements.
 469:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  n  Number of elements required.
 470:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 471:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 472:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 473:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 474:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 475:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  thrown.
 476:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 477:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 478:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 479:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 480:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 481:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  and copying of %vector data.
 482:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 483:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 484:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       reserve(size_type __n);
 485:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 486:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       // element access
 487:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 488:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 489:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  n  The index of the element for which data should be accessed.
 490:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 491:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 492:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 493:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 494:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 495:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  see at().)
 496:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 497:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       reference
 498:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       operator[](size_type __n) { return *(begin() + __n); }
 499:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 500:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 501:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 502:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 503:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  accessed.
 504:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 505:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 506:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 507:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 508:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 509:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  see at().)
 510:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 511:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_reference
 512:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       operator[](size_type __n) const { return *(begin() + __n); }
 513:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 514:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     protected:
 515:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /// @if maint Safety check used only from at().  @endif
 516:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 517:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 518:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       {
 519:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	if (__n >= this->size())
 520:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  __throw_out_of_range("vector [] access out of range");
 521:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       }
 522:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 74


 523:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     public:
 524:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 525:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 526:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 527:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  accessed.
 528:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 529:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 530:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 531:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter is first
 532:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  checked that it is in the range of the vector.  The function throws
 533:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  out_of_range if the check fails.
 534:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 535:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       reference
 536:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       at(size_type __n) { _M_range_check(__n); return (*this)[__n]; }
 537:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 538:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 539:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 540:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 541:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  accessed.
 542:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 543:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 544:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 545:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 546:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 547:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 548:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 549:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_reference
 550:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       at(size_type __n) const { _M_range_check(__n); return (*this)[__n]; }
 551:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 552:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 553:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 554:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element of the %vector.
 555:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 556:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       reference
 557:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       front() { return *begin(); }
 558:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 559:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 560:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 561:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element of the %vector.
 562:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 563:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_reference
 564:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       front() const { return *begin(); }
 565:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 566:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 567:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last element of the
 568:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector.
 569:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 570:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       reference
 571:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       back() { return *(end() - 1); }
 572:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 573:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 574:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the last
 575:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element of the %vector.
 576:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 577:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       const_reference
 578:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       back() const { return *(end() - 1); }
 579:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 75


 580:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 581:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 582:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 583:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  x  Data to be added.
 584:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 585:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 586:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 587:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 588:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 589:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  available.
 590:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 591:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 592:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       push_back(const value_type& __x)
 593:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       {
 594:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	if (_M_finish != _M_end_of_storage)
 595:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  {
 596:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	    _Construct(_M_finish, __x);
 6349              	LM170:
 6350 0000 55       		pushl	%ebp
 6351 0001 89E5     		movl	%esp, %ebp
 6352 0003 83EC18   		subl	$24, %esp
 597:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** element.
 6354              	LM171:
 6355              	LBB36:
 6356 0006 8B4508   		movl	8(%ebp), %eax
 6357 0009 8B5508   		movl	8(%ebp), %edx
 6358 000c 8B4004   		movl	4(%eax), %eax
 6359 000f 3B4208   		cmpl	8(%edx), %eax
 6360 0012 741E     		je	L191
 598:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       *
 599:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 6362              	LM172:
 6363 0014 8B450C   		movl	12(%ebp), %eax
 6364 0017 89442404 		movl	%eax, 4(%esp)
 6365 001b 8B4508   		movl	8(%ebp), %eax
 6366 001e 8B4004   		movl	4(%eax), %eax
 6367 0021 890424   		movl	%eax, (%esp)
 6368 0024 E8000000 		call	__ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_
 6368      00
 600:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****      *
 6370              	LM173:
 6371 0029 8B4508   		movl	8(%ebp), %eax
 6372 002c 8340040C 		addl	$12, 4(%eax)
 6373 0030 EB27     		jmp	L190
 6374              	L191:
 601:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       *  Note that no data is returned, and if the last element's data is
 602:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  needed, it should be retrieved before pop_back() is called.
 603:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 6376              	LM174:
 6377 0032 8B4508   		movl	8(%ebp), %eax
 6378 0035 890424   		movl	%eax, (%esp)
 6379 0038 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 6379      00
 6380 003d 8945FC   		movl	%eax, -4(%ebp)
 6381 0040 8B450C   		movl	12(%ebp), %eax
 6382 0043 89442408 		movl	%eax, 8(%esp)
 6383 0047 8B45FC   		movl	-4(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 76


 6384 004a 89442404 		movl	%eax, 4(%esp)
 6385 004e 8B4508   		movl	8(%ebp), %eax
 6386 0051 890424   		movl	%eax, (%esp)
 6387 0054 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iterato
 6387      00
 6388              	L190:
 6389 0059 C9       		leave
 6390 005a C3       		ret
 6391              	LBE36:
 6392              	Lscope19:
 6394 005b 90       		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv,"x"
 6395              		.linkonce discard
 6396              		.align 2
 6399              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 6401              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv:
 6403              	LM175:
 6404 0000 55       		pushl	%ebp
 6405 0001 89E5     		movl	%esp, %ebp
 6406 0003 83EC18   		subl	$24, %esp
 6408              	LM176:
 6409              	LBB37:
 6410 0006 8B4508   		movl	8(%ebp), %eax
 6411 0009 89442404 		movl	%eax, 4(%esp)
 6412 000d 8D45FC   		leal	-4(%ebp), %eax
 6413 0010 890424   		movl	%eax, (%esp)
 6414 0013 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 6414      00
 6415 0018 8B45FC   		movl	-4(%ebp), %eax
 6416 001b C9       		leave
 6417 001c C3       		ret
 6418              	LBE37:
 6419              	Lscope20:
 6421 001d 909090   		.section	.text$_ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_
 6422              		.linkonce discard
 6423              		.align 2
 6427              	.globl __ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iterator
 6429              	__ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_E
 6431              	Ltext5:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // USA.
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 77


  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** /** @file stl_iterator.h
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  */
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** #ifndef __GLIBCPP_INTERNAL_ITERATOR_H
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** #define __GLIBCPP_INTERNAL_ITERATOR_H
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** namespace std
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** {
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  "Bidirectional and random access iterators have corresponding reverse
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 78


  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @code
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @endcode
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  This mapping is dictated by the fact that while there is always a
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  before the beginning of an array." [24.4.1]/1,2
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     class reverse_iterator 
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     {
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     protected:
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       _Iterator current;
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     public:
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef _Iterator 				       iterator_type;
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef typename iterator_traits<_Iterator>::difference_type 	
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       							       difference_type;
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef typename iterator_traits<_Iterator>::reference   reference;
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef typename iterator_traits<_Iterator>::pointer     pointer;
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     public:
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  The default constructor default-initializes member @p current.
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       // _GLIBCPP_RESOLVE_LIB_DEFECTS
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       explicit 
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  The copy constructor is normal.
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x) 
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       : current(__x.current) { }
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  A reverse_iterator across other types can be copied in the normal
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  fashion.
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       template<typename _Iter>
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 79


 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	: current(__x.base()) { }
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       iterator_type 
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       base() const { return current; }
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 144:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 145:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 146:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 147:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reference 
 148:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator*() const 
 149:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       {
 150:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 151:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *--__tmp;
 152:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 153:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 154:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 155:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 156:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 157:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 158:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 159:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       pointer 
 160:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator->() const { return &(operator*()); }
 161:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 162:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 163:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 164:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 165:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 166:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 167:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator& 
 168:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++() 
 169:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       {
 170:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	--current;
 171:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *this;
 172:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 173:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 174:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 175:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 176:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 177:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 178:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 179:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator 
 180:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++(int) 
 181:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       {
 182:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 183:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	--current;
 184:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return __tmp;
 185:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 186:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 187:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 188:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 189:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 190:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 80


 191:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 192:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator& 
 193:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator--() 
 194:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       {
 195:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	++current;
 196:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *this;
 197:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 198:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 199:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 200:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 201:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 202:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 203:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 204:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator operator--(int) 
 205:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       {
 206:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 207:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	++current;
 208:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return __tmp;
 209:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 210:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 211:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 212:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 213:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 214:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 215:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 216:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator 
 217:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator+(difference_type __n) const 
 218:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 219:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 220:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 221:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 222:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 223:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 224:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 225:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator& 
 226:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator+=(difference_type __n) 
 227:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       {
 228:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	current -= __n;
 229:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *this;
 230:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 231:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 232:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 233:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 234:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 235:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 236:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 237:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator 
 238:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator-(difference_type __n) const 
 239:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 240:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 241:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 242:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 243:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 244:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 245:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 246:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reverse_iterator& 
 247:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator-=(difference_type __n) 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 81


 248:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       {
 249:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	current += __n;
 250:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *this;
 251:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 252:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 253:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 254:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  TODO
 255:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 256:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @doctodo
 257:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 258:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reference 
 259:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator[](difference_type __n) const { return *(*this + __n); }  
 260:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     }; 
 261:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****  
 262:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   //@{
 263:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
 264:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @param  x  A %reverse_iterator.
 265:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @param  y  A %reverse_iterator.
 266:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @return  A simple bool.
 267:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 268:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 269:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 270:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 271:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
 272:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 273:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline bool 
 274:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x, 
 275:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y) 
 276:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 277:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 278:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 279:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline bool 
 280:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x, 
 281:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y) 
 282:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 283:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 284:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 285:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline bool 
 286:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x, 
 287:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y) 
 288:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return !(__x == __y); }
 289:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 290:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 291:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline bool 
 292:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x, 
 293:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y) 
 294:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return __y < __x; }
 295:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 296:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 297:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline bool 
 298:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x, 
 299:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 		const reverse_iterator<_Iterator>& __y) 
 300:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return !(__y < __x); }
 301:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 302:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 303:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline bool 
 304:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x, 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 82


 305:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y) 
 306:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return !(__x < __y); }
 307:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 308:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 309:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 310:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x, 
 311:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y) 
 312:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 313:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 314:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 315:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator> 
 316:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 317:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x) 
 318:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 319:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   //@}
 320:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 321:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 322:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
 323:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 324:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 325:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 326:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 327:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  push_back.
 328:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 329:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 330:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  save typing.
 331:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
 332:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Container>
 333:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     class back_insert_iterator 
 334:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 335:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     {
 336:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     protected:
 337:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       _Container* container;
 338:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 339:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     public:
 340:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 341:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 342:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 343:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 344:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       explicit 
 345:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 346:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 347:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 348:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @param  value  An instance of whatever type
 349:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 350:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 351:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 352:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 353:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a "position" in the
 354:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 355:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 356:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 357:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 358:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       back_insert_iterator&
 359:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value) 
 360:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { 
 361:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	container->push_back(__value);
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 83


 362:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *this;
 363:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 364:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 365:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.
 366:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       back_insert_iterator& 
 367:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator*() { return *this; }
 368:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 369:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not "move".)
 370:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       back_insert_iterator& 
 371:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++() { return *this; }
 372:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 373:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not "move".)
 374:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       back_insert_iterator
 375:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++(int) { return *this; }
 376:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     };
 377:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 378:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
 379:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @param  x  A container of arbitrary type.
 380:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p x.
 381:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 382:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 383:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 384:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 385:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 386:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 387:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  types for you.
 388:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
 389:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Container>
 390:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline back_insert_iterator<_Container> 
 391:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     back_inserter(_Container& __x) 
 392:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 393:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 394:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
 395:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 396:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 397:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 398:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 399:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  push_front.
 400:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 401:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 402:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  save typing.
 403:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
 404:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Container>
 405:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     class front_insert_iterator 
 406:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 407:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     {
 408:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     protected:
 409:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       _Container* container;
 410:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 411:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     public:
 412:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 413:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 414:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 415:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 416:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 417:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 418:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 84


 419:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @param  value  An instance of whatever type
 420:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 421:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 422:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 423:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 424:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a "position" in the
 425:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 426:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 427:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 428:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 429:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       front_insert_iterator&
 430:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value) 
 431:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { 
 432:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	container->push_front(__value);
 433:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *this;
 434:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 435:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 436:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.
 437:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       front_insert_iterator& 
 438:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator*() { return *this; }
 439:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 440:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not "move".)
 441:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       front_insert_iterator& 
 442:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++() { return *this; }
 443:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 444:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not "move".)
 445:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       front_insert_iterator 
 446:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++(int) { return *this; }
 447:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     };
 448:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 449:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
 450:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @param  x  A container of arbitrary type.
 451:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 452:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 453:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 454:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 455:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 456:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 457:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 458:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  types for you.
 459:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
 460:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Container>
 461:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline front_insert_iterator<_Container> 
 462:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     front_inserter(_Container& __x) 
 463:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 464:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 465:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
 466:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 467:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 468:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 469:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 470:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 471:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  position.
 472:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 473:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 474:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  %iterator's position.)
 475:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 85


 476:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 477:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  save typing.
 478:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
 479:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Container>
 480:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     class insert_iterator 
 481:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 482:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     {
 483:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     protected:
 484:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       _Container* container;
 485:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typename _Container::iterator iter;
 486:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 487:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     public:
 488:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 489:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 490:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 491:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 492:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 493:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 494:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 495:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i) 
 496:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 497:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    
 498:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /**
 499:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @param  value  An instance of whatever type
 500:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 501:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 502:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 503:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 504:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 505:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 506:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 507:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 508:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 509:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 510:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @code
 511:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *     // vector v contains A and Z
 512:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 513:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 514:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *     i = 1;
 515:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *     i = 2;
 516:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *     i = 3;
 517:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *
 518:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 519:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****        *  @endcode
 520:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       */
 521:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       insert_iterator&
 522:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator=(const typename _Container::const_reference __value) 
 523:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { 
 524:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 525:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	++iter;
 526:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	return *this;
 527:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       }
 528:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 529:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.
 530:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       insert_iterator& 
 531:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator*() { return *this; }
 532:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 86


 533:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not "move".)
 534:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       insert_iterator& 
 535:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++() { return *this; }
 536:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 537:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not "move".)
 538:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       insert_iterator& 
 539:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++(int) { return *this; }
 540:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     };
 541:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   
 542:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   /**
 543:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @param  x  A container of arbitrary type.
 544:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p x.
 545:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *
 546:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 547:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 548:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 549:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 550:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 551:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****    *  types for you.
 552:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   */
 553:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 554:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inline insert_iterator<_Container> 
 555:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 556:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     {
 557:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x, 
 558:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 559:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     }
 560:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** } // namespace std
 561:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 562:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** namespace __gnu_cxx
 563:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** {  
 564:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // This iterator adapter is 'normal' in the sense that it does not
 565:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 566:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 567:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 568:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 569:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 570:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 571:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   using std::iterator_traits;
 572:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   using std::iterator;
 573:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 574:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     class __normal_iterator
 575:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 576:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****                         typename iterator_traits<_Iterator>::value_type,
 577:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****                         typename iterator_traits<_Iterator>::difference_type,
 578:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****                         typename iterator_traits<_Iterator>::pointer,
 579:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****                         typename iterator_traits<_Iterator>::reference>
 580:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     {
 581:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     protected:
 582:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       _Iterator _M_current;
 583:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 584:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     public:
 585:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef typename iterator_traits<_Iterator>::difference_type 	
 586:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       							       difference_type;
 587:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef typename iterator_traits<_Iterator>::reference   reference;
 588:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       typedef typename iterator_traits<_Iterator>::pointer     pointer;
 589:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 87


 590:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator() : _M_current(_Iterator()) { }
 591:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 592:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       explicit 
 593:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 594:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 595:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 596:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       template<typename _Iter>
 597:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       inline __normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 598:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	: _M_current(__i.base()) { }
 599:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 600:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       // Forward iterator requirements
 601:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reference
 602:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator*() const { return *_M_current; }
 603:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 604:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       pointer
 605:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator->() const { return _M_current; }
 606:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 607:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator&
 608:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++() { ++_M_current; return *this; }
 609:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 610:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator
 611:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator++(int) { return __normal_iterator(_M_current++); }
 612:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 613:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 614:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator&
 615:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator--() { --_M_current; return *this; }
 616:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 617:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator
 618:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator--(int) { return __normal_iterator(_M_current--); }
 619:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 620:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       // Random access iterator requirements
 621:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       reference
 622:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator[](const difference_type& __n) const
 623:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { return _M_current[__n]; }
 624:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 625:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator&
 626:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator+=(const difference_type& __n)
 627:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 628:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 629:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator
 630:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator+(const difference_type& __n) const
 631:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 632:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 633:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator&
 634:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator-=(const difference_type& __n)
 635:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 636:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 637:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       __normal_iterator
 638:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       operator-(const difference_type& __n) const
 639:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 640:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       
 641:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       const _Iterator& 
 642:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****       base() const { return _M_current; }
 643:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****     };
 644:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 645:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 646:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 88


 647:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // comparaison between cv-qualified and non-cv-qualified iterators be
 648:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 649:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 650:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 651:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 652:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   
 653:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // Forward iterator requirements
 654:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 655:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 656:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 657:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	     const __normal_iterator<_IteratorR, _Container>& __rhs)
 658:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() == __rhs.base(); }
 659:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 660:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 661:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 662:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 663:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****              const __normal_iterator<_Iterator, _Container>& __rhs)
 664:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() == __rhs.base(); }
 665:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 666:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 667:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 668:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 669:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	     const __normal_iterator<_IteratorR, _Container>& __rhs)
 670:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() != __rhs.base(); }
 671:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 672:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 673:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 674:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 675:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****              const __normal_iterator<_Iterator, _Container>& __rhs)
 676:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() != __rhs.base(); }
 6433              	LM177:
 6434 0000 55       		pushl	%ebp
 6435 0001 89E5     		movl	%esp, %ebp
 6436 0003 53       		pushl	%ebx
 6437 0004 83EC04   		subl	$4, %esp
 6439              	LM178:
 6440              	LBB38:
 6441 0007 8B4508   		movl	8(%ebp), %eax
 6442 000a 890424   		movl	%eax, (%esp)
 6443 000d E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 6443      00
 6444 0012 89C3     		movl	%eax, %ebx
 6445 0014 8B450C   		movl	12(%ebp), %eax
 6446 0017 890424   		movl	%eax, (%esp)
 6447 001a E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 6447      00
 6448 001f 89C2     		movl	%eax, %edx
 6449 0021 8B03     		movl	(%ebx), %eax
 6450 0023 3B02     		cmpl	(%edx), %eax
 6451 0025 0F95C0   		setne	%al
 6452 0028 0FB6C0   		movzbl	%al, %eax
 6453 002b 83C404   		addl	$4, %esp
 6454 002e 5B       		popl	%ebx
 6455 002f 5D       		popl	%ebp
 6456 0030 C3       		ret
 6457              	LBE38:
 6458              	Lscope21:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 89


 6460 0031 909090   		.section	.text$_ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEp
 6461              		.linkonce discard
 6462              		.align 2
 6465              	.globl __ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 6467              	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv:
 6469              	LM179:
 6470 0000 55       		pushl	%ebp
 6471 0001 89E5     		movl	%esp, %ebp
 6473              	LM180:
 6474              	LBB39:
 6475 0003 8B4508   		movl	8(%ebp), %eax
 6476 0006 83000C   		addl	$12, (%eax)
 6477 0009 8B4508   		movl	8(%ebp), %eax
 6478 000c 5D       		popl	%ebp
 6479 000d C3       		ret
 6480              	LBE39:
 6481              	Lscope22:
 6483 000e 9090     		.section	.text$_ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE
 6484              		.linkonce discard
 6485              		.align 2
 6488              	.globl __ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
 6490              	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv:
 6492              	LM181:
 6493 0000 55       		pushl	%ebp
 6494 0001 89E5     		movl	%esp, %ebp
 6496              	LM182:
 6497              	LBB40:
 6498 0003 8B4508   		movl	8(%ebp), %eax
 6499 0006 8B00     		movl	(%eax), %eax
 6500 0008 5D       		popl	%ebp
 6501 0009 C3       		ret
 6502              	LBE40:
 6503              	Lscope23:
 6505 000a 9090     		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv,"x"
 6506              		.linkonce discard
 6507              		.align 2
 6510              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv
 6512              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv:
 6514              	Ltext6:
 514:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****    *  All the elements of @a x are copied, but unlike the copy constructor,
 515:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  the allocator object is not copied.
 516:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 517:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     list&
 518:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     operator=(const list& __x);
 519:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 520:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 521:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Assigns a given value to a %list.
 522:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  n  Number of elements to be assigned.
 523:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  val  Value to be assigned.
 524:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 525:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function fills a %list with @a n copies of the given value.
 526:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Note that the assignment completely changes the %list and that the
 527:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  resulting %list's size is the same as the number of elements assigned.
 528:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Old data may be lost.
 529:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 530:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 531:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     assign(size_type __n, const value_type& __val) { _M_fill_assign(__n, __val); }
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 90


 532:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 533:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 534:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Assigns a range to a %list.
 535:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  first  An input iterator.
 536:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  last   An input iterator.
 537:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 538:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function fills a %list with copies of the elements in the
 539:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  range [first,last).
 540:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 541:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Note that the assignment completely changes the %list and that the
 542:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  resulting %list's size is the same as the number of elements assigned.
 543:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Old data may be lost.
 544:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 545:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     template<typename _InputIterator>
 546:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       void
 547:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       assign(_InputIterator __first, _InputIterator __last)
 548:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       {
 549:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         // Check whether it's an integral type.  If so, it's not an iterator.
 550:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
 551:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         _M_assign_dispatch(__first, __last, _Integral());
 552:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       }
 553:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 554:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /// Get a copy of the memory allocation object.
 555:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     allocator_type
 556:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     get_allocator() const { return _Base::get_allocator(); }
 557:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 558:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // iterators
 559:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 560:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read/write iterator that points to the first element in the
 561:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  %list.  Iteration is done in ordinary element order.
 562:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 563:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     iterator
 564:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     begin() { return static_cast<_Node*>(_M_node->_M_next); }
 565:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 566:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 567:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read-only (constant) iterator that points to the first element
 568:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  in the %list.  Iteration is done in ordinary element order.
 569:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 6516              	LM183:
 6517 0000 55       		pushl	%ebp
 6518 0001 89E5     		movl	%esp, %ebp
 6519 0003 53       		pushl	%ebx
 6520 0004 83EC14   		subl	$20, %esp
 6521 0007 8B5D08   		movl	8(%ebp), %ebx
 6523              	LM184:
 6524              	LBB41:
 6525 000a 8B450C   		movl	12(%ebp), %eax
 6526 000d 8B00     		movl	(%eax), %eax
 6527 000f 8B00     		movl	(%eax), %eax
 6528 0011 89442404 		movl	%eax, 4(%esp)
 6529 0015 891C24   		movl	%ebx, (%esp)
 6530 0018 E8000000 		call	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E
 6530      00
 6531              	LBE41:
 6532 001d 89D8     		movl	%ebx, %eax
 6533 001f 83C414   		addl	$20, %esp
 6534 0022 5B       		popl	%ebx
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 91


 6535 0023 5D       		popl	%ebp
 6536 0024 C20400   		ret	$4
 6537              	Lscope24:
 6539 0027 90       		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv,"x"
 6540              		.linkonce discard
 6541              		.align 2
 6544              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv
 6546              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv:
 570:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** t<_Node*>(_M_node->_M_next); }
 571:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 572:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 573:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read/write iterator that points one past the last element in
 574:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  the %list.  Iteration is done in ordinary element order.
 575:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 576:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     iterator
 577:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     end() { return _M_node; }
 578:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 579:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 580:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read-only (constant) iterator that points one past the last
 581:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  element in the %list.  Iteration is done in ordinary element order.
 582:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 583:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     const_iterator
 6548              	LM185:
 6549 0000 55       		pushl	%ebp
 6550 0001 89E5     		movl	%esp, %ebp
 6551 0003 53       		pushl	%ebx
 6552 0004 83EC14   		subl	$20, %esp
 6553 0007 8B5D08   		movl	8(%ebp), %ebx
 6555              	LM186:
 6556              	LBB42:
 6557 000a 8B450C   		movl	12(%ebp), %eax
 6558 000d 8B00     		movl	(%eax), %eax
 6559 000f 89442404 		movl	%eax, 4(%esp)
 6560 0013 891C24   		movl	%ebx, (%esp)
 6561 0016 E8000000 		call	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E
 6561      00
 6562              	LBE42:
 6563 001b 89D8     		movl	%ebx, %eax
 6564 001d 83C414   		addl	$20, %esp
 6565 0020 5B       		popl	%ebx
 6566 0021 5D       		popl	%ebp
 6567 0022 C20400   		ret	$4
 6568              	Lscope25:
 6570 0025 909090   		.section	.text$_ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EppEi,"x"
 6571              		.linkonce discard
 6572              		.align 2
 6575              	.globl __ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EppEi
 6577              	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EppEi:
 6579              	LM187:
 6580 0000 55       		pushl	%ebp
 6581 0001 89E5     		movl	%esp, %ebp
 6582 0003 53       		pushl	%ebx
 6583 0004 83EC14   		subl	$20, %esp
 6584 0007 8B5D08   		movl	8(%ebp), %ebx
 6586              	LM188:
 6587              	LBB43:
 6588 000a 8B450C   		movl	12(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 92


 6589 000d 89442404 		movl	%eax, 4(%esp)
 6590 0011 891C24   		movl	%ebx, (%esp)
 6591 0014 E8000000 		call	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1ERKS4_
 6591      00
 6593              	LM189:
 6594 0019 8B450C   		movl	12(%ebp), %eax
 6595 001c 890424   		movl	%eax, (%esp)
 6596 001f E8000000 		call	__ZNSt19_List_iterator_base7_M_incrEv
 6596      00
 6598              	LM190:
 6599              	LBE43:
 6600 0024 89D8     		movl	%ebx, %eax
 6601 0026 83C414   		addl	$20, %esp
 6602 0029 5B       		popl	%ebx
 6603 002a 5D       		popl	%ebp
 6604 002b C20400   		ret	$4
 6608              	Lscope26:
 6610 002e 9090     		.section	.text$_ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv,"x"
 6611              		.linkonce discard
 6612              		.align 2
 6615              	.globl __ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
 6617              	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv:
 6619              	LM191:
 6620 0000 55       		pushl	%ebp
 6621 0001 89E5     		movl	%esp, %ebp
 6622 0003 83EC08   		subl	$8, %esp
 6624              	LM192:
 6625              	LBB44:
 6626 0006 8B4508   		movl	8(%ebp), %eax
 6627 0009 890424   		movl	%eax, (%esp)
 6628 000c E8000000 		call	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EdeEv
 6628      00
 6629 0011 C9       		leave
 6630 0012 C3       		ret
 6631              	LBE44:
 6632              	Lscope27:
 6634 0013 90       		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5clearEv,"x"
 6635              		.linkonce discard
 6636              		.align 2
 6639              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5clearEv
 6641              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5clearEv:
 584:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h **** t { return _M_node; }
 585:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 586:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 587:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read/write reverse iterator that points to the last element in
 588:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  the %list.  Iteration is done in reverse element order.
 589:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 590:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     reverse_iterator
 591:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     rbegin() { return reverse_iterator(end()); }
 592:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 593:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 594:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read-only (constant) reverse iterator that points to the last
 595:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  element in the %list.  Iteration is done in reverse element order.
 596:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 597:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     const_reverse_iterator
 598:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     rbegin() const { return const_reverse_iterator(end()); }
 599:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 93


 600:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 601:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read/write reverse iterator that points to one before the
 602:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  first element in the %list.  Iteration is done in reverse element
 603:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  order.
 604:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 605:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     reverse_iterator
 606:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     rend() { return reverse_iterator(begin()); }
 607:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 608:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 609:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read-only (constant) reverse iterator that points to one
 610:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  before the first element in the %list.  Iteration is done in reverse
 611:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  element order.
 612:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 613:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     const_reverse_iterator
 614:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     rend() const
 615:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { return const_reverse_iterator(begin()); }
 616:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 617:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // [23.2.2.2] capacity
 618:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 619:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns true if the %list is empty.  (Thus begin() would equal end().)
 620:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 621:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     bool
 622:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     empty() const { return _M_node->_M_next == _M_node; }
 623:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 624:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**  Returns the number of elements in the %list.  */
 625:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     size_type
 626:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     size() const { return distance(begin(), end()); }
 627:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 628:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**  Returns the size() of the largest possible %list.  */
 629:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     size_type
 630:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     max_size() const { return size_type(-1); }
 631:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 632:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 633:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Resizes the %list to the specified number of elements.
 634:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  new_size  Number of elements the %list should contain.
 635:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  Data with which new elements should be populated.
 636:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 637:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will %resize the %list to the specified number of
 638:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  elements.  If the number is smaller than the %list's current size the
 639:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  %list is truncated, otherwise the %list is extended and new elements
 640:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  are populated with given data.
 641:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 642:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 643:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     resize(size_type __new_size, const value_type& __x);
 644:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 645:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 646:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Resizes the %list to the specified number of elements.
 647:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  new_size  Number of elements the %list should contain.
 648:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 649:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will resize the %list to the specified number of
 650:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  elements.  If the number is smaller than the %list's current size the
 651:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  %list is truncated, otherwise the %list is extended and new elements
 652:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  are default-constructed.
 653:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 654:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 655:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     resize(size_type __new_size) { this->resize(__new_size, value_type()); }
 656:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 94


 657:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // element access
 658:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 659:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read/write reference to the data at the first element of the
 660:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  %list.
 661:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 662:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     reference
 663:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     front() { return *begin(); }
 664:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 665:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 666:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read-only (constant) reference to the data at the first
 667:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  element of the %list.
 668:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 669:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     const_reference
 670:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     front() const { return *begin(); }
 671:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 672:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 673:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read/write reference to the data at the last element of the
 674:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  %list.
 675:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 676:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     reference
 677:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     back() { return *(--end()); }
 678:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 679:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 680:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Returns a read-only (constant) reference to the data at the last
 681:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  element of the %list.
 682:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 683:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     const_reference
 684:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     back() const { return *(--end()); }
 685:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 686:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // [23.2.2.3] modifiers
 687:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 688:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Add data to the front of the %list.
 689:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  Data to be added.
 690:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 691:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This is a typical stack operation.  The function creates an element at
 692:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  the front of the %list and assigns the given data to it.  Due to the
 693:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  nature of a %list this operation can be done in constant time, and
 694:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  does not invalidate iterators and references.
 695:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 696:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 697:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     push_front(const value_type& __x) { this->insert(begin(), __x); }
 698:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 699:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   #ifdef _GLIBCPP_DEPRECATED
 700:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 701:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Add data to the front of the %list.
 702:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 703:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This is a typical stack operation.  The function creates a
 704:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  default-constructed element at the front of the %list.  Due to the
 705:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  nature of a %list this operation can be done in constant time.  You
 706:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  should consider using push_front(value_type()) instead.
 707:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 708:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must
 709:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see
 710:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *        c++config.h.
 711:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 712:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 713:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     push_front() { this->insert(begin(), value_type()); }
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 95


 714:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   #endif
 715:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 716:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 717:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Removes first element.
 718:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 719:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This is a typical stack operation.  It shrinks the %list by one.
 720:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 721:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and only invalidates iterators/references to the element being
 722:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  removed.
 723:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 724:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Note that no data is returned, and if the first element's data is
 725:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  needed, it should be retrieved before pop_front() is called.
 726:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 727:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 728:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     pop_front() { this->erase(begin()); }
 729:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 730:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 731:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Add data to the end of the %list.
 732:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  Data to be added.
 733:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 734:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This is a typical stack operation.  The function creates an element at
 735:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  the end of the %list and assigns the given data to it.  Due to the
 736:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  nature of a %list this operation can be done in constant time, and
 737:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  does not invalidate iterators and references.
 738:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 739:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 740:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     push_back(const value_type& __x) { this->insert(end(), __x); }
 741:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 742:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   #ifdef _GLIBCPP_DEPRECATED
 743:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 744:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Add data to the end of the %list.
 745:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 746:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This is a typical stack operation.  The function creates a
 747:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  default-constructed element at the end of the %list.  Due to the nature
 748:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  of a %list this operation can be done in constant time.  You should
 749:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  consider using push_back(value_type()) instead.
 750:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 751:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must
 752:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see
 753:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *        c++config.h.
 754:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 755:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 756:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     push_back() { this->insert(end(), value_type()); }
 757:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   #endif
 758:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 759:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 760:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Removes last element.
 761:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 762:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This is a typical stack operation.  It shrinks the %list by one.
 763:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 764:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and only invalidates iterators/references to the element being
 765:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  removed.
 766:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 767:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Note that no data is returned, and if the last element's data is
 768:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  needed, it should be retrieved before pop_back() is called.
 769:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 770:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 96


 771:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     pop_back()
 772:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 773:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       iterator __tmp = end();
 774:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       this->erase(--__tmp);
 775:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 776:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 777:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 778:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Inserts given value into %list before specified iterator.
 779:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  position  An iterator into the %list.
 780:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  Data to be inserted.
 781:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @return  An iterator that points to the inserted data.
 782:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 783:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will insert a copy of the given value before the specified
 784:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  location.
 785:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 786:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and does not invalidate iterators and references.
 787:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 788:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     iterator
 789:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     insert(iterator __position, const value_type& __x);
 790:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 791:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   #ifdef _GLIBCPP_DEPRECATED
 792:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 793:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Inserts an element into the %list.
 794:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  position  An iterator into the %list.
 795:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @return  An iterator that points to the inserted element.
 796:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 797:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will insert a default-constructed element before the
 798:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  specified location.  You should consider using
 799:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  insert(position,value_type()) instead.
 800:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 801:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and does not invalidate iterators and references.
 802:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 803:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @note This was deprecated in 3.2 and will be removed in 3.4.  You must
 804:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *        define @c _GLIBCPP_DEPRECATED to make this visible in 3.2; see
 805:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *        c++config.h.
 806:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 807:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     iterator
 808:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     insert(iterator __position) { return insert(__position, value_type()); }
 809:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   #endif
 810:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 811:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 812:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Inserts a number of copies of given data into the %list.
 813:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  position  An iterator into the %list.
 814:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  n  Number of elements to be inserted.
 815:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  Data to be inserted.
 816:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 817:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will insert a specified number of copies of the given data
 818:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  before the location specified by @a position.
 819:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 820:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 821:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and does not invalidate iterators and references.
 822:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 823:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 824:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     insert(iterator __pos, size_type __n, const value_type& __x)
 825:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     { _M_fill_insert(__pos, __n, __x); }
 826:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 827:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 97


 828:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Inserts a range into the %list.
 829:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  pos  An iterator into the %list.
 830:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  first  An input iterator.
 831:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  last   An input iterator.
 832:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 833:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will insert copies of the data in the range [first,last)
 834:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  into the %list before the location specified by @a pos.
 835:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 836:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 837:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and does not invalidate iterators and references.
 838:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 839:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     template<typename _InputIterator>
 840:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       void
 841:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       insert(iterator __pos, _InputIterator __first, _InputIterator __last)
 842:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       {
 843:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         // Check whether it's an integral type.  If so, it's not an iterator.
 844:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
 845:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         _M_insert_dispatch(__pos, __first, __last, _Integral());
 846:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       }
 847:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 848:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 849:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Remove element at given position.
 850:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  position  Iterator pointing to element to be erased.
 851:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @return  An iterator pointing to the next element (or end()).
 852:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 853:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will erase the element at the given position and thus
 854:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  shorten the %list by one.
 855:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 856:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 857:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and only invalidates iterators/references to the element being
 858:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  removed.
 859:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  The user is also cautioned that
 860:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  this function only erases the element, and that if the element is itself
 861:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  a pointer, the pointed-to memory is not touched in any way.  Managing
 862:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  the pointer is the user's responsibilty.
 863:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 864:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     iterator
 865:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     erase(iterator __position);
 866:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 867:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 868:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Remove a range of elements.
 869:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  first  Iterator pointing to the first element to be erased.
 870:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  last  Iterator pointing to one past the last element to be
 871:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *                erased.
 872:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @return  An iterator pointing to the element pointed to by @a last
 873:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *           prior to erasing (or end()).
 874:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 875:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This function will erase the elements in the range [first,last) and
 876:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  shorten the %list accordingly.
 877:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 878:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Due to the nature of a %list this operation can be done in constant
 879:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  time, and only invalidates iterators/references to the element being
 880:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  removed.
 881:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  The user is also cautioned that
 882:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  this function only erases the elements, and that if the elements
 883:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  themselves are pointers, the pointed-to memory is not touched in any
 884:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  way.  Managing the pointer is the user's responsibilty.
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 98


 885:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 886:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     iterator
 887:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     erase(iterator __first, iterator __last)
 888:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     {
 889:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       while (__first != __last)
 890:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****         erase(__first++);
 891:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****       return __last;
 892:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     }
 893:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 894:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 895:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @brief  Swaps data with another %list.
 896:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @param  x  A %list of the same element and allocator types.
 897:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *
 898:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  This exchanges the elements between two lists in constant time.
 899:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  (It is only swapping a single pointer, so it should be quite fast.)
 900:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Note that the global std::swap() function is specialized such that
 901:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  std::swap(l1,l2) will feed to this function.
 902:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 903:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 904:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     swap(list& __x) { std::swap(_M_node, __x._M_node); }
 905:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 906:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 907:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  Erases all the elements.  Note that this function only erases the
 908:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  elements, and that if the elements themselves are pointers, the
 909:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  pointed-to memory is not touched in any way.  Managing the pointer is
 910:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  the user's responsibilty.
 911:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 912:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 913:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     clear() { _Base::__clear(); }
 914:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****   
 915:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     // [23.2.2.4] list operations
 916:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     /**
 917:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****      *  @doctodo
 918:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     */
 919:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_list.h ****     void
 6643              	LM193:
 6644 0000 55       		pushl	%ebp
 6645 0001 89E5     		movl	%esp, %ebp
 6646 0003 83EC08   		subl	$8, %esp
 6648              	LM194:
 6649              	LBB45:
 6650 0006 8B4508   		movl	8(%ebp), %eax
 6651 0009 890424   		movl	%eax, (%esp)
 6652 000c E8000000 		call	__ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EE7__clearEv
 6652      00
 6653 0011 C9       		leave
 6654 0012 C3       		ret
 6655              	LBE45:
 6656              	Lscope28:
 6666 0013 90       		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5clearEv,"x"
 6667              		.linkonce discard
 6668              		.align 2
 6671              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5clearEv
 6673              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5clearEv:
 6675              	Ltext7:
 604:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****    void
 605:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       pop_back()
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 99


 606:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       {
 607:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	--_M_finish;
 608:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	_Destroy(_M_finish);
 609:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       }
 610:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 611:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 612:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 613:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 614:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  x  Data to be inserted.
 615:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 616:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 617:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 618:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 619:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 620:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
 621:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 622:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       iterator
 623:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
 624:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 625:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** #ifdef _GLIBCPP_DEPRECATED
 626:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 627:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Inserts an element into the %vector.
 628:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 629:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted element.
 630:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 631:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will insert a default-constructed element
 632:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  before the specified location.  You should consider using
 633:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  insert(position,value_type()) instead.  Note that this kind
 634:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  of operation could be expensive for a vector and if it is
 635:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
 636:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 637:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @note This was deprecated in 3.2 and will be removed in 3.4.
 638:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  You must define @c _GLIBCPP_DEPRECATED to make this visible
 639:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  in 3.2; see c++config.h.
 640:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 641:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       iterator
 642:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       insert(iterator __position)
 643:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { return insert(__position, value_type()); }
 644:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** #endif
 645:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 646:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 647:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
 648:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  position  An iterator into the %vector.
 649:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  n  Number of elements to be inserted.
 650:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  x  Data to be inserted.
 651:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 652:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
 653:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
 654:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 655:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
 656:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
 657:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  consider using std::list.
 658:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 659:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 660:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       insert(iterator __pos, size_type __n, const value_type& __x)
 661:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       { _M_fill_insert(__pos, __n, __x); }
 662:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 100


 663:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 664:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
 665:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  pos  An iterator into the %vector.
 666:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  first  An input iterator.
 667:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  last   An input iterator.
 668:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 669:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
 670:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  [first,last) into the %vector before the location specified
 671:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  by @a pos.
 672:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 673:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
 674:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
 675:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  consider using std::list.
 676:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 677:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 678:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         void
 679:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         insert(iterator __pos, _InputIterator __first, _InputIterator __last)
 680:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         {
 681:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 682:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  typedef typename _Is_integer<_InputIterator>::_Integral _Integral;
 683:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	  _M_insert_dispatch(__pos, __first, __last, _Integral());
 684:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	}
 685:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 686:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 687:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Remove element at given position.
 688:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  position  Iterator pointing to element to be erased.
 689:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
 690:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 691:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
 692:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  shorten the %vector by one.
 693:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 694:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
 695:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
 696:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
 697:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
 698:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
 699:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the pointer is the user's responsibilty.
 700:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 701:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       iterator
 702:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       erase(iterator __position);
 703:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****   
 704:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 705:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
 706:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  first  Iterator pointing to the first element to be erased.
 707:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  last  Iterator pointing to one past the last element to be
 708:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *                erased.
 709:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a last
 710:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *           prior to erasing (or end()).
 711:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 712:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This function will erase the elements in the range [first,last) and
 713:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  shorten the %vector accordingly.
 714:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 715:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
 716:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
 717:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
 718:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
 719:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 101


 720:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibilty.
 721:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 722:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       iterator
 723:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       erase(iterator __first, iterator __last);
 724:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 725:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 726:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
 727:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @param  x  A %vector of the same element and allocator types.
 728:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *
 729:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
 730:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
 731:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
 732:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
 733:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 734:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 735:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       swap(vector& __x)
 736:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       {
 737:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	std::swap(_M_start, __x._M_start);
 738:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	std::swap(_M_finish, __x._M_finish);
 739:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h **** 	std::swap(_M_end_of_storage, __x._M_end_of_storage);
 740:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       }
 741:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 742:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 743:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
 744:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
 745:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
 746:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  the user's responsibilty.
 747:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 748:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       void
 749:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       clear() { erase(begin(), end()); }
 750:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       
 751:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****     protected:
 752:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       /**
 753:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @if maint
 754:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
 755:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
 756:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        *  @endif
 757:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****        */
 758:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
 759:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_vector.h ****         pointer
 6677              	LM195:
 6678 0000 55       		pushl	%ebp
 6679 0001 89E5     		movl	%esp, %ebp
 6680 0003 83EC18   		subl	$24, %esp
 6682              	LM196:
 6683              	LBB46:
 6684 0006 8B4508   		movl	8(%ebp), %eax
 6685 0009 890424   		movl	%eax, (%esp)
 6686 000c E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 6686      00
 6687 0011 8945FC   		movl	%eax, -4(%ebp)
 6688 0014 8B4508   		movl	8(%ebp), %eax
 6689 0017 890424   		movl	%eax, (%esp)
 6690 001a E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 6690      00
 6691 001f 8945F8   		movl	%eax, -8(%ebp)
 6692 0022 8B45FC   		movl	-4(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 102


 6693 0025 89442408 		movl	%eax, 8(%esp)
 6694 0029 8B45F8   		movl	-8(%ebp), %eax
 6695 002c 89442404 		movl	%eax, 4(%esp)
 6696 0030 8B4508   		movl	8(%ebp), %eax
 6697 0033 890424   		movl	%eax, (%esp)
 6698 0036 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_
 6698      00
 6699 003b C9       		leave
 6700 003c C3       		ret
 6701              	LBE46:
 6702              	Lscope29:
 6704 003d 909090   		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9push_backERKS1_,"x"
 6705              		.linkonce discard
 6706              		.align 2
 6710              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9push_backERKS1_
 6712              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9push_backERKS1_:
 6714              	Ltext8:
 6716              	LM197:
 6717 0000 55       		pushl	%ebp
 6718 0001 89E5     		movl	%esp, %ebp
 6719 0003 53       		pushl	%ebx
 6720 0004 83EC34   		subl	$52, %esp
 6722              	LM198:
 6723              	LBB47:
 6724 0007 8D5DE8   		leal	-24(%ebp), %ebx
 6725 000a 8D55D8   		leal	-40(%ebp), %edx
 6726 000d 8B4508   		movl	8(%ebp), %eax
 6727 0010 89442404 		movl	%eax, 4(%esp)
 6728 0014 891424   		movl	%edx, (%esp)
 6729 0017 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv
 6729      00
 6730 001c 83EC04   		subl	$4, %esp
 6731 001f 8D55D8   		leal	-40(%ebp), %edx
 6732 0022 8B450C   		movl	12(%ebp), %eax
 6733 0025 8944240C 		movl	%eax, 12(%esp)
 6734 0029 89542408 		movl	%edx, 8(%esp)
 6735 002d 8B4508   		movl	8(%ebp), %eax
 6736 0030 89442404 		movl	%eax, 4(%esp)
 6737 0034 891C24   		movl	%ebx, (%esp)
 6738 0037 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE6insertESt14_List_iteratorIS1_RS1_PS1_ERKS1_
 6738      00
 6739 003c 83EC04   		subl	$4, %esp
 6740 003f 8B5DFC   		movl	-4(%ebp), %ebx
 6741 0042 C9       		leave
 6742 0043 C3       		ret
 6743              	LBE47:
 6744              	Lscope30:
 6746              		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE10push_frontERKS1_,"x"
 6747              		.linkonce discard
 6748              		.align 2
 6752              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE10push_frontERKS1_
 6754              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE10push_frontERKS1_:
 6756              	LM199:
 6757 0000 55       		pushl	%ebp
 6758 0001 89E5     		movl	%esp, %ebp
 6759 0003 53       		pushl	%ebx
 6760 0004 83EC34   		subl	$52, %esp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 103


 6762              	LM200:
 6763              	LBB48:
 6764 0007 8D5DE8   		leal	-24(%ebp), %ebx
 6765 000a 8D55D8   		leal	-40(%ebp), %edx
 6766 000d 8B4508   		movl	8(%ebp), %eax
 6767 0010 89442404 		movl	%eax, 4(%esp)
 6768 0014 891424   		movl	%edx, (%esp)
 6769 0017 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv
 6769      00
 6770 001c 83EC04   		subl	$4, %esp
 6771 001f 8D55D8   		leal	-40(%ebp), %edx
 6772 0022 8B450C   		movl	12(%ebp), %eax
 6773 0025 8944240C 		movl	%eax, 12(%esp)
 6774 0029 89542408 		movl	%edx, 8(%esp)
 6775 002d 8B4508   		movl	8(%ebp), %eax
 6776 0030 89442404 		movl	%eax, 4(%esp)
 6777 0034 891C24   		movl	%ebx, (%esp)
 6778 0037 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE6insertESt14_List_iteratorIS1_RS1_PS1_ERKS1_
 6778      00
 6779 003c 83EC04   		subl	$4, %esp
 6780 003f 8B5DFC   		movl	-4(%ebp), %ebx
 6781 0042 C9       		leave
 6782 0043 C3       		ret
 6783              	LBE48:
 6784              	Lscope31:
 6786              		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9pop_frontEv,"x"
 6787              		.linkonce discard
 6788              		.align 2
 6791              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9pop_frontEv
 6793              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9pop_frontEv:
 6795              	LM201:
 6796 0000 55       		pushl	%ebp
 6797 0001 89E5     		movl	%esp, %ebp
 6798 0003 53       		pushl	%ebx
 6799 0004 83EC34   		subl	$52, %esp
 6801              	LM202:
 6802              	LBB49:
 6803 0007 8D5DE8   		leal	-24(%ebp), %ebx
 6804 000a 8D55D8   		leal	-40(%ebp), %edx
 6805 000d 8B4508   		movl	8(%ebp), %eax
 6806 0010 89442404 		movl	%eax, 4(%esp)
 6807 0014 891424   		movl	%edx, (%esp)
 6808 0017 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv
 6808      00
 6809 001c 83EC04   		subl	$4, %esp
 6810 001f 8D45D8   		leal	-40(%ebp), %eax
 6811 0022 89442408 		movl	%eax, 8(%esp)
 6812 0026 8B4508   		movl	8(%ebp), %eax
 6813 0029 89442404 		movl	%eax, 4(%esp)
 6814 002d 891C24   		movl	%ebx, (%esp)
 6815 0030 E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5eraseESt14_List_iteratorIS1_RS1_PS1_E
 6815      00
 6816 0035 83EC04   		subl	$4, %esp
 6817 0038 8B5DFC   		movl	-4(%ebp), %ebx
 6818 003b C9       		leave
 6819 003c C3       		ret
 6820              	LBE49:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 104


 6821              	Lscope32:
 6825 003d 909090   		.section	.text$_ZSt8_DestroyIPN10ThreadPool10ThreadDataEEvT_S3_,"x"
 6826              		.linkonce discard
 6827              		.align 2
 6831              	.globl __ZSt8_DestroyIPN10ThreadPool10ThreadDataEEvT_S3_
 6833              	__ZSt8_DestroyIPN10ThreadPool10ThreadDataEEvT_S3_:
 6835              	Ltext9:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 105


  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * representations about the suitability of this software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** /** @file stl_construct.h
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****  */
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** #ifndef _CPP_BITS_STL_CONSTRUCT_H
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** #define _CPP_BITS_STL_CONSTRUCT_H 1
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** #include <bits/type_traits.h>
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** #include <new>
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** namespace std
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** {
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   /**
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @if maint
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * object's constructor with an initializer.
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @endif
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    */
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   template <class _T1, class _T2>
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     inline void
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     { new (static_cast<void*>(__p)) _T1(__value); }
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   /**
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @if maint
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * object's default constructor (no initializers).
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @endif
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    */
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   template <class _T1>
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     inline void
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     _Construct(_T1* __p)
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     { new (static_cast<void*>(__p)) _T1(); }
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   /**
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @if maint
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * Destroy a range of objects with nontrivial destructors.  
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    *
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * This is a helper function used only by _Destroy().
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @endif
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    */
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   template <class _ForwardIterator>
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     inline void
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     __destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     { for ( ; __first != __last; ++__first) _Destroy(&*__first); }
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   /**
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @if maint
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * Destroy a range of objects with trivial destructors.  Since the destructors
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * are trivial, there's nothing to do and hopefully this function will be
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * entirely optimized away.
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 106


 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    *
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * This is a helper function used only by _Destroy().
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @endif
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    */
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   template <class _ForwardIterator> 
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     inline void
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     { }
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** 
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   /**
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @if maint
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @endif
 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    */
 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   template <class _Tp>
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     inline void
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   /**
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @if maint
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    * @endif
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****    */
 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****   template <class _ForwardIterator>
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     inline void
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     {
 6837              	LM203:
 6838 0000 55       		pushl	%ebp
 6839 0001 89E5     		movl	%esp, %ebp
 6840 0003 83EC18   		subl	$24, %esp
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h **** ast)
 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****     {
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****                        _Value_type;
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****       typedef typename __type_traits<_Value_type>::has_trivial_destructor
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_construct.h ****                        _Has_trivial_destructor;
 6842              	LM204:
 6843              	LBB50:
 6844 0006 C6442408 		movb	$0, 8(%esp)
 6844      00
 6845 000b 8B450C   		movl	12(%ebp), %eax
 6846 000e 89442404 		movl	%eax, 4(%esp)
 6847 0012 8B4508   		movl	8(%ebp), %eax
 6848 0015 890424   		movl	%eax, (%esp)
 6849 0018 E8000000 		call	__ZSt13__destroy_auxIPN10ThreadPool10ThreadDataEEvT_S3_12__false_type
 6849      00
 6850 001d C9       		leave
 6851 001e C3       		ret
 6852              	LBE50:
 6853              	Lscope33:
 6857              	.globl __ZTV10ThreadPool
 6858 001f 90       		.section	.rdata$_ZTV10ThreadPool,""
 6859              		.linkonce same_size
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 107


 6860              		.align 8
 6861              	__ZTV10ThreadPool:
 6862 0000 00000000 		.long	0
 6863 0004 00000000 		.long	__ZTI10ThreadPool
 6864 0008 1A050000 		.long	__ZN10ThreadPoolD1Ev
 6865 000c 3A060000 		.long	__ZN10ThreadPoolD0Ev
 6867              		.section	.text$_ZNSt19_List_iterator_base7_M_incrEv,"x"
 6868              		.linkonce discard
 6869              		.align 2
 6872              	.globl __ZNSt19_List_iterator_base7_M_incrEv
 6874              	__ZNSt19_List_iterator_base7_M_incrEv:
 6876              	Ltext10:
 6878              	LM205:
 6879 0000 55       		pushl	%ebp
 6880 0001 89E5     		movl	%esp, %ebp
 6882              	LM206:
 6883              	LBB51:
 6884 0003 8B5508   		movl	8(%ebp), %edx
 6885 0006 8B4508   		movl	8(%ebp), %eax
 6886 0009 8B00     		movl	(%eax), %eax
 6887 000b 8B00     		movl	(%eax), %eax
 6888 000d 8902     		movl	%eax, (%edx)
 6889 000f 5D       		popl	%ebp
 6890 0010 C3       		ret
 6891              	LBE51:
 6892              	Lscope34:
 6894 0011 909090   		.section	.text$_ZNKSt19_List_iterator_baseeqERKS_,"x"
 6895              		.linkonce discard
 6896              		.align 2
 6900              	.globl __ZNKSt19_List_iterator_baseeqERKS_
 6902              	__ZNKSt19_List_iterator_baseeqERKS_:
 6904              	LM207:
 6905 0000 55       		pushl	%ebp
 6906 0001 89E5     		movl	%esp, %ebp
 6908              	LM208:
 6909              	LBB52:
 6910 0003 8B4508   		movl	8(%ebp), %eax
 6911 0006 8B550C   		movl	12(%ebp), %edx
 6912 0009 8B00     		movl	(%eax), %eax
 6913 000b 3B02     		cmpl	(%edx), %eax
 6914 000d 0F94C0   		sete	%al
 6915 0010 0FB6C0   		movzbl	%al, %eax
 6916 0013 5D       		popl	%ebp
 6917 0014 C3       		ret
 6918              	LBE52:
 6919              	Lscope35:
 6921 0015 909090   		.section	.text$_ZNKSt19_List_iterator_baseneERKS_,"x"
 6922              		.linkonce discard
 6923              		.align 2
 6927              	.globl __ZNKSt19_List_iterator_baseneERKS_
 6929              	__ZNKSt19_List_iterator_baseneERKS_:
 6931              	LM209:
 6932 0000 55       		pushl	%ebp
 6933 0001 89E5     		movl	%esp, %ebp
 6935              	LM210:
 6936              	LBB53:
 6937 0003 8B4508   		movl	8(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 108


 6938 0006 8B550C   		movl	12(%ebp), %edx
 6939 0009 8B00     		movl	(%eax), %eax
 6940 000b 3B02     		cmpl	(%edx), %eax
 6941 000d 0F95C0   		setne	%al
 6942 0010 0FB6C0   		movzbl	%al, %eax
 6943 0013 5D       		popl	%ebp
 6944 0014 C3       		ret
 6945              	LBE53:
 6946              	Lscope36:
 6948 0015 909090   		.section	.text$_ZN10ThreadPool15CheckThreadStopEv,"x"
 6949              		.linkonce discard
 6950              		.align 2
 6953              	.globl __ZN10ThreadPool15CheckThreadStopEv
 6955              	__ZN10ThreadPool15CheckThreadStopEv:
 6957              	Ltext11:
   1:../../mmi/resource/inc/ThreadPool.h **** #pragma once
   2:../../mmi/resource/inc/ThreadPool.h **** // Filename     : ThreadPool.h
   3:../../mmi/resource/inc/ThreadPool.h **** // Author       : Siddharth Barman
   4:../../mmi/resource/inc/ThreadPool.h **** // Date         : 18 Sept 2005
   5:../../mmi/resource/inc/ThreadPool.h **** // Refactored   : 29 Sept 2010 by Greg Labute
   6:../../mmi/resource/inc/ThreadPool.h **** /* Description  : Defines ThreadPool class. How to use the Thread Pool. First
   7:../../mmi/resource/inc/ThreadPool.h ****                 create a ThreadPool object. The default constructor will
   8:../../mmi/resource/inc/ThreadPool.h ****                 create 10 threads in the pool. To defer creation of the pool
   9:../../mmi/resource/inc/ThreadPool.h ****                 pass a pool size of 0 to the constructor.
  10:../../mmi/resource/inc/ThreadPool.h **** 
  11:../../mmi/resource/inc/ThreadPool.h ****                 You can use two approaches while working with the thread
  12:../../mmi/resource/inc/ThreadPool.h ****                 pool.
  13:../../mmi/resource/inc/ThreadPool.h **** 
  14:../../mmi/resource/inc/ThreadPool.h ****                 1. To make use of the thread pool, you will need to first
  15:../../mmi/resource/inc/ThreadPool.h ****                 create a function having the following signature
  16:../../mmi/resource/inc/ThreadPool.h ****                 DWORD WINAPI ThreadProc(LPVOID); Check the CreateThread
  17:../../mmi/resource/inc/ThreadPool.h ****                 documentation in MSDN to get details. Add this function to
  18:../../mmi/resource/inc/ThreadPool.h ****                 the pool by calling the Run() method and pass in the function
  19:../../mmi/resource/inc/ThreadPool.h ****                 name and a void* pointer to any object you want. The pool will
  20:../../mmi/resource/inc/ThreadPool.h ****                 pick up the function passed into Run() method and execute as
  21:../../mmi/resource/inc/ThreadPool.h ****                 threads in the pool become free.
  22:../../mmi/resource/inc/ThreadPool.h **** 
  23:../../mmi/resource/inc/ThreadPool.h ****                 2. Instead of using a function pointer, you can use an object
  24:../../mmi/resource/inc/ThreadPool.h ****                 of a class which derives from IRunObject. Pass a pointer to
  25:../../mmi/resource/inc/ThreadPool.h ****                 this object in the Run() method of the thread pool. As threads
  26:../../mmi/resource/inc/ThreadPool.h ****                 become free, the thread pool will call the Run() method of you
  27:../../mmi/resource/inc/ThreadPool.h ****                 r class. You will also need to write a body for AutoDelete() f
  28:../../mmi/resource/inc/ThreadPool.h ****                 unction. If the return value is true, the thread pool will use
  29:../../mmi/resource/inc/ThreadPool.h ****                 'delete' to free the object you pass in. If it returns false,
  30:../../mmi/resource/inc/ThreadPool.h ****                 the thread pool will not do anything else to the object after
  31:../../mmi/resource/inc/ThreadPool.h ****                 calling the Run() function.
  32:../../mmi/resource/inc/ThreadPool.h **** 
  33:../../mmi/resource/inc/ThreadPool.h ****                 It is possible to destroy the pool whenever you want by
  34:../../mmi/resource/inc/ThreadPool.h ****                 calling the Destroy() method. If you want to create a new pool
  35:../../mmi/resource/inc/ThreadPool.h ****                 call the Create() method.
  36:../../mmi/resource/inc/ThreadPool.h **** 
  37:../../mmi/resource/inc/ThreadPool.h ****                 If this code works, it was written by Siddharth Barman, email
  38:../../mmi/resource/inc/ThreadPool.h ****                 siddharth_b@yahoo.com.
  39:../../mmi/resource/inc/ThreadPool.h ****                 _____ _                        _  ______           _
  40:../../mmi/resource/inc/ThreadPool.h ****                 |_   _| |                      | | | ___ \         | |
  41:../../mmi/resource/inc/ThreadPool.h ****                 | | | |__  _ __ ___  __ _  __| | | |_/ /__   ___ | |
  42:../../mmi/resource/inc/ThreadPool.h ****                 | | | '_ \| '__/ _ \/ _` |/ _` | |  __/ _ \ / _ \| |
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 109


  43:../../mmi/resource/inc/ThreadPool.h ****                 | | | | | | | |  __/ (_| | (_| | | | | (_) | (_) | |
  44:../../mmi/resource/inc/ThreadPool.h ****                 \_/ |_| |_|_|  \___|\__,_|\__,_| \_|  \___/ \___/|_|
  45:../../mmi/resource/inc/ThreadPool.h **** ------------------------------------------------------------------------------*/
  46:../../mmi/resource/inc/ThreadPool.h **** 
  47:../../mmi/resource/inc/ThreadPool.h **** #include <list>
  48:../../mmi/resource/inc/ThreadPool.h **** #include <vector>
  49:../../mmi/resource/inc/ThreadPool.h **** 
  50:../../mmi/resource/inc/ThreadPool.h **** class ThreadPool
  51:../../mmi/resource/inc/ThreadPool.h **** {
  52:../../mmi/resource/inc/ThreadPool.h **** public:
  53:../../mmi/resource/inc/ThreadPool.h ****     // PoolSize is the number of worker threads that will be created.
  54:../../mmi/resource/inc/ThreadPool.h ****     ThreadPool(int poolSize = 10, int waitTimeForThreadsToCompleteMS = 5000);
  55:../../mmi/resource/inc/ThreadPool.h ****     virtual ~ThreadPool();
  56:../../mmi/resource/inc/ThreadPool.h **** 
  57:../../mmi/resource/inc/ThreadPool.h ****     // Use this method to create the worker threads if you specified a poolSize
  58:../../mmi/resource/inc/ThreadPool.h ****     // of 0 in the constructor, or if you want to change the number of worker threads.
  59:../../mmi/resource/inc/ThreadPool.h ****     // Returns: true if no error.
  60:../../mmi/resource/inc/ThreadPool.h ****     bool Create(int poolSize);
  61:../../mmi/resource/inc/ThreadPool.h **** 
  62:../../mmi/resource/inc/ThreadPool.h ****     // Use this method to destroy the worker threads. The destructor of
  63:../../mmi/resource/inc/ThreadPool.h ****     // this class will destroy the threads automatically.
  64:../../mmi/resource/inc/ThreadPool.h ****     void Destroy();
  65:../../mmi/resource/inc/ThreadPool.h **** 
  66:../../mmi/resource/inc/ThreadPool.h ****     // How many worker threads are in the pool?
  67:../../mmi/resource/inc/ThreadPool.h ****     int GetPoolSize() { return m_threads.size(); }
  68:../../mmi/resource/inc/ThreadPool.h **** 
  69:../../mmi/resource/inc/ThreadPool.h ****     // This decides whether a job is added to the front or back of the queue.
  70:../../mmi/resource/inc/ThreadPool.h ****     enum ThreadPriority { High, Low };
  71:../../mmi/resource/inc/ThreadPool.h **** 
  72:../../mmi/resource/inc/ThreadPool.h ****     // Run a job
  73:../../mmi/resource/inc/ThreadPool.h ****     void Run(LPTHREAD_START_ROUTINE pFunc, LPVOID pData, ThreadPriority priority = Low)
  74:../../mmi/resource/inc/ThreadPool.h ****         { AddJobToQueue(pFunc, pData, NULL, priority); }
  75:../../mmi/resource/inc/ThreadPool.h ****     struct IRunObject
  76:../../mmi/resource/inc/ThreadPool.h ****     {
  77:../../mmi/resource/inc/ThreadPool.h ****         virtual ~IRunObject() {}
  78:../../mmi/resource/inc/ThreadPool.h ****         virtual void Run() = 0;
  79:../../mmi/resource/inc/ThreadPool.h ****         virtual bool AutoDelete() = 0;
  80:../../mmi/resource/inc/ThreadPool.h ****     };
  81:../../mmi/resource/inc/ThreadPool.h ****     void Run(IRunObject* job, ThreadPriority priority = Low)
  82:../../mmi/resource/inc/ThreadPool.h ****         { AddJobToQueue(NULL, NULL, job, priority); }
  83:../../mmi/resource/inc/ThreadPool.h **** 
  84:../../mmi/resource/inc/ThreadPool.h ****     // This is function expected to be called by thread functions or IRunObject
  85:../../mmi/resource/inc/ThreadPool.h ****     // derived. The expectation is that the code will check this 'property' of
  86:../../mmi/resource/inc/ThreadPool.h ****     // the pool and stop its processing as soon as possible.
  87:../../mmi/resource/inc/ThreadPool.h ****     bool CheckThreadStop()
  88:../../mmi/resource/inc/ThreadPool.h ****     { return WaitForSingleObject(m_hNotifyShutdown, 0) != WAIT_TIMEOUT; }
 6959              	LM211:
 6960 0000 55       		pushl	%ebp
 6961 0001 89E5     		movl	%esp, %ebp
 6962 0003 83EC18   		subl	$24, %esp
 6964              	LM212:
 6965              	LBB54:
 6966 0006 C7442404 		movl	$0, 4(%esp)
 6966      00000000 
 6967 000e 8B4508   		movl	8(%ebp), %eax
 6968 0011 8B4018   		movl	24(%eax), %eax
 6969 0014 890424   		movl	%eax, (%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 110


 6970 0017 E8000000 		call	_WaitForSingleObject@8
 6970      00
 6971 001c 83EC08   		subl	$8, %esp
 6972 001f 8945FC   		movl	%eax, -4(%ebp)
 6973 0022 817DFC02 		cmpl	$258, -4(%ebp)
 6973      010000
 6974 0029 0F95C0   		setne	%al
 6975 002c 0FB6C0   		movzbl	%al, %eax
 6976 002f 8945FC   		movl	%eax, -4(%ebp)
 6977 0032 8B45FC   		movl	-4(%ebp), %eax
 6978 0035 C9       		leave
 6979 0036 C3       		ret
 6980              	LBE54:
 6981              	Lscope37:
 6983 0037 90       		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EEC1ERKS2_,"x"
 6984              		.linkonce discard
 6985              		.align 2
 6989              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EEC1ERKS2_
 6991              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EEC1ERKS2_:
 6993              	Ltext12:
 6995              	LM213:
 6996 0000 55       		pushl	%ebp
 6997 0001 89E5     		movl	%esp, %ebp
 6998 0003 83EC08   		subl	$8, %esp
 7000              	LM214:
 7001              	LBB55:
 7002 0006 8B450C   		movl	12(%ebp), %eax
 7003 0009 89442404 		movl	%eax, 4(%esp)
 7004 000d 8B4508   		movl	8(%ebp), %eax
 7005 0010 890424   		movl	%eax, (%esp)
 7006 0013 E8000000 		call	__ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EEC2ERKS2_
 7006      00
 7007 0018 C9       		leave
 7008 0019 C3       		ret
 7009              	L212:
 7010              	L211:
 7011              	LBE55:
 7012              	Lscope38:
 7014 001a 9090     		.section	.text$_ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EEC2ERKS2_,"x"
 7015              		.linkonce discard
 7016              		.align 2
 7020              	.globl __ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EEC2ERKS2_
 7022              	__ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EEC2ERKS2_:
 7024              	LM215:
 7025 0000 55       		pushl	%ebp
 7026 0001 89E5     		movl	%esp, %ebp
 7027 0003 53       		pushl	%ebx
 7028 0004 83EC14   		subl	$20, %esp
 7030              	LM216:
 7031              	LBB56:
 7032 0007 8B450C   		movl	12(%ebp), %eax
 7033 000a 89442404 		movl	%eax, 4(%esp)
 7034 000e 8B4508   		movl	8(%ebp), %eax
 7035 0011 890424   		movl	%eax, (%esp)
 7036 0014 E8000000 		call	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EEC2ERKS2_
 7036      00
 7038              	LM217:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 111


 7039 0019 8B5D08   		movl	8(%ebp), %ebx
 7040 001c 8B4508   		movl	8(%ebp), %eax
 7041 001f 890424   		movl	%eax, (%esp)
 7042 0022 E8000000 		call	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_get_nodeEv
 7042      00
 7043 0027 8903     		movl	%eax, (%ebx)
 7045              	LM218:
 7046 0029 8B4508   		movl	8(%ebp), %eax
 7047 002c 8B10     		movl	(%eax), %edx
 7048 002e 8B4508   		movl	8(%ebp), %eax
 7049 0031 8B00     		movl	(%eax), %eax
 7050 0033 8902     		movl	%eax, (%edx)
 7052              	LM219:
 7053 0035 8B4508   		movl	8(%ebp), %eax
 7054 0038 8B10     		movl	(%eax), %edx
 7055 003a 8B4508   		movl	8(%ebp), %eax
 7056 003d 8B00     		movl	(%eax), %eax
 7057 003f 894204   		movl	%eax, 4(%edx)
 7058 0042 83C414   		addl	$20, %esp
 7059 0045 5B       		popl	%ebx
 7060 0046 5D       		popl	%ebp
 7061 0047 C3       		ret
 7062              	LBE56:
 7063              	Lscope39:
 7065              		.section	.text$_ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EEC2ERKS2_,"x"
 7066              		.linkonce discard
 7067              		.align 2
 7070              	.globl __ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EEC2ERKS2_
 7072              	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EEC2ERKS2_:
 7074              	LM220:
 7075 0000 55       		pushl	%ebp
 7076 0001 89E5     		movl	%esp, %ebp
 7078              	LM221:
 7079 0003 5D       		popl	%ebp
 7080 0004 C3       		ret
 7081              	Lscope40:
 7083 0005 909090   		.section	.text$_ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_get_nodeEv,"x"
 7084              		.linkonce discard
 7085              		.align 2
 7088              	.globl __ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_get_nodeEv
 7090              	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_get_nodeEv:
 7092              	LM222:
 7093 0000 55       		pushl	%ebp
 7094 0001 89E5     		movl	%esp, %ebp
 7095 0003 83EC08   		subl	$8, %esp
 7097              	LM223:
 7098              	LBB57:
 7099 0006 C7042401 		movl	$1, (%esp)
 7099      000000
 7100 000d E8000000 		call	__ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1
 7100      00
 7101 0012 C9       		leave
 7102 0013 C3       		ret
 7103              	LBE57:
 7104              	Lscope41:
 7106              		.section	.text$_ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_tem
 7107              		.linkonce discard
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 112


 7108              		.align 2
 7111              	.globl __ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb
 7113              	__ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1ELi0EE
 7115              	Ltext13:
 7117              	LM224:
 7118 0000 55       		pushl	%ebp
 7119 0001 89E5     		movl	%esp, %ebp
 7120 0003 83EC08   		subl	$8, %esp
 7122              	LM225:
 7123              	LBB58:
 7124 0006 C745FC00 		movl	$0, -4(%ebp)
 7124      000000
 7126              	LM226:
 7127 000d 837D0800 		cmpl	$0, 8(%ebp)
 7128 0011 741C     		je	L218
 7130              	LM227:
 7131 0013 8B4508   		movl	8(%ebp), %eax
 7132 0016 89C2     		movl	%eax, %edx
 7133 0018 C1E202   		sall	$2, %edx
 7134 001b 01C2     		addl	%eax, %edx
 7135 001d 8D049500 		leal	0(,%edx,4), %eax
 7135      000000
 7136 0024 890424   		movl	%eax, (%esp)
 7137 0027 E8000000 		call	__ZNSt24__default_alloc_templateILb1ELi0EE8allocateEj
 7137      00
 7138 002c 8945FC   		movl	%eax, -4(%ebp)
 7139              	L218:
 7141              	LM228:
 7142 002f 8B45FC   		movl	-4(%ebp), %eax
 7143 0032 C9       		leave
 7144 0033 C3       		ret
 7145              	LBE58:
 7149              	Lscope42:
 7151              		.section	.text$_ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EED2Ev,"x"
 7152              		.linkonce discard
 7153              		.align 2
 7156              	.globl __ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EED2Ev
 7158              	__ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EED2Ev:
 7160              	Ltext14:
 7162              	LM229:
 7163 0000 55       		pushl	%ebp
 7164 0001 89E5     		movl	%esp, %ebp
 7165 0003 83EC08   		subl	$8, %esp
 7167              	LM230:
 7168              	LBB59:
 7169 0006 8B4508   		movl	8(%ebp), %eax
 7170 0009 890424   		movl	%eax, (%esp)
 7171 000c E8000000 		call	__ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EE7__clearEv
 7171      00
 7173              	LM231:
 7174 0011 8B4508   		movl	8(%ebp), %eax
 7175 0014 8B00     		movl	(%eax), %eax
 7176 0016 89442404 		movl	%eax, 4(%esp)
 7177 001a 8B4508   		movl	8(%ebp), %eax
 7178 001d 890424   		movl	%eax, (%esp)
 7179 0020 E8000000 		call	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_nodeIS1_E
 7179      00
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 113


 7180 0025 C9       		leave
 7181 0026 C3       		ret
 7182              	LBE59:
 7183              	Lscope43:
 7185 0027 90       		.section	.text$_ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_
 7186              		.linkonce discard
 7187              		.align 2
 7191              	.globl __ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_nodeIS1_
 7193              	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_nodeIS1_E:
 7195              	LM232:
 7196 0000 55       		pushl	%ebp
 7197 0001 89E5     		movl	%esp, %ebp
 7198 0003 83EC08   		subl	$8, %esp
 7200              	LM233:
 7201              	LBB60:
 7202 0006 C7442404 		movl	$1, 4(%esp)
 7202      01000000 
 7203 000e 8B450C   		movl	12(%ebp), %eax
 7204 0011 890424   		movl	%eax, (%esp)
 7205 0014 E8000000 		call	__ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1
 7205      00
 7206 0019 C9       		leave
 7207 001a C3       		ret
 7208              	LBE60:
 7209              	Lscope44:
 7211 001b 90       		.section	.text$_ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_tem
 7212              		.linkonce discard
 7213              		.align 2
 7217              	.globl __ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb
 7219              	__ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1ELi0EE
 7221              	Ltext15:
 7223              	LM234:
 7224 0000 55       		pushl	%ebp
 7225 0001 89E5     		movl	%esp, %ebp
 7226 0003 83EC08   		subl	$8, %esp
 7228              	LM235:
 7229              	LBB61:
 7230 0006 837D0C00 		cmpl	$0, 12(%ebp)
 7231 000a 741C     		je	L223
 7232 000c 8B550C   		movl	12(%ebp), %edx
 7233 000f 89D0     		movl	%edx, %eax
 7234 0011 C1E002   		sall	$2, %eax
 7235 0014 01D0     		addl	%edx, %eax
 7236 0016 C1E002   		sall	$2, %eax
 7237 0019 89442404 		movl	%eax, 4(%esp)
 7238 001d 8B4508   		movl	8(%ebp), %eax
 7239 0020 890424   		movl	%eax, (%esp)
 7240 0023 E8000000 		call	__ZNSt24__default_alloc_templateILb1ELi0EE10deallocateEPvj
 7240      00
 7241              	L223:
 7242 0028 C9       		leave
 7243 0029 C3       		ret
 7244              	LBE61:
 7245              	Lscope45:
 7247 002a 9090     		.section	.text$_ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EE7__clearEv,"x"
 7248              		.linkonce discard
 7249              		.align 2
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 114


 7252              	.globl __ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EE7__clearEv
 7254              	__ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EE7__clearEv:
 7256              	Ltext16:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // List implementation (out of line) -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * Copyright (c) 1996,1997
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * representations about the suitability of this software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  */
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 115


  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** /** @file list.tcc
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  */
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** #ifndef __GLIBCPP_INTERNAL_LIST_TCC
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** #define __GLIBCPP_INTERNAL_LIST_TCC
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** 
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** namespace std
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** {
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****   template<typename _Tp, typename _Alloc>
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     void
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     _List_base<_Tp,_Alloc>::
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     __clear()
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     {
 7258              	LM236:
 7259 0000 55       		pushl	%ebp
 7260 0001 89E5     		movl	%esp, %ebp
 7261 0003 83EC18   		subl	$24, %esp
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** <_Node*>(_M_node->_M_next);
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****       while (__cur != _M_node)
 7263              	LM237:
 7264              	LBB62:
 7265 0006 8B4508   		movl	8(%ebp), %eax
 7266 0009 8B00     		movl	(%eax), %eax
 7267 000b 8B00     		movl	(%eax), %eax
 7268 000d 8945FC   		movl	%eax, -4(%ebp)
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     {
 7270              	LM238:
 7271              	L226:
 7272 0010 8B5508   		movl	8(%ebp), %edx
 7273 0013 8B45FC   		movl	-4(%ebp), %eax
 7274 0016 3B02     		cmpl	(%edx), %eax
 7275 0018 7502     		jne	L228
 7276 001a EB30     		jmp	L227
 7277              	L228:
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****        _Node* __tmp = __cur;
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****         __cur = static_cast<_Node*>(__cur->_M_next);
 7279              	LM239:
 7280              	LBB63:
 7281              	LBB64:
 7282 001c 8B45FC   		movl	-4(%ebp), %eax
 7283 001f 8945F8   		movl	%eax, -8(%ebp)
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****       _Destroy(&__tmp->_M_data);
 7285              	LM240:
 7286 0022 8B45FC   		movl	-4(%ebp), %eax
 7287 0025 8B00     		movl	(%eax), %eax
 7288 0027 8945FC   		movl	%eax, -4(%ebp)
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****        _M_put_node(__tmp);
 7290              	LM241:
 7291 002a 8B45F8   		movl	-8(%ebp), %eax
 7292 002d 83C008   		addl	$8, %eax
 7293 0030 890424   		movl	%eax, (%esp)
 7294 0033 E8000000 		call	__ZSt8_DestroyIN10ThreadPool7JobDataEEvPT_
 7294      00
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      }
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 116


 7296              	LM242:
 7297 0038 8B45F8   		movl	-8(%ebp), %eax
 7298 003b 89442404 		movl	%eax, 4(%esp)
 7299 003f 8B4508   		movl	8(%ebp), %eax
 7300 0042 890424   		movl	%eax, (%esp)
 7301 0045 E8000000 		call	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_nodeIS1_E
 7301      00
 7302              	LBE64:
 7303              	LBE63:
 7304 004a EBC4     		jmp	L226
 7305              	L227:
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      _M_node->_M_next = _M_node;
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****       _M_node->_M_prev = _M_node;
 7307              	LM243:
 7308 004c 8B4508   		movl	8(%ebp), %eax
 7309 004f 8B10     		movl	(%eax), %edx
 7310 0051 8B4508   		movl	8(%ebp), %eax
 7311 0054 8B00     		movl	(%eax), %eax
 7312 0056 8902     		movl	%eax, (%edx)
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****   }
 7314              	LM244:
 7315 0058 8B4508   		movl	8(%ebp), %eax
 7316 005b 8B10     		movl	(%eax), %edx
 7317 005d 8B4508   		movl	8(%ebp), %eax
 7318 0060 8B00     		movl	(%eax), %eax
 7319 0062 894204   		movl	%eax, 4(%edx)
 7320 0065 C9       		leave
 7321 0066 C3       		ret
 7322              	LBE62:
 7329              	Lscope46:
 7331 0067 90       		.section	.text$_ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1ERKS4_,"x"
 7332              		.linkonce discard
 7333              		.align 2
 7337              	.globl __ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1ERKS4_
 7339              	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1ERKS4_:
 7341              	Ltext17:
 7343              	LM245:
 7344 0000 55       		pushl	%ebp
 7345 0001 89E5     		movl	%esp, %ebp
 7346 0003 83EC08   		subl	$8, %esp
 7348              	LM246:
 7349              	LBB65:
 7350 0006 8B450C   		movl	12(%ebp), %eax
 7351 0009 8B00     		movl	(%eax), %eax
 7352 000b 89442404 		movl	%eax, 4(%esp)
 7353 000f 8B4508   		movl	8(%ebp), %eax
 7354 0012 890424   		movl	%eax, (%esp)
 7355 0015 E8000000 		call	__ZNSt19_List_iterator_baseC2EPSt15_List_node_base
 7355      00
 7356 001a C9       		leave
 7357 001b C3       		ret
 7358              	LBE65:
 7359              	Lscope47:
 7361              		.section	.text$_ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EEC2ERKS2_,"x"
 7362              		.linkonce discard
 7363              		.align 2
 7367              	.globl __ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EEC2ERKS2_
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 117


 7369              	__ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EEC2ERKS2_:
 7371              	Ltext18:
 7373              	LM247:
 7374 0000 55       		pushl	%ebp
 7375 0001 89E5     		movl	%esp, %ebp
 7376 0003 83EC08   		subl	$8, %esp
 7378              	LM248:
 7379              	LBB66:
 7380 0006 8B450C   		movl	12(%ebp), %eax
 7381 0009 89442404 		movl	%eax, 4(%esp)
 7382 000d 8B4508   		movl	8(%ebp), %eax
 7383 0010 890424   		movl	%eax, (%esp)
 7384 0013 E8000000 		call	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EEC2ERKS2_
 7384      00
 7385 0018 C9       		leave
 7386 0019 C3       		ret
 7387              	LBE66:
 7388              	Lscope48:
 7390 001a 9090     		.section	.text$_ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EEC2ERKS2_,"x"
 7391              		.linkonce discard
 7392              		.align 2
 7395              	.globl __ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EEC2ERKS2_
 7397              	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EEC2ERKS2_:
 7399              	LM249:
 7400 0000 55       		pushl	%ebp
 7401 0001 89E5     		movl	%esp, %ebp
 7403              	LM250:
 7404              	LBB67:
 7405 0003 8B4508   		movl	8(%ebp), %eax
 7406 0006 C7000000 		movl	$0, (%eax)
 7406      0000
 7407 000c 8B4508   		movl	8(%ebp), %eax
 7408 000f C7400400 		movl	$0, 4(%eax)
 7408      000000
 7409 0016 8B4508   		movl	8(%ebp), %eax
 7410 0019 C7400800 		movl	$0, 8(%eax)
 7410      000000
 7411 0020 5D       		popl	%ebp
 7412 0021 C3       		ret
 7413              	LBE67:
 7414              	Lscope49:
 7416 0022 9090     		.section	.text$_ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EED2Ev,"x"
 7417              		.linkonce discard
 7418              		.align 2
 7421              	.globl __ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EED2Ev
 7423              	__ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EED2Ev:
 7425              	LM251:
 7426 0000 55       		pushl	%ebp
 7427 0001 89E5     		movl	%esp, %ebp
 7428 0003 83EC18   		subl	$24, %esp
 7430              	LM252:
 7431              	LBB68:
 7432 0006 8B4D08   		movl	8(%ebp), %ecx
 7433 0009 8B4508   		movl	8(%ebp), %eax
 7434 000c 8B10     		movl	(%eax), %edx
 7435 000e 8B4108   		movl	8(%ecx), %eax
 7436 0011 29D0     		subl	%edx, %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 118


 7437 0013 C1F802   		sarl	$2, %eax
 7438 0016 69C0ABAA 		imull	$-1431655765, %eax, %eax
 7438      AAAA
 7439 001c 89442408 		movl	%eax, 8(%esp)
 7440 0020 8B4508   		movl	8(%ebp), %eax
 7441 0023 8B00     		movl	(%eax), %eax
 7442 0025 89442404 		movl	%eax, 4(%esp)
 7443 0029 8B4508   		movl	8(%ebp), %eax
 7444 002c 890424   		movl	%eax, (%esp)
 7445 002f E8000000 		call	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1_j
 7445      00
 7446 0034 C9       		leave
 7447 0035 C3       		ret
 7448              	LBE68:
 7449              	Lscope50:
 7451 0036 9090     		.section	.text$_ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1
 7452              		.linkonce discard
 7453              		.align 2
 7458              	.globl __ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1_j
 7460              	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1_j:
 7462              	LM253:
 7463 0000 55       		pushl	%ebp
 7464 0001 89E5     		movl	%esp, %ebp
 7465 0003 83EC08   		subl	$8, %esp
 7467              	LM254:
 7468              	LBB69:
 7469 0006 8B4510   		movl	16(%ebp), %eax
 7470 0009 89442404 		movl	%eax, 4(%esp)
 7471 000d 8B450C   		movl	12(%ebp), %eax
 7472 0010 890424   		movl	%eax, (%esp)
 7473 0013 E8000000 		call	__ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE10dea
 7473      00
 7474 0018 C9       		leave
 7475 0019 C3       		ret
 7476              	LBE69:
 7477              	Lscope51:
 7479 001a 9090     		.section	.text$_ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi
 7480              		.linkonce discard
 7481              		.align 2
 7485              	.globl __ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE10de
 7487              	__ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE10deallocat
 7489              	Ltext19:
 7491              	LM255:
 7492 0000 55       		pushl	%ebp
 7493 0001 89E5     		movl	%esp, %ebp
 7494 0003 83EC08   		subl	$8, %esp
 7496              	LM256:
 7497              	LBB70:
 7498 0006 837D0C00 		cmpl	$0, 12(%ebp)
 7499 000a 741B     		je	L236
 7500 000c 8B550C   		movl	12(%ebp), %edx
 7501 000f 89D0     		movl	%edx, %eax
 7502 0011 01C0     		addl	%eax, %eax
 7503 0013 01D0     		addl	%edx, %eax
 7504 0015 C1E002   		sall	$2, %eax
 7505 0018 89442404 		movl	%eax, 4(%esp)
 7506 001c 8B4508   		movl	8(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 119


 7507 001f 890424   		movl	%eax, (%esp)
 7508 0022 E8000000 		call	__ZNSt24__default_alloc_templateILb1ELi0EE10deallocateEPvj
 7508      00
 7509              	L236:
 7510 0027 C9       		leave
 7511 0028 C3       		ret
 7512              	LBE70:
 7513              	Lscope52:
 7515 0029 909090   		.section	.text$_ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_,"x"
 7516              		.linkonce discard
 7517              		.align 2
 7521              	.globl __ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_
 7523              	__ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_:
 7525              	Ltext20:
 7527              	LM257:
 7528 0000 55       		pushl	%ebp
 7529 0001 89E5     		movl	%esp, %ebp
 7530 0003 83EC18   		subl	$24, %esp
 7532              	LM258:
 7533              	LBB71:
 7534 0006 8B4508   		movl	8(%ebp), %eax
 7535 0009 89442404 		movl	%eax, 4(%esp)
 7536 000d C704240C 		movl	$12, (%esp)
 7536      000000
 7537 0014 E8000000 		call	__ZnwjPv
 7537      00
 7538 0019 8945FC   		movl	%eax, -4(%ebp)
 7539 001c 837DFC00 		cmpl	$0, -4(%ebp)
 7540 0020 741C     		je	L238
 7541 0022 8B550C   		movl	12(%ebp), %edx
 7542 0025 8B02     		movl	(%edx), %eax
 7543 0027 8B4DFC   		movl	-4(%ebp), %ecx
 7544 002a 8901     		movl	%eax, (%ecx)
 7545 002c 8B4204   		movl	4(%edx), %eax
 7546 002f 8B4DFC   		movl	-4(%ebp), %ecx
 7547 0032 894104   		movl	%eax, 4(%ecx)
 7548 0035 8B4208   		movl	8(%edx), %eax
 7549 0038 8B55FC   		movl	-4(%ebp), %edx
 7550 003b 894208   		movl	%eax, 8(%edx)
 7551              	L241:
 7552              	L238:
 7553 003e C9       		leave
 7554 003f C3       		ret
 7555              	LBE71:
 7556              	Lscope53:
 7558              		.section	.text$_ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC
 7559              		.linkonce discard
 7560              		.align 2
 7564              	.globl __ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 7566              	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_:
 7568              	Ltext21:
 7570              	LM259:
 7571 0000 55       		pushl	%ebp
 7572 0001 89E5     		movl	%esp, %ebp
 7573 0003 83EC08   		subl	$8, %esp
 7575              	LM260:
 7576              	LBB72:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 120


 7577 0006 8B4508   		movl	8(%ebp), %eax
 7578 0009 890424   		movl	%eax, (%esp)
 7579 000c E8000000 		call	__ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPS2_RS2_EC2Ev
 7579      00
 7580 0011 8B5508   		movl	8(%ebp), %edx
 7581 0014 8B450C   		movl	12(%ebp), %eax
 7582 0017 8B00     		movl	(%eax), %eax
 7583 0019 8902     		movl	%eax, (%edx)
 7584 001b C9       		leave
 7585 001c C3       		ret
 7586              	LBE72:
 7587              	Lscope54:
 7589 001d 909090   		.section	.text$_ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE
 7590              		.linkonce discard
 7591              		.align 2
 7594              	.globl __ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 7596              	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv:
 7598              	LM261:
 7599 0000 55       		pushl	%ebp
 7600 0001 89E5     		movl	%esp, %ebp
 7602              	LM262:
 7603              	LBB73:
 7604 0003 8B4508   		movl	8(%ebp), %eax
 7605 0006 5D       		popl	%ebp
 7606 0007 C3       		ret
 7607              	LBE73:
 7608              	Lscope55:
 7610              		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__norma
 7611              		.linkonce discard
 7612              		.align 2
 7617              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iterat
 7619              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_
 7621              	Ltext22:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // this file and link it with other files to produce an executable, this
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 121


  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * Copyright (c) 1996
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * representations about the suitability of this  software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** /** @file vector.tcc
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  */
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** #ifndef __GLIBCPP_INTERNAL_VECTOR_TCC
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** #define __GLIBCPP_INTERNAL_VECTOR_TCC
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** namespace std
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** {
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     void
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     reserve(size_type __n)
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (__n > this->max_size())
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	__throw_length_error("vector::reserve");
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (this->capacity() < __n)
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	{
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	  const size_type __old_size = size();
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n, _M_start, _M_finish);
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	  _Destroy(_M_start, _M_finish);
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	  _M_deallocate(_M_start, _M_end_of_storage - _M_start);
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	  _M_start = __tmp;
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	  _M_finish = __tmp + __old_size;
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	  _M_end_of_storage = _M_start + __n;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 122


  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** 	}
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     typename vector<_Tp,_Alloc>::iterator
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       size_type __n = __position - begin();
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (_M_finish != _M_end_of_storage && __position == end())
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       {
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _Construct(_M_finish, __x);
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         ++_M_finish;
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       }
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       else
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_insert_aux(__position, __x);
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       return begin() + __n;
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     typename vector<_Tp,_Alloc>::iterator
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     erase(iterator __position)
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (__position + 1 != end())
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         copy(__position + 1, end(), __position);
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       --_M_finish;
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       _Destroy(_M_finish);
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       return __position;
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     typename vector<_Tp,_Alloc>::iterator
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     erase(iterator __first, iterator __last)
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       iterator __i(copy(__last, end(), __first));
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       _Destroy(__i, end());
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       _M_finish = _M_finish - (__last - __first);
 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       return __first;
 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>&
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     operator=(const vector<_Tp,_Alloc>& __x)
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (&__x != this)
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       {
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         const size_type __xlen = __x.size();
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         if (__xlen > capacity())
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         {
 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           _Destroy(_M_start, _M_finish);
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           _M_deallocate(_M_start, _M_end_of_storage - _M_start);
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           _M_start = __tmp;
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           _M_end_of_storage = _M_start + __xlen;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 123


 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         }
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         else if (size() >= __xlen)
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         {
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           iterator __i(copy(__x.begin(), __x.end(), begin()));
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           _Destroy(__i, end());
 144:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         }
 145:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         else
 146:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         {
 147:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           copy(__x.begin(), __x.begin() + size(), _M_start);
 148:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           uninitialized_copy(__x.begin() + size(), __x.end(), _M_finish);
 149:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         }
 150:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_finish = _M_start + __xlen;
 151:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       }
 152:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       return *this;
 153:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
 154:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
 155:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 156:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     void
 157:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
 158:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 159:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
 160:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (__n > capacity())
 161:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       {
 162:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         vector __tmp(__n, __val, get_allocator());
 163:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         __tmp.swap(*this);
 164:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       }
 165:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       else if (__n > size())
 166:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       {
 167:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         fill(begin(), end(), __val);
 168:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_finish = uninitialized_fill_n(_M_finish, __n - size(), __val);
 169:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       }
 170:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       else
 171:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         erase(fill_n(begin(), __n, __val), end());
 172:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
 173:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
 174:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc> template<typename _InputIter>
 175:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     void
 176:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
 177:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     _M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)
 178:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
 179:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       iterator __cur(begin());
 180:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       for ( ; __first != __last && __cur != end(); ++__cur, ++__first)
 181:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         *__cur = *__first;
 182:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (__first == __last)
 183:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         erase(__cur, end());
 184:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       else
 185:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         insert(end(), __first, __last);
 186:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
 187:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
 188:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc> template<typename _ForwardIter>
 189:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     void
 190:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
 191:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     _M_assign_aux(_ForwardIter __first, _ForwardIter __last,
 192:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****                   forward_iterator_tag)
 193:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
 194:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       size_type __len = distance(__first, __last);
 195:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 124


 196:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       if (__len > capacity())
 197:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       {
 198:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 199:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _Destroy(_M_start, _M_finish);
 200:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_deallocate(_M_start, _M_end_of_storage - _M_start);
 201:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_start = __tmp;
 202:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_end_of_storage = _M_finish = _M_start + __len;
 203:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       }
 204:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       else if (size() >= __len)
 205:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       {
 206:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         iterator __new_finish(copy(__first, __last, _M_start));
 207:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _Destroy(__new_finish, end());
 208:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_finish = __new_finish.base();
 209:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       }
 210:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       else
 211:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       {
 212:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _ForwardIter __mid = __first;
 213:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         advance(__mid, size());
 214:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         copy(__first, __mid, _M_start);
 215:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_finish = uninitialized_copy(__mid, __last, _M_finish);
 216:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       }
 217:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     }
 218:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   
 219:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 220:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     void
 221:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     vector<_Tp,_Alloc>::
 222:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 223:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     {
 7623              	LM263:
 7624 0000 55       		pushl	%ebp
 7625 0001 89E5     		movl	%esp, %ebp
 7626 0003 57       		pushl	%edi
 7627 0004 56       		pushl	%esi
 7628 0005 53       		pushl	%ebx
 7629 0006 81ECAC00 		subl	$172, %esp
 7629      0000
 7630 000c C7458800 		movl	$___gxx_personality_sj0, -120(%ebp)
 7630      000000
 7631 0013 C7458C34 		movl	$LLSDA818, -116(%ebp)
 7631      000000
 7632 001a 8D4590   		leal	-112(%ebp), %eax
 7633 001d 8D55E8   		leal	-24(%ebp), %edx
 7634 0020 8910     		movl	%edx, (%eax)
 7635 0022 BA5D0200 		movl	$L257, %edx
 7635      00
 7636 0027 895004   		movl	%edx, 4(%eax)
 7637 002a 896008   		movl	%esp, 8(%eax)
 7638 002d 8D8570FF 		leal	-144(%ebp), %eax
 7638      FFFF
 7639 0033 890424   		movl	%eax, (%esp)
 7640 0036 E8000000 		call	__Unwind_SjLj_Register
 7640      00
 224:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc **** M_finish;
 7642              	LM264:
 7643              	LBB74:
 7644              	LBB75:
 7645 003b 8B4508   		movl	8(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 125


 7646 003e 8B5508   		movl	8(%ebp), %edx
 7647 0041 8B4004   		movl	4(%eax), %eax
 7648 0044 3B4208   		cmpl	8(%edx), %eax
 7649 0047 0F84AE00 		je	L246
 7649      0000
 225:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****        _Tp __x_copy = __x;
 226:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         copy_backward(__position, iterator(_M_finish-2), iterator(_M_finish-1));
 7651              	LM265:
 7652              	LBB76:
 7653 004d 8B4508   		movl	8(%ebp), %eax
 7654 0050 8B4004   		movl	4(%eax), %eax
 7655 0053 83E80C   		subl	$12, %eax
 7656 0056 89442404 		movl	%eax, 4(%esp)
 7657 005a 8B4508   		movl	8(%ebp), %eax
 7658 005d 8B4004   		movl	4(%eax), %eax
 7659 0060 890424   		movl	%eax, (%esp)
 7660 0063 E8000000 		call	__ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_
 7660      00
 227:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       *__position = __x_copy;
 7662              	LM266:
 7663 0068 8B4508   		movl	8(%ebp), %eax
 7664 006b 8340040C 		addl	$12, 4(%eax)
 228:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****      }
 7666              	LM267:
 7667 006f 8B5510   		movl	16(%ebp), %edx
 7668 0072 8B02     		movl	(%edx), %eax
 7669 0074 8945D8   		movl	%eax, -40(%ebp)
 7670 0077 8B4204   		movl	4(%edx), %eax
 7671 007a 8945DC   		movl	%eax, -36(%ebp)
 7672 007d 8B4208   		movl	8(%edx), %eax
 7673 0080 8945E0   		movl	%eax, -32(%ebp)
 229:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****      else
 7675              	LM268:
 7676 0083 8B4508   		movl	8(%ebp), %eax
 7677 0086 8B4004   		movl	4(%eax), %eax
 7678 0089 83E80C   		subl	$12, %eax
 7679 008c 8945D0   		movl	%eax, -48(%ebp)
 7680 008f 8D45D0   		leal	-48(%ebp), %eax
 7681 0092 89442404 		movl	%eax, 4(%esp)
 7682 0096 8D45D4   		leal	-44(%ebp), %eax
 7683 0099 890424   		movl	%eax, (%esp)
 7684 009c E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 7684      00
 7685 00a1 8B4508   		movl	8(%ebp), %eax
 7686 00a4 8B4004   		movl	4(%eax), %eax
 7687 00a7 83E818   		subl	$24, %eax
 7688 00aa 8945C8   		movl	%eax, -56(%ebp)
 7689 00ad 8D45C8   		leal	-56(%ebp), %eax
 7690 00b0 89442404 		movl	%eax, 4(%esp)
 7691 00b4 8D45CC   		leal	-52(%ebp), %eax
 7692 00b7 890424   		movl	%eax, (%esp)
 7693 00ba E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 7693      00
 7694 00bf 8B45D4   		movl	-44(%ebp), %eax
 7695 00c2 89442408 		movl	%eax, 8(%esp)
 7696 00c6 8B45CC   		movl	-52(%ebp), %eax
 7697 00c9 89442404 		movl	%eax, 4(%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 126


 7698 00cd 8B450C   		movl	12(%ebp), %eax
 7699 00d0 890424   		movl	%eax, (%esp)
 7700 00d3 E8000000 		call	__ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_S
 7700      00
 230:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****      {
 7702              	LM269:
 7703 00d8 8D450C   		leal	12(%ebp), %eax
 7704 00db 890424   		movl	%eax, (%esp)
 7705 00de E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv
 7705      00
 7706 00e3 89C2     		movl	%eax, %edx
 7707 00e5 8B45D8   		movl	-40(%ebp), %eax
 7708 00e8 8902     		movl	%eax, (%edx)
 7709 00ea 8B45DC   		movl	-36(%ebp), %eax
 7710 00ed 894204   		movl	%eax, 4(%edx)
 7711 00f0 8B45E0   		movl	-32(%ebp), %eax
 7712 00f3 894208   		movl	%eax, 8(%edx)
 7713              	LBE76:
 7714 00f6 E98B0200 		jmp	L245
 7714      00
 7715              	L246:
 231:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****        const size_type __old_size = size();
 232:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         const size_type __len = __old_size != 0 ? 2 * __old_size : 1;
 233:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         iterator __new_start(_M_allocate(__len));
 234:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         iterator __new_finish(__new_start);
 7717              	LM270:
 7718              	LBB77:
 7719 00fb 8B4508   		movl	8(%ebp), %eax
 7720 00fe 890424   		movl	%eax, (%esp)
 7721 0101 E8000000 		call	__ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE4sizeEv
 7721      00
 7722 0106 8945C4   		movl	%eax, -60(%ebp)
 235:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****     try
 7724              	LM271:
 7725 0109 837DC400 		cmpl	$0, -60(%ebp)
 7726 010d 740D     		je	L248
 7727 010f 8B45C4   		movl	-60(%ebp), %eax
 7728 0112 01C0     		addl	%eax, %eax
 7729 0114 89856CFF 		movl	%eax, -148(%ebp)
 7729      FFFF
 7730 011a EB0A     		jmp	L249
 7731              	L248:
 7732 011c C7856CFF 		movl	$1, -148(%ebp)
 7732      FFFF0100 
 7732      0000
 7733              	L249:
 7734 0126 8B856CFF 		movl	-148(%ebp), %eax
 7734      FFFF
 7735 012c 8945C0   		movl	%eax, -64(%ebp)
 236:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****          {
 7737              	LM272:
 7738 012f 8B45C0   		movl	-64(%ebp), %eax
 7739 0132 89442404 		movl	%eax, 4(%esp)
 7740 0136 8B4508   		movl	8(%ebp), %eax
 7741 0139 890424   		movl	%eax, (%esp)
 7742 013c C78574FF 		movl	$-1, -140(%ebp)
 7742      FFFFFFFF 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 127


 7742      FFFF
 7743 0146 E8000000 		call	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE11_M_allocateEj
 7743      00
 7744 014b 8945B8   		movl	%eax, -72(%ebp)
 7745 014e 8D45B8   		leal	-72(%ebp), %eax
 7746 0151 89442404 		movl	%eax, 4(%esp)
 7747 0155 8D45BC   		leal	-68(%ebp), %eax
 7748 0158 890424   		movl	%eax, (%esp)
 7749 015b E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 7749      00
 237:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****            __new_finish = uninitialized_copy(iterator(_M_start), __position,
 7751              	LM273:
 7752 0160 8B45BC   		movl	-68(%ebp), %eax
 7753 0163 8945B4   		movl	%eax, -76(%ebp)
 238:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****                                              __new_start);
 239:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****             _Construct(__new_finish.base(), __x);
 240:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****             ++__new_finish;
 7755              	LM274:
 7756 0166 8B4508   		movl	8(%ebp), %eax
 7757 0169 89442404 		movl	%eax, 4(%esp)
 7758 016d 8D45AC   		leal	-84(%ebp), %eax
 7759 0170 890424   		movl	%eax, (%esp)
 7760 0173 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 7760      00
 7761 0178 8B45BC   		movl	-68(%ebp), %eax
 7762 017b 89442408 		movl	%eax, 8(%esp)
 7763 017f 8B450C   		movl	12(%ebp), %eax
 7764 0182 89442404 		movl	%eax, 4(%esp)
 7765 0186 8B45AC   		movl	-84(%ebp), %eax
 7766 0189 890424   		movl	%eax, (%esp)
 7767 018c C78574FF 		movl	$2, -140(%ebp)
 7767      FFFF0200 
 7767      0000
 7768 0196 E8000000 		call	__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vector
 7768      00
 7769 019b 8945B0   		movl	%eax, -80(%ebp)
 7770 019e 8B45B0   		movl	-80(%ebp), %eax
 7771 01a1 8945B4   		movl	%eax, -76(%ebp)
 241:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****          __new_finish = uninitialized_copy(__position, iterator(_M_finish),
 242:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****                                               __new_finish);
 7773              	LM275:
 7774 01a4 8D45B4   		leal	-76(%ebp), %eax
 7775 01a7 890424   		movl	%eax, (%esp)
 7776 01aa E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 7776      00
 7777 01af 89C2     		movl	%eax, %edx
 7778 01b1 8B4510   		movl	16(%ebp), %eax
 7779 01b4 89442404 		movl	%eax, 4(%esp)
 7780 01b8 8B02     		movl	(%edx), %eax
 7781 01ba 890424   		movl	%eax, (%esp)
 7782 01bd E8000000 		call	__ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_
 7782      00
 243:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         }
 7784              	LM276:
 7785 01c2 8D45B4   		leal	-76(%ebp), %eax
 7786 01c5 890424   		movl	%eax, (%esp)
 7787 01c8 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 128


 7787      00
 244:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****        catch(...)
 7789              	LM277:
 7790 01cd 8B4508   		movl	8(%ebp), %eax
 7791 01d0 83C004   		addl	$4, %eax
 7792 01d3 89442404 		movl	%eax, 4(%esp)
 7793 01d7 8D45A4   		leal	-92(%ebp), %eax
 7794 01da 890424   		movl	%eax, (%esp)
 7795 01dd E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 7795      00
 7796 01e2 8B45B4   		movl	-76(%ebp), %eax
 7797 01e5 89442408 		movl	%eax, 8(%esp)
 7798 01e9 8B45A4   		movl	-92(%ebp), %eax
 7799 01ec 89442404 		movl	%eax, 4(%esp)
 7800 01f0 8B450C   		movl	12(%ebp), %eax
 7801 01f3 890424   		movl	%eax, (%esp)
 7802 01f6 E8000000 		call	__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vector
 7802      00
 7803 01fb 8945A8   		movl	%eax, -88(%ebp)
 7804 01fe 8B45A8   		movl	-88(%ebp), %eax
 7805 0201 8945B4   		movl	%eax, -76(%ebp)
 7806 0204 E9AD0000 		jmp	L250
 7806      00
 245:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****          {
 246:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****             _Destroy(__new_start,__new_finish);
 247:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****             _M_deallocate(__new_start.base(),__len);
 7808              	LM278:
 7809              	L256:
 7810              	L251:
 7811 0209 8B9568FF 		movl	-152(%ebp), %edx
 7811      FFFF
 7812 020f 891424   		movl	%edx, (%esp)
 7813 0212 E8000000 		call	___cxa_begin_catch
 7813      00
 248:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****          __throw_exception_again;
 249:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****           }
 7815              	LM279:
 7816 0217 8B45B4   		movl	-76(%ebp), %eax
 7817 021a 89442404 		movl	%eax, 4(%esp)
 7818 021e 8B45BC   		movl	-68(%ebp), %eax
 7819 0221 890424   		movl	%eax, (%esp)
 7820 0224 E8000000 		call	__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_E
 7820      00
 250:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       _Destroy(begin(), end());
 7822              	LM280:
 7823 0229 8D45BC   		leal	-68(%ebp), %eax
 7824 022c 890424   		movl	%eax, (%esp)
 7825 022f E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 7825      00
 7826 0234 89C2     		movl	%eax, %edx
 7827 0236 8B45C0   		movl	-64(%ebp), %eax
 7828 0239 89442408 		movl	%eax, 8(%esp)
 7829 023d 8B02     		movl	(%edx), %eax
 7830 023f 89442404 		movl	%eax, 4(%esp)
 7831 0243 8B4508   		movl	8(%ebp), %eax
 7832 0246 890424   		movl	%eax, (%esp)
 7833 0249 C78574FF 		movl	$1, -140(%ebp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 129


 7833      FFFF0100 
 7833      0000
 7834 0253 E8000000 		call	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1_j
 7834      00
 251:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****        _M_deallocate(_M_start, _M_end_of_storage - _M_start);
 7836              	LM281:
 7837 0258 E8000000 		call	___cxa_rethrow
 7837      00
 7838              	L257:
 7839 025d 8D6D18   		leal	24(%ebp), %ebp
 7840 0260 8B8574FF 		movl	-140(%ebp), %eax
 7840      FFFF
 7841 0266 8B9578FF 		movl	-136(%ebp), %edx
 7841      FFFF
 7842 026c 899568FF 		movl	%edx, -152(%ebp)
 7842      FFFF
 7843 0272 83F801   		cmpl	$1, %eax
 7844 0275 7492     		je	L256
 7845              	L252:
 7846 0277 8B8568FF 		movl	-152(%ebp), %eax
 7846      FFFF
 7847 027d 898564FF 		movl	%eax, -156(%ebp)
 7847      FFFF
 7848 0283 C78574FF 		movl	$0, -140(%ebp)
 7848      FFFF0000 
 7848      0000
 7849 028d E8000000 		call	___cxa_end_catch
 7849      00
 7850 0292 8B9564FF 		movl	-156(%ebp), %edx
 7850      FFFF
 7851 0298 899568FF 		movl	%edx, -152(%ebp)
 7851      FFFF
 7852              	L254:
 7853 029e 8B8568FF 		movl	-152(%ebp), %eax
 7853      FFFF
 7854 02a4 890424   		movl	%eax, (%esp)
 7855 02a7 C78574FF 		movl	$-1, -140(%ebp)
 7855      FFFFFFFF 
 7855      FFFF
 7856 02b1 E8000000 		call	__Unwind_SjLj_Resume
 7856      00
 7857              	L250:
 252:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****        _M_start = __new_start.base();
 253:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****         _M_finish = __new_finish.base();
 7859              	LM282:
 7860 02b6 8B4508   		movl	8(%ebp), %eax
 7861 02b9 890424   		movl	%eax, (%esp)
 7862 02bc E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 7862      00
 7863 02c1 8945A0   		movl	%eax, -96(%ebp)
 7864 02c4 8B4508   		movl	8(%ebp), %eax
 7865 02c7 890424   		movl	%eax, (%esp)
 7866 02ca E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 7866      00
 7867 02cf 89459C   		movl	%eax, -100(%ebp)
 7868 02d2 8B45A0   		movl	-96(%ebp), %eax
 7869 02d5 89442404 		movl	%eax, 4(%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 130


 7870 02d9 8B459C   		movl	-100(%ebp), %eax
 7871 02dc 890424   		movl	%eax, (%esp)
 7872 02df E8000000 		call	__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_E
 7872      00
 254:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****       _M_end_of_storage = __new_start.base() + __len;
 7874              	LM283:
 7875 02e4 8B4D08   		movl	8(%ebp), %ecx
 7876 02e7 8B4508   		movl	8(%ebp), %eax
 7877 02ea 8B10     		movl	(%eax), %edx
 7878 02ec 8B4108   		movl	8(%ecx), %eax
 7879 02ef 29D0     		subl	%edx, %eax
 7880 02f1 C1F802   		sarl	$2, %eax
 7881 02f4 69C0ABAA 		imull	$-1431655765, %eax, %eax
 7881      AAAA
 7882 02fa 89442408 		movl	%eax, 8(%esp)
 7883 02fe 8B4508   		movl	8(%ebp), %eax
 7884 0301 8B00     		movl	(%eax), %eax
 7885 0303 89442404 		movl	%eax, 4(%esp)
 7886 0307 8B4508   		movl	8(%ebp), %eax
 7887 030a 890424   		movl	%eax, (%esp)
 7888 030d C78574FF 		movl	$-1, -140(%ebp)
 7888      FFFFFFFF 
 7888      FFFF
 7889 0317 E8000000 		call	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1_j
 7889      00
 255:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****      }
 7891              	LM284:
 7892 031c 8B5508   		movl	8(%ebp), %edx
 7893 031f 899560FF 		movl	%edx, -160(%ebp)
 7893      FFFF
 7894 0325 8D45BC   		leal	-68(%ebp), %eax
 7895 0328 890424   		movl	%eax, (%esp)
 7896 032b E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 7896      00
 7897 0330 8B00     		movl	(%eax), %eax
 7898 0332 8B9560FF 		movl	-160(%ebp), %edx
 7898      FFFF
 7899 0338 8902     		movl	%eax, (%edx)
 256:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****    }
 7901              	LM285:
 7902 033a 8B4508   		movl	8(%ebp), %eax
 7903 033d 89855CFF 		movl	%eax, -164(%ebp)
 7903      FFFF
 7904 0343 8D45B4   		leal	-76(%ebp), %eax
 7905 0346 890424   		movl	%eax, (%esp)
 7906 0349 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 7906      00
 7907 034e 8B00     		movl	(%eax), %eax
 7908 0350 8B955CFF 		movl	-164(%ebp), %edx
 7908      FFFF
 7909 0356 894204   		movl	%eax, 4(%edx)
 257:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/vector.tcc ****  
 7911              	LM286:
 7912 0359 8B4508   		movl	8(%ebp), %eax
 7913 035c 898558FF 		movl	%eax, -168(%ebp)
 7913      FFFF
 7914 0362 8D45BC   		leal	-68(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 131


 7915 0365 890424   		movl	%eax, (%esp)
 7916 0368 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 7916      00
 7917 036d 89C1     		movl	%eax, %ecx
 7918 036f 8B55C0   		movl	-64(%ebp), %edx
 7919 0372 89D0     		movl	%edx, %eax
 7920 0374 01C0     		addl	%eax, %eax
 7921 0376 01D0     		addl	%edx, %eax
 7922 0378 C1E002   		sall	$2, %eax
 7923 037b 0301     		addl	(%ecx), %eax
 7924 037d 8B9558FF 		movl	-168(%ebp), %edx
 7924      FFFF
 7925 0383 894208   		movl	%eax, 8(%edx)
 7926              	L245:
 7927 0386 8D8570FF 		leal	-144(%ebp), %eax
 7927      FFFF
 7928 038c 890424   		movl	%eax, (%esp)
 7929 038f E8000000 		call	__Unwind_SjLj_Unregister
 7929      00
 7930 0394 81C4AC00 		addl	$172, %esp
 7930      0000
 7931 039a 5B       		popl	%ebx
 7932 039b 5E       		popl	%esi
 7933 039c 5F       		popl	%edi
 7934 039d 5D       		popl	%ebp
 7935 039e C3       		ret
 7936              	LBE77:
 7937              	LBE75:
 7938              	LBE74:
 7939              		.section	.gcc_except_table,""
 7940 0032 0000     		.align 4
 7941              	LLSDA818:
 7942 0034 FF       		.byte	0xff
 7943 0035 00       		.byte	0x0
 7944 0036 0D       		.uleb128 LLSDATT818-LLSDATTD818
 7945              	LLSDATTD818:
 7946 0037 01       		.byte	0x1
 7947 0038 04       		.uleb128 LLSDACSE818-LLSDACSB818
 7948              	LLSDACSB818:
 7949 0039 00       		.uleb128 0x0
 7950 003a 00       		.uleb128 0x0
 7951 003b 01       		.uleb128 0x1
 7952 003c 01       		.uleb128 0x1
 7953              	LLSDACSE818:
 7954 003d 01       		.byte	0x1
 7955 003e 00       		.byte	0x0
 7956 003f 00       		.align 4
 7957 0040 00000000 		.long	0
 7958              	LLSDATT818:
 7959              		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__norma
 7960              		.linkonce discard
 7970              	Lscope56:
 7972 039f 90       		.section	.text$_ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E,"x"
 7973              		.linkonce discard
 7974              		.align 2
 7978              	.globl __ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E
 7980              	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 132


 7982              	Ltext23:
 7984              	LM287:
 7985 0000 55       		pushl	%ebp
 7986 0001 89E5     		movl	%esp, %ebp
 7987 0003 83EC08   		subl	$8, %esp
 7989              	LM288:
 7990              	LBB78:
 7991 0006 8B450C   		movl	12(%ebp), %eax
 7992 0009 89442404 		movl	%eax, 4(%esp)
 7993 000d 8B4508   		movl	8(%ebp), %eax
 7994 0010 890424   		movl	%eax, (%esp)
 7995 0013 E8000000 		call	__ZNSt19_List_iterator_baseC2EPSt15_List_node_base
 7995      00
 7996 0018 C9       		leave
 7997 0019 C3       		ret
 7998              	LBE78:
 7999              	Lscope57:
 8001 001a 9090     		.section	.text$_ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EdeEv,"x"
 8002              		.linkonce discard
 8003              		.align 2
 8006              	.globl __ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EdeEv
 8008              	__ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EdeEv:
 8010              	LM289:
 8011 0000 55       		pushl	%ebp
 8012 0001 89E5     		movl	%esp, %ebp
 8014              	LM290:
 8015              	LBB79:
 8016 0003 8B4508   		movl	8(%ebp), %eax
 8017 0006 8B00     		movl	(%eax), %eax
 8018 0008 83C008   		addl	$8, %eax
 8019 000b 5D       		popl	%ebp
 8020 000c C3       		ret
 8021              	LBE79:
 8022              	Lscope58:
 8024 000d 909090   		.section	.text$_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS
 8025              		.linkonce discard
 8026              		.align 2
 8030              	.globl __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_
 8032              	__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEEEvT
 8034              	Ltext24:
 8036              	LM291:
 8037 0000 55       		pushl	%ebp
 8038 0001 89E5     		movl	%esp, %ebp
 8039 0003 83EC18   		subl	$24, %esp
 8041              	LM292:
 8042              	LBB80:
 8043 0006 C6442408 		movb	$0, 8(%esp)
 8043      00
 8044 000b 8B450C   		movl	12(%ebp), %eax
 8045 000e 89442404 		movl	%eax, 4(%esp)
 8046 0012 8B4508   		movl	8(%ebp), %eax
 8047 0015 890424   		movl	%eax, (%esp)
 8048 0018 E8000000 		call	__ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_S
 8048      00
 8049 001d C9       		leave
 8050 001e C3       		ret
 8051              	LBE80:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 133


 8052              	Lscope59:
 8054 001f 90       		.section	.text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5eraseEN9__gnu_cxx17__normal_iterato
 8055              		.linkonce discard
 8056              		.align 2
 8061              	.globl __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3
 8063              	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_:
 8065              	Ltext25:
 8067              	LM293:
 8068 0000 55       		pushl	%ebp
 8069 0001 89E5     		movl	%esp, %ebp
 8070 0003 56       		pushl	%esi
 8071 0004 53       		pushl	%ebx
 8072 0005 83EC20   		subl	$32, %esp
 8074              	LM294:
 8075              	LBB81:
 8076 0008 8B4508   		movl	8(%ebp), %eax
 8077 000b 890424   		movl	%eax, (%esp)
 8078 000e E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 8078      00
 8079 0013 8945F0   		movl	%eax, -16(%ebp)
 8080 0016 8B450C   		movl	12(%ebp), %eax
 8081 0019 89442408 		movl	%eax, 8(%esp)
 8082 001d 8B45F0   		movl	-16(%ebp), %eax
 8083 0020 89442404 		movl	%eax, 4(%esp)
 8084 0024 8B4510   		movl	16(%ebp), %eax
 8085 0027 890424   		movl	%eax, (%esp)
 8086 002a E8000000 		call	__ZSt4copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES
 8086      00
 8087 002f 8945F4   		movl	%eax, -12(%ebp)
 8089              	LM295:
 8090 0032 8B4508   		movl	8(%ebp), %eax
 8091 0035 890424   		movl	%eax, (%esp)
 8092 0038 E8000000 		call	__ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 8092      00
 8093 003d 8945EC   		movl	%eax, -20(%ebp)
 8094 0040 8B45EC   		movl	-20(%ebp), %eax
 8095 0043 89442404 		movl	%eax, 4(%esp)
 8096 0047 8B45F4   		movl	-12(%ebp), %eax
 8097 004a 890424   		movl	%eax, (%esp)
 8098 004d E8000000 		call	__ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_E
 8098      00
 8100              	LM296:
 8101 0052 8B5D08   		movl	8(%ebp), %ebx
 8102 0055 8B7508   		movl	8(%ebp), %esi
 8103 0058 8D450C   		leal	12(%ebp), %eax
 8104 005b 89442404 		movl	%eax, 4(%esp)
 8105 005f 8D4510   		leal	16(%ebp), %eax
 8106 0062 890424   		movl	%eax, (%esp)
 8107 0065 E8000000 		call	__ZN9__gnu_cxxmiIPN10ThreadPool10ThreadDataES3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorI
 8107      00
 8108 006a 89C2     		movl	%eax, %edx
 8109 006c 89D0     		movl	%edx, %eax
 8110 006e 01C0     		addl	%eax, %eax
 8111 0070 01D0     		addl	%edx, %eax
 8112 0072 8D148500 		leal	0(,%eax,4), %edx
 8112      000000
 8113 0079 8B4604   		movl	4(%esi), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 134


 8114 007c 29D0     		subl	%edx, %eax
 8115 007e 894304   		movl	%eax, 4(%ebx)
 8117              	LM297:
 8118 0081 8B450C   		movl	12(%ebp), %eax
 8119 0084 83C420   		addl	$32, %esp
 8120 0087 5B       		popl	%ebx
 8121 0088 5E       		popl	%esi
 8122 0089 5D       		popl	%ebp
 8123 008a C3       		ret
 8124              	LBE81:
 8128              	Lscope60:
 8130 008b 90       		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE6insertESt14_List_iteratorIS1_RS1_PS1_ERKS
 8131              		.linkonce discard
 8132              		.align 2
 8137              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE6insertESt14_List_iteratorIS1_RS1_PS1_ERKS1_
 8139              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE6insertESt14_List_iteratorIS1_RS1_PS1_ERKS1_:
 8141              	Ltext26:
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****   template<typename _Tp, typename _Alloc>
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     typename list<_Tp,_Alloc>::iterator
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     list<_Tp,_Alloc>::
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     insert(iterator __position, const value_type& __x)
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     {
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****       _Node* __tmp = _M_create_node(__x);
 8143              	LM298:
 8144 0000 55       		pushl	%ebp
 8145 0001 89E5     		movl	%esp, %ebp
 8146 0003 56       		pushl	%esi
 8147 0004 53       		pushl	%ebx
 8148 0005 83EC10   		subl	$16, %esp
 8149 0008 8B7508   		movl	8(%ebp), %esi
 8150 000b 8B5D10   		movl	16(%ebp), %ebx
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** _tmp->_M_next = __position._M_node;
 8152              	LM299:
 8153              	LBB82:
 8154 000e 8B4514   		movl	20(%ebp), %eax
 8155 0011 89442404 		movl	%eax, 4(%esp)
 8156 0015 8B450C   		movl	12(%ebp), %eax
 8157 0018 890424   		movl	%eax, (%esp)
 8158 001b E8000000 		call	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE14_M_create_nodeERKS1_
 8158      00
 8159 0020 8945F4   		movl	%eax, -12(%ebp)
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      __tmp->_M_prev = __position._M_node->_M_prev;
 8161              	LM300:
 8162 0023 8B55F4   		movl	-12(%ebp), %edx
 8163 0026 8B03     		movl	(%ebx), %eax
 8164 0028 8902     		movl	%eax, (%edx)
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      __position._M_node->_M_prev->_M_next = __tmp;
 8166              	LM301:
 8167 002a 8B55F4   		movl	-12(%ebp), %edx
 8168 002d 8B03     		movl	(%ebx), %eax
 8169 002f 8B4004   		movl	4(%eax), %eax
 8170 0032 894204   		movl	%eax, 4(%edx)
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      __position._M_node->_M_prev = __tmp;
 8172              	LM302:
 8173 0035 8B03     		movl	(%ebx), %eax
 8174 0037 8B5004   		movl	4(%eax), %edx
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 135


 8175 003a 8B45F4   		movl	-12(%ebp), %eax
 8176 003d 8902     		movl	%eax, (%edx)
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      return __tmp;
 8178              	LM303:
 8179 003f 8B13     		movl	(%ebx), %edx
 8180 0041 8B45F4   		movl	-12(%ebp), %eax
 8181 0044 894204   		movl	%eax, 4(%edx)
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****    }
 8183              	LM304:
 8184 0047 8B45F4   		movl	-12(%ebp), %eax
 8185 004a 89442404 		movl	%eax, 4(%esp)
 8186 004e 893424   		movl	%esi, (%esp)
 8187 0051 E8000000 		call	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E
 8187      00
 8188              	LBE82:
 8189 0056 89F0     		movl	%esi, %eax
 8190 0058 83C410   		addl	$16, %esp
 8191 005b 5B       		popl	%ebx
 8192 005c 5E       		popl	%esi
 8193 005d 5D       		popl	%ebp
 8194 005e C20400   		ret	$4
 8199              	Lscope61:
 8201 0061 909090   		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5eraseESt14_List_iteratorIS1_RS1_PS1_E,"x"
 8202              		.linkonce discard
 8203              		.align 2
 8207              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5eraseESt14_List_iteratorIS1_RS1_PS1_E
 8209              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5eraseESt14_List_iteratorIS1_RS1_PS1_E:
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****  
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****   template<typename _Tp, typename _Alloc>
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     typename list<_Tp,_Alloc>::iterator
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     list<_Tp,_Alloc>::
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     erase(iterator __position)
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****     {
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****       _List_node_base* __next_node = __position._M_node->_M_next;
 8211              	LM305:
 8212 0000 55       		pushl	%ebp
 8213 0001 89E5     		movl	%esp, %ebp
 8214 0003 53       		pushl	%ebx
 8215 0004 83EC14   		subl	$20, %esp
 8216 0007 8B5D08   		movl	8(%ebp), %ebx
 8217 000a 8B5510   		movl	16(%ebp), %edx
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc **** List_node_base* __prev_node = __position._M_node->_M_prev;
 8219              	LM306:
 8220              	LBB83:
 8221 000d 8B02     		movl	(%edx), %eax
 8222 000f 8B00     		movl	(%eax), %eax
 8223 0011 8945F8   		movl	%eax, -8(%ebp)
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      _Node* __n = static_cast<_Node*>(__position._M_node);
 8225              	LM307:
 8226 0014 8B02     		movl	(%edx), %eax
 8227 0016 8B4004   		movl	4(%eax), %eax
 8228 0019 8945F4   		movl	%eax, -12(%ebp)
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      __prev_node->_M_next = __next_node;
 8230              	LM308:
 8231 001c 8B02     		movl	(%edx), %eax
 8232 001e 8945F0   		movl	%eax, -16(%ebp)
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      __next_node->_M_prev = __prev_node;
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 136


 8234              	LM309:
 8235 0021 8B55F4   		movl	-12(%ebp), %edx
 8236 0024 8B45F8   		movl	-8(%ebp), %eax
 8237 0027 8902     		movl	%eax, (%edx)
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      _Destroy(&__n->_M_data);
 8239              	LM310:
 8240 0029 8B55F8   		movl	-8(%ebp), %edx
 8241 002c 8B45F4   		movl	-12(%ebp), %eax
 8242 002f 894204   		movl	%eax, 4(%edx)
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      _M_put_node(__n);
 8244              	LM311:
 8245 0032 8B45F0   		movl	-16(%ebp), %eax
 8246 0035 83C008   		addl	$8, %eax
 8247 0038 890424   		movl	%eax, (%esp)
 8248 003b E8000000 		call	__ZSt8_DestroyIN10ThreadPool7JobDataEEvPT_
 8248      00
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****      return iterator(static_cast<_Node*>(__next_node));
 8250              	LM312:
 8251 0040 8B45F0   		movl	-16(%ebp), %eax
 8252 0043 89442404 		movl	%eax, 4(%esp)
 8253 0047 8B450C   		movl	12(%ebp), %eax
 8254 004a 890424   		movl	%eax, (%esp)
 8255 004d E8000000 		call	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_nodeIS1_E
 8255      00
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/list.tcc ****    }
 8257              	LM313:
 8258 0052 8B45F8   		movl	-8(%ebp), %eax
 8259 0055 89442404 		movl	%eax, 4(%esp)
 8260 0059 891C24   		movl	%ebx, (%esp)
 8261 005c E8000000 		call	__ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E
 8261      00
 8262              	LBE83:
 8263 0061 89D8     		movl	%ebx, %eax
 8264 0063 83C414   		addl	$20, %esp
 8265 0066 5B       		popl	%ebx
 8266 0067 5D       		popl	%ebp
 8267 0068 C20400   		ret	$4
 8274              	Lscope62:
 8276 006b 90       		.section	.text$_ZSt13__destroy_auxIPN10ThreadPool10ThreadDataEEvT_S3_12__false_type,"x"
 8277              		.linkonce discard
 8278              		.align 2
 8282              	.globl __ZSt13__destroy_auxIPN10ThreadPool10ThreadDataEEvT_S3_12__false_type
 8284              	__ZSt13__destroy_auxIPN10ThreadPool10ThreadDataEEvT_S3_12__false_type:
 8286              	Ltext27:
 8288              	LM314:
 8289 0000 55       		pushl	%ebp
 8290 0001 89E5     		movl	%esp, %ebp
 8291 0003 83EC08   		subl	$8, %esp
 8293              	LM315:
 8294              	LBB84:
 8295 0006 90       		nop
 8296              	L265:
 8297 0007 8B4508   		movl	8(%ebp), %eax
 8298 000a 3B450C   		cmpl	12(%ebp), %eax
 8299 000d 7502     		jne	L268
 8300 000f EB11     		jmp	L264
 8301              	L268:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 137


 8302 0011 8B4508   		movl	8(%ebp), %eax
 8303 0014 890424   		movl	%eax, (%esp)
 8304 0017 E8000000 		call	__ZSt8_DestroyIN10ThreadPool10ThreadDataEEvPT_
 8304      00
 8305 001c 8345080C 		addl	$12, 8(%ebp)
 8306 0020 EBE5     		jmp	L265
 8307              	L264:
 8308 0022 C9       		leave
 8309 0023 C3       		ret
 8310              	LBE84:
 8311              	Lscope63:
 8313              		.section	.text$_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataE
 8314              		.linkonce discard
 8315              		.align 2
 8320              	.globl __ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vecto
 8322              	__ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_Sa
 8324              	Ltext28:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // Copyright (C) 2001 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 138


  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** /** @file stl_uninitialized.h
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****  */
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** #ifndef _CPP_BITS_STL_UNINITIALIZED_H
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** #define _CPP_BITS_STL_UNINITIALIZED_H 1
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** #include <cstring>
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** namespace std
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** {
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****   // uninitialized_copy
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****   template<typename _InputIter, typename _ForwardIter>
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     inline _ForwardIter 
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_aux(_InputIter __first, _InputIter __last,
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 			     _ForwardIter __result,
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 			     __true_type)
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     { return copy(__first, __last, __result); }
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****   template<typename _InputIter, typename _ForwardIter>
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     _ForwardIter 
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_aux(_InputIter __first, _InputIter __last,
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 			     _ForwardIter __result,
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 			     __false_type)
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     {
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****       _ForwardIter __cur = __result;
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****       try {
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 	for ( ; __first != __last; ++__first, ++__cur)
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 	  _Construct(&*__cur, *__first);
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 	return __cur;
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****       }
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****       catch(...)
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 	{
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 	  _Destroy(__result, __cur);
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again; 
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 	}
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     }
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** 
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****   /**
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 139


  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****    *  @param  first  An input iterator.
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****    *  @param  last   An input iterator.
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****    *  @param  result An output iterator.
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****    *  @return   result + (first - last)
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****    *
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****   */
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****   template<typename _InputIter, typename _ForwardIter>
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     inline _ForwardIter
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result)
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     {
 8326              	LM316:
 8327 0000 55       		pushl	%ebp
 8328 0001 89E5     		movl	%esp, %ebp
 8329 0003 83EC18   		subl	$24, %esp
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h **** aits<_ValueType>::is_POD_type _Is_POD;
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****       return __uninitialized_copy_aux(__first, __last, __result, _Is_POD());
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_uninitialized.h ****     }
 8331              	LM317:
 8332              	LBB85:
 8333 0006 C644240C 		movb	$0, 12(%esp)
 8333      00
 8334 000b 8B4510   		movl	16(%ebp), %eax
 8335 000e 89442408 		movl	%eax, 8(%esp)
 8336 0012 8B450C   		movl	12(%ebp), %eax
 8337 0015 89442404 		movl	%eax, 4(%esp)
 8338 0019 8B4508   		movl	8(%ebp), %eax
 8339 001c 890424   		movl	%eax, (%esp)
 8340 001f E8000000 		call	__ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6
 8340      00
 8341 0024 8945FC   		movl	%eax, -4(%ebp)
 8342 0027 8B45FC   		movl	-4(%ebp), %eax
 8343 002a C9       		leave
 8344 002b C3       		ret
 8345              	LBE85:
 8346              	Lscope64:
 8348              	.globl __ZTI10ThreadPool
 8349              		.section	.rdata$_ZTI10ThreadPool,""
 8350              		.linkonce same_size
 8351              		.align 4
 8352              	__ZTI10ThreadPool:
 8353 0000 08000000 		.long	__ZTVN10__cxxabiv117__class_type_infoE+8
 8354 0004 00000000 		.long	__ZTS10ThreadPool
 8355              	.globl __ZTS10ThreadPool
 8356              		.section	.rdata$_ZTS10ThreadPool,""
 8357              		.linkonce same_size
 8358              	__ZTS10ThreadPool:
 8359 0000 31305468 		.ascii "10ThreadPool\0"
 8359      72656164 
 8359      506F6F6C 
 8359      00
 8360 000d 000000   		.section	.text$_ZnwjPv,"x"
 8361              		.linkonce discard
 8362              		.align 2
 8365              	.globl __ZnwjPv
 8367              	__ZnwjPv:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 140


 8369              	Ltext29:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // Copyright (C) 1994, 1996, 1997, 1998, 2000, 2001, 2002
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // Free Software Foundation
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // This file is part of GNU CC.
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** //
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // GNU CC is free software; you can redistribute it and/or modify
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // it under the terms of the GNU General Public License as published by
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // the Free Software Foundation; either version 2, or (at your option)
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // any later version.
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // 
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // GNU CC is distributed in the hope that it will be useful,
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // GNU General Public License for more details.
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // 
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // You should have received a copy of the GNU General Public License
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // along with GNU CC; see the file COPYING.  If not, write to
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // the Free Software Foundation, 59 Temple Place - Suite 330,
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // Boston, MA 02111-1307, USA.
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // As a special exception, you may use this file as part of a free software
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // library without restriction.  Specifically, if other files instantiate
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // templates or use macros or inline functions from this file, or you compile
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // this file and link it with other files to produce an executable, this
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // file does not by itself cause the resulting executable to be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // the GNU General Public License.  This exception does not however
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // invalidate any other reasons why the executable file might be covered by
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // the GNU General Public License.
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** /** @file new
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  handling memory allocation errors; see
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  */
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** #ifndef __NEW__
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** #define __NEW__
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** #include <cstddef>
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** #include <exception>
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** extern "C++" {
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** namespace std 
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** {
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   /**
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****    *  @brief  Exception possibly thrown by @c new.
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****    *
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****    *  errors from the throwing forms of @c new.  */
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   class bad_alloc : public exception 
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   {
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   public:
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****     bad_alloc() throw() { }
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 141


  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****     // This declaration is not useless:
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****     virtual ~bad_alloc() throw();
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   };
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   struct nothrow_t { };
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   extern const nothrow_t nothrow;
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   /** If you write your own error handler to be called by @c new, it must
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****    *  be of this type.  */
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   typedef void (*new_handler)();
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   /// Takes a replacement handler as the argument, returns the previous handler.
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****   new_handler set_new_handler(new_handler) throw();
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** } // namespace std
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** //@{
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** /** These are replaceable signatures:
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  - normal array new and delete (same)
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *    @c NULL on error)
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  - @c nothrow array new and delete (same)
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  Placement new and delete signatures (take a memory address argument,
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new ****  *  does nothing) may not be replaced by a user's program.
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** */
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void* operator new(std::size_t) throw (std::bad_alloc);
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void* operator new[](std::size_t) throw (std::bad_alloc);
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void operator delete(void*) throw();
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void operator delete[](void*) throw();
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void* operator new(std::size_t, const std::nothrow_t&) throw();
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void* operator new[](std::size_t, const std::nothrow_t&) throw();
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void operator delete(void*, const std::nothrow_t&) throw();
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** void operator delete[](void*, const std::nothrow_t&) throw();
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** 
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** // Default placement versions of operator new.
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/new **** inline void* operator new(std::size_t, void* __p) throw() { return __p; }
 8371              	LM318:
 8372 0000 55       		pushl	%ebp
 8373 0001 89E5     		movl	%esp, %ebp
 8375              	LM319:
 8376              	LBB86:
 8377 0003 8B450C   		movl	12(%ebp), %eax
 8378              	L271:
 8379              	L270:
 8380 0006 5D       		popl	%ebp
 8381 0007 C3       		ret
 8382              	LBE86:
 8383              	Lscope65:
 8385              		.section	.text$_ZNSt19_List_iterator_baseC2EPSt15_List_node_base,"x"
 8386              		.linkonce discard
 8387              		.align 2
 8391              	.globl __ZNSt19_List_iterator_baseC2EPSt15_List_node_base
 8393              	__ZNSt19_List_iterator_baseC2EPSt15_List_node_base:
 8395              	Ltext30:
 8397              	LM320:
 8398 0000 55       		pushl	%ebp
 8399 0001 89E5     		movl	%esp, %ebp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 142


 8401              	LM321:
 8402              	LBB87:
 8403 0003 8B5508   		movl	8(%ebp), %edx
 8404 0006 8B450C   		movl	12(%ebp), %eax
 8405 0009 8902     		movl	%eax, (%edx)
 8406 000b 5D       		popl	%ebp
 8407 000c C3       		ret
 8408              	LBE87:
 8409              	Lscope66:
 8411 000d 909090   		.section	.text$_ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE4sizeEv,"x"
 8412              		.linkonce discard
 8413              		.align 2
 8416              	.globl __ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE4sizeEv
 8418              	__ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE4sizeEv:
 8420              	Ltext31:
 8422              	LM322:
 8423 0000 55       		pushl	%ebp
 8424 0001 89E5     		movl	%esp, %ebp
 8425 0003 53       		pushl	%ebx
 8426 0004 83EC14   		subl	$20, %esp
 8428              	LM323:
 8429              	LBB88:
 8430 0007 8B4508   		movl	8(%ebp), %eax
 8431 000a 890424   		movl	%eax, (%esp)
 8432 000d E8000000 		call	__ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 8432      00
 8433 0012 8945F8   		movl	%eax, -8(%ebp)
 8434 0015 8D5DF8   		leal	-8(%ebp), %ebx
 8435 0018 8B4508   		movl	8(%ebp), %eax
 8436 001b 890424   		movl	%eax, (%esp)
 8437 001e E8000000 		call	__ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 8437      00
 8438 0023 8945F4   		movl	%eax, -12(%ebp)
 8439 0026 8D45F4   		leal	-12(%ebp), %eax
 8440 0029 895C2404 		movl	%ebx, 4(%esp)
 8441 002d 890424   		movl	%eax, (%esp)
 8442 0030 E8000000 		call	__ZN9__gnu_cxxmiIPKN10ThreadPool10ThreadDataES4_St6vectorIS2_SaIS2_EEEENS_17__normal_iterator
 8442      00
 8443 0035 83C414   		addl	$20, %esp
 8444 0038 5B       		popl	%ebx
 8445 0039 5D       		popl	%ebp
 8446 003a C3       		ret
 8447              	LBE88:
 8448              	Lscope67:
 8450 003b 90       		.section	.text$_ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv,"x"
 8451              		.linkonce discard
 8452              		.align 2
 8455              	.globl __ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
 8457              	__ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv:
 8459              	LM324:
 8460 0000 55       		pushl	%ebp
 8461 0001 89E5     		movl	%esp, %ebp
 8462 0003 83EC18   		subl	$24, %esp
 8464              	LM325:
 8465              	LBB89:
 8466 0006 8B4508   		movl	8(%ebp), %eax
 8467 0009 8B00     		movl	(%eax), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 143


 8468 000b 8945F8   		movl	%eax, -8(%ebp)
 8469 000e 8D45F8   		leal	-8(%ebp), %eax
 8470 0011 89442404 		movl	%eax, 4(%esp)
 8471 0015 8D45FC   		leal	-4(%ebp), %eax
 8472 0018 890424   		movl	%eax, (%esp)
 8473 001b E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS4_
 8473      00
 8474 0020 8B45FC   		movl	-4(%ebp), %eax
 8475 0023 C9       		leave
 8476 0024 C3       		ret
 8477              	LBE89:
 8478              	Lscope68:
 8480 0025 909090   		.section	.text$_ZN9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE
 8481              		.linkonce discard
 8482              		.align 2
 8486              	.globl __ZN9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS4_
 8488              	__ZN9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS4_:
 8490              	Ltext32:
 8492              	LM326:
 8493 0000 55       		pushl	%ebp
 8494 0001 89E5     		movl	%esp, %ebp
 8495 0003 83EC08   		subl	$8, %esp
 8497              	LM327:
 8498              	LBB90:
 8499 0006 8B4508   		movl	8(%ebp), %eax
 8500 0009 890424   		movl	%eax, (%esp)
 8501 000c E8000000 		call	__ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPKS2_RS3_EC2Ev
 8501      00
 8502 0011 8B5508   		movl	8(%ebp), %edx
 8503 0014 8B450C   		movl	12(%ebp), %eax
 8504 0017 8B00     		movl	(%eax), %eax
 8505 0019 8902     		movl	%eax, (%edx)
 8506 001b C9       		leave
 8507 001c C3       		ret
 8508              	LBE90:
 8509              	Lscope69:
 8511 001d 909090   		.section	.text$_ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv,"x"
 8512              		.linkonce discard
 8513              		.align 2
 8516              	.globl __ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
 8518              	__ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv:
 8520              	Ltext33:
 8522              	LM328:
 8523 0000 55       		pushl	%ebp
 8524 0001 89E5     		movl	%esp, %ebp
 8525 0003 83EC18   		subl	$24, %esp
 8527              	LM329:
 8528              	LBB91:
 8529 0006 8B4508   		movl	8(%ebp), %eax
 8530 0009 8B4004   		movl	4(%eax), %eax
 8531 000c 8945F8   		movl	%eax, -8(%ebp)
 8532 000f 8D45F8   		leal	-8(%ebp), %eax
 8533 0012 89442404 		movl	%eax, 4(%esp)
 8534 0016 8D45FC   		leal	-4(%ebp), %eax
 8535 0019 890424   		movl	%eax, (%esp)
 8536 001c E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS4_
 8536      00
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 144


 8537 0021 8B45FC   		movl	-4(%ebp), %eax
 8538 0024 C9       		leave
 8539 0025 C3       		ret
 8540              	LBE91:
 8541              	Lscope70:
 8543 0026 9090     		.section	.text$_ZN9__gnu_cxxmiIPKN10ThreadPool10ThreadDataES4_St6vectorIS2_SaIS2_EEEENS_17__normal
 8544              		.linkonce discard
 8545              		.align 2
 8549              	.globl __ZN9__gnu_cxxmiIPKN10ThreadPool10ThreadDataES4_St6vectorIS2_SaIS2_EEEENS_17__normal_iterato
 8551              	__ZN9__gnu_cxxmiIPKN10ThreadPool10ThreadDataES4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_
 8553              	Ltext34:
 677:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** te<typename _IteratorL, typename _IteratorR, typename _Container>
 678:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool 
 679:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 680:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	    const __normal_iterator<_IteratorR, _Container>& __rhs)
 681:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() < __rhs.base(); }
 682:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 683:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 684:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 685:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 686:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****              const __normal_iterator<_Iterator, _Container>& __rhs)
 687:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() < __rhs.base(); }
 688:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 689:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 690:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 691:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 692:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	    const __normal_iterator<_IteratorR, _Container>& __rhs)
 693:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() > __rhs.base(); }
 694:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 695:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 696:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 697:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 698:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	    const __normal_iterator<_Iterator, _Container>& __rhs)
 699:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() > __rhs.base(); }
 700:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 701:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 702:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 703:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 704:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	     const __normal_iterator<_IteratorR, _Container>& __rhs)
 705:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() <= __rhs.base(); }
 706:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 707:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 708:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 709:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 710:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	     const __normal_iterator<_Iterator, _Container>& __rhs)
 711:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() <= __rhs.base(); }
 712:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 713:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 714:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 715:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 716:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	     const __normal_iterator<_IteratorR, _Container>& __rhs)
 717:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() >= __rhs.base(); }
 718:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 719:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 720:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline bool
 721:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 722:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	     const __normal_iterator<_Iterator, _Container>& __rhs)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 145


 723:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() >= __rhs.base(); }
 724:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 725:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // _GLIBCPP_RESOLVE_LIB_DEFECTS
 726:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 727:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 728:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   // parameters.
 729:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 730:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 731:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 732:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 	     const __normal_iterator<_IteratorR, _Container>& __rhs)
 733:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   { return __lhs.base() - __rhs.base(); }
 734:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h **** 
 735:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 8555              	LM330:
 8556 0000 55       		pushl	%ebp
 8557 0001 89E5     		movl	%esp, %ebp
 8558 0003 53       		pushl	%ebx
 8559 0004 83EC04   		subl	$4, %esp
 8561              	LM331:
 8562              	LBB92:
 8563 0007 8B4508   		movl	8(%ebp), %eax
 8564 000a 890424   		movl	%eax, (%esp)
 8565 000d E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 8565      00
 8566 0012 89C3     		movl	%eax, %ebx
 8567 0014 8B450C   		movl	12(%ebp), %eax
 8568 0017 890424   		movl	%eax, (%esp)
 8569 001a E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 8569      00
 8570 001f 8B10     		movl	(%eax), %edx
 8571 0021 8B03     		movl	(%ebx), %eax
 8572 0023 29D0     		subl	%edx, %eax
 8573 0025 C1F802   		sarl	$2, %eax
 8574 0028 69C0ABAA 		imull	$-1431655765, %eax, %eax
 8574      AAAA
 8575 002e 83C404   		addl	$4, %esp
 8576 0031 5B       		popl	%ebx
 8577 0032 5D       		popl	%ebp
 8578 0033 C3       		ret
 8579              	LBE92:
 8580              	Lscope71:
 8582              		.section	.text$_ZNK9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EE
 8583              		.linkonce discard
 8584              		.align 2
 8587              	.globl __ZNK9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 8589              	__ZNK9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv:
 8591              	LM332:
 8592 0000 55       		pushl	%ebp
 8593 0001 89E5     		movl	%esp, %ebp
 8595              	LM333:
 8596              	LBB93:
 8597 0003 8B4508   		movl	8(%ebp), %eax
 8598 0006 5D       		popl	%ebp
 8599 0007 C3       		ret
 8600              	LBE93:
 8601              	Lscope72:
 8603              		.section	.text$_ZSt8_DestroyIN10ThreadPool7JobDataEEvPT_,"x"
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 146


 8604              		.linkonce discard
 8605              		.align 2
 8608              	.globl __ZSt8_DestroyIN10ThreadPool7JobDataEEvPT_
 8610              	__ZSt8_DestroyIN10ThreadPool7JobDataEEvPT_:
 8612              	Ltext35:
 8614              	LM334:
 8615 0000 55       		pushl	%ebp
 8616 0001 89E5     		movl	%esp, %ebp
 8618              	LM335:
 8619 0003 5D       		popl	%ebp
 8620 0004 C3       		ret
 8621              	Lscope73:
 8623 0005 909090   		.section	.text$_ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPS2_RS2_EC2
 8624              		.linkonce discard
 8625              		.align 2
 8628              	.globl __ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPS2_RS2_EC2Ev
 8630              	__ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPS2_RS2_EC2Ev:
 8632              	Ltext36:
 8634              	LM336:
 8635              	L282:
 8636              	L281:
 8637 0000 55       		pushl	%ebp
 8638 0001 89E5     		movl	%esp, %ebp
 8640              	LM337:
 8641 0003 5D       		popl	%ebp
 8642 0004 C3       		ret
 8643              	Lscope74:
 8645 0005 909090   		.section	.text$_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6ve
 8646              		.linkonce discard
 8647              		.align 2
 8652              	.globl __ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_
 8654              	__ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_E
 8656              	Ltext37:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // Bits and pieces used in algorithms -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // this file and link it with other files to produce an executable, this
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 147


  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** /** @file stl_algobase.h
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****  */
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #ifndef __GLIBCPP_INTERNAL_ALGOBASE_H
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #define __GLIBCPP_INTERNAL_ALGOBASE_H
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <cstring>
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <climits>
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <cstdlib>
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <cstddef>
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <new>
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <iosfwd>
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <bits/type_traits.h>
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** namespace std
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** {
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // swap and iter_swap
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 148


  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  a  An iterator.
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  b  Another iterator.
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  iterators themselves.
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _ForwardIter1, typename _ForwardIter2>
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline void
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIter1 __a, _ForwardIter2 __b)
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIter1>::value_type _ValueType1;
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIter2>::value_type _ValueType2;
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       // concept requirements
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter1>)
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_Mutable_ForwardIteratorConcept<_ForwardIter2>)
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_ConvertibleConcept<_ValueType1, _ValueType2>)
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_ConvertibleConcept<_ValueType2, _ValueType1>)
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       _ValueType1 __tmp = *__a;
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       *__a = *__b;
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       *__b = __tmp;
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief Swaps two values.
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  any type which has a copy constructor and an assignment operator.
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline void
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     swap(_Tp& __a, _Tp& __b)
 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       // concept requirements
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_SGIAssignableConcept<_Tp>)
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       _Tp __tmp = __a;
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __a = __b;
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __b = __tmp;
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   //--------------------------------------------------
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // min and max
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   #undef min
 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   #undef max
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 149


 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 144:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 145:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
 146:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 147:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline const _Tp&
 148:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 149:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 150:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       // concept requirements
 151:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)
 152:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 153:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       if (__b < __a) return __b; return __a;
 154:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 155:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 156:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
 157:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 158:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 159:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 160:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 161:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
 162:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 163:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 164:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 165:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
 166:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 167:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline const _Tp&
 168:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b) 
 169:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 170:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       // concept requirements
 171:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_LessThanComparableConcept<_Tp>)
 172:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 173:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       if (__a < __b) return __b; return __a;
 174:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 175:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 176:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
 177:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 178:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 179:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 180:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  comp  A @link s20_3_3_comparisons comparison functor@endlink.
 181:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 182:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
 183:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 184:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 185:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
 186:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 187:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline const _Tp&
 188:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 189:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 190:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 191:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       if (__comp(__b, __a)) return __b; return __a;
 192:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 193:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 194:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
 195:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 150


 196:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 197:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 198:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  comp  A @link s20_3_3_comparisons comparison functor@endlink.
 199:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 200:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
 201:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 202:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 203:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
 204:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 205:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline const _Tp&
 206:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 207:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 208:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 209:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       if (__comp(__a, __b)) return __b; return __a;
 210:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 211:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 212:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   //--------------------------------------------------
 213:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // copy
 214:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 215:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // All of these auxiliary functions serve two purposes.  (1) Replace
 216:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 217:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 218:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 219:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 220:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 221:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 222:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 223:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy(_InputIter __first, _InputIter __last,
 224:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	   _OutputIter __result,
 225:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	   input_iterator_tag)
 226:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 227:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       for ( ; __first != __last; ++__result, ++__first)
 228:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	*__result = *__first;
 229:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __result;
 230:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 231:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 232:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _RandomAccessIter, typename _OutputIter>
 233:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 234:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy(_RandomAccessIter __first, _RandomAccessIter __last,
 235:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	   _OutputIter __result,
 236:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	   random_access_iterator_tag)
 237:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 238:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_RandomAccessIter>::difference_type
 239:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****           _Distance;
 240:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       for (_Distance __n = __last - __first; __n > 0; --__n) {
 241:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	*__result = *__first;
 242:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	++__first;
 243:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	++__result;
 244:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       }
 245:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __result;
 246:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 247:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 248:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 249:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _Tp*
 250:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result)
 251:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 252:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       memmove(__result, __first, sizeof(_Tp) * (__last - __first));
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 151


 253:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __result + (__last - __first);
 254:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 255:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 256:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 257:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 258:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_aux2(_InputIter __first, _InputIter __last,
 259:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		_OutputIter __result, __false_type)
 260:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     { return __copy(__first, __last, __result, __iterator_category(__first)); }
 261:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 262:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 263:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 264:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_aux2(_InputIter __first, _InputIter __last,
 265:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		_OutputIter __result, __true_type)
 266:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     { return __copy(__first, __last, __result, __iterator_category(__first)); }
 267:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 268:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 269:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _Tp*
 270:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_aux2(_Tp* __first, _Tp* __last,
 271:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		_Tp* __result, __true_type)
 272:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     { return __copy_trivial(__first, __last, __result); }
 273:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 274:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 275:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _Tp*
 276:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_aux2(const _Tp* __first, const _Tp* __last,
 277:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		_Tp* __result, __true_type)
 278:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     { return __copy_trivial(__first, __last, __result); }
 279:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 280:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 281:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 282:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_ni2(_InputIter __first, _InputIter __last,
 283:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	       _OutputIter __result, __true_type)
 284:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 285:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_InputIter>::value_type
 286:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	  _ValueType;
 287:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator
 288:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	  _Trivial;
 289:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return _OutputIter(__copy_aux2(__first, __last,
 290:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****                                      __result.base(),
 291:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 				     _Trivial()));
 292:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 293:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 294:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 295:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 296:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_ni2(_InputIter __first, _InputIter __last,
 297:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	       _OutputIter __result, __false_type)
 298:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 299:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_InputIter>::value_type
 300:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****           _ValueType;
 301:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator
 302:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****           _Trivial;
 303:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __copy_aux2(__first, __last,
 304:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****                          __result,
 305:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 			 _Trivial());
 306:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 307:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 308:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 309:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 152


 310:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_ni1(_InputIter __first, _InputIter __last,
 311:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	       _OutputIter __result, __true_type)
 312:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 313:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;
 314:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __copy_ni2(__first.base(), __last.base(), __result, __Normal());
 315:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 316:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 317:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 318:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 319:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_ni1(_InputIter __first, _InputIter __last,
 320:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	       _OutputIter __result, __false_type)
 321:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 322:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;
 323:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __copy_ni2(__first, __last, __result, __Normal());
 324:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 325:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 326:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
 327:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 328:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  first  An input iterator.
 329:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  last   An input iterator.
 330:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  result An output iterator.
 331:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   result + (first - last)
 332:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
 333:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 334:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 335:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 336:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  If the input range and the output
 337:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  range overlap, then the copy_backward function should be used instead.
 338:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
 339:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _InputIter, typename _OutputIter>
 340:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _OutputIter
 341:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     copy(_InputIter __first, _InputIter __last, _OutputIter __result)
 342:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 343:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       // concept requirements
 344:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_InputIteratorConcept<_InputIter>)
 345:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_OutputIteratorConcept<_OutputIter,
 346:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_InputIter>::value_type>)
 347:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 348:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****        typedef typename _Is_normal_iterator<_InputIter>::_Normal __Normal;
 349:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****        return __copy_ni1(__first, __last, __result, __Normal());
 350:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 351:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 352:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   //--------------------------------------------------
 353:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // copy_backward
 354:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 355:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _BidirectionalIter1, typename _BidirectionalIter2>
 356:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BidirectionalIter2
 357:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_backward(_BidirectionalIter1 __first, _BidirectionalIter1 __last, 
 358:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		    _BidirectionalIter2 __result,
 359:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		    bidirectional_iterator_tag)
 360:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 361:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       while (__first != __last)
 362:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****         *--__result = *--__last;
 363:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __result;
 364:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 365:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 366:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _RandomAccessIter, typename _BidirectionalIter>
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 153


 367:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BidirectionalIter
 368:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_backward(_RandomAccessIter __first, _RandomAccessIter __last, 
 369:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		    _BidirectionalIter __result,
 370:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		    random_access_iterator_tag)
 371:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 372:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typename iterator_traits<_RandomAccessIter>::difference_type __n;
 373:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       for (__n = __last - __first; __n > 0; --__n)
 374:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****         *--__result = *--__last;
 375:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __result;
 376:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 377:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 378:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 379:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // This dispatch class is a workaround for compilers that do not 
 380:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // have partial ordering of function templates.  All we're doing is
 381:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // creating a specialization so that we can turn a call to copy_backward
 382:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   // into a memmove whenever possible.
 383:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 384:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _BidirectionalIter1, typename _BidirectionalIter2,
 385:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****            typename _BoolType>
 386:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     struct __copy_backward_dispatch
 387:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 388:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       static _BidirectionalIter2
 389:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       copy(_BidirectionalIter1 __first, _BidirectionalIter1 __last, 
 390:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	   _BidirectionalIter2 __result)
 391:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       {
 392:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****         return __copy_backward(__first, __last,
 393:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	                       __result,
 394:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 			       __iterator_category(__first));
 395:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       }
 396:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     };
 397:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 398:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 399:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     struct __copy_backward_dispatch<_Tp*, _Tp*, __true_type>
 400:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 401:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       static _Tp*
 402:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
 403:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       {
 404:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	const ptrdiff_t _Num = __last - __first;
 405:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 406:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	return __result - _Num;
 407:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       }
 408:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     };
 409:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 410:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 411:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     struct __copy_backward_dispatch<const _Tp*, _Tp*, __true_type>
 412:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 413:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       static _Tp*
 414:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
 415:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       {
 416:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	return  __copy_backward_dispatch<_Tp*, _Tp*, __true_type>
 417:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	  ::copy(__first, __last, __result);
 418:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       }
 419:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     };
 420:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 421:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 422:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BI2
 423:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 154


 424:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 425:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename __type_traits<typename iterator_traits<_BI2>::value_type>
 426:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 			    ::has_trivial_assignment_operator _Trivial;
 427:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __copy_backward_dispatch<_BI1, _BI2, _Trivial>
 428:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 		  ::copy(__first, __last, __result);
 429:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 430:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 431:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template <typename _BI1, typename _BI2>
 432:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BI2
 433:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,
 434:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 					   _BI2 __result, __true_type)
 435:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     { return _BI2(__copy_backward_aux(__first, __last, __result.base())); }
 436:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 437:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template <typename _BI1, typename _BI2>
 438:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BI2
 439:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,
 440:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 					   _BI2 __result, __false_type)
 441:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     { return __copy_backward_aux(__first, __last, __result); }
 442:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 443:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template <typename _BI1, typename _BI2>
 444:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BI2
 445:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,
 446:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 					  _BI2 __result, __true_type)
 447:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 448:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;
 449:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __copy_backward_output_normal_iterator(__first.base(), __last.base(),
 450:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 						    __result, __Normal());
 451:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 452:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 453:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template <typename _BI1, typename _BI2>
 454:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BI2
 455:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,
 456:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 					  _BI2 __result, __false_type)
 457:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
 458:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;
 459:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __copy_backward_output_normal_iterator(__first, __last, __result,
 460:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 						    __Normal());
 461:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     }
 462:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 463:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   /**
 464:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 465:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  first  An input iterator.
 466:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  last   An input iterator.
 467:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @param  result An output iterator.
 468:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  @return   result - (first - last)
 469:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *
 470:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 471:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 472:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 473:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 474:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 475:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 476:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   */
 477:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****   template <typename _BI1, typename _BI2>
 478:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     inline _BI2
 479:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 480:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****     {
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 155


 8658              	LM338:
 8659 0000 55       		pushl	%ebp
 8660 0001 89E5     		movl	%esp, %ebp
 8661 0003 83EC18   		subl	$24, %esp
 481:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** oncept requirements
 482:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_BidirectionalIteratorConcept<_BI1>)
 483:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 484:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       __glibcpp_function_requires(_ConvertibleConcept<
 485:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 486:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 487:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h **** 
 488:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       typedef typename _Is_normal_iterator<_BI1>::_Normal __Normal;
 489:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_algobase.h ****       return __copy_backward_input_normal_iterator(__first, __last, __result,
 8663              	LM339:
 8664              	LBB94:
 8665 0006 C644240C 		movb	$0, 12(%esp)
 8665      00
 8666 000b 8B4510   		movl	16(%ebp), %eax
 8667 000e 89442408 		movl	%eax, 8(%esp)
 8668 0012 8B450C   		movl	12(%ebp), %eax
 8669 0015 89442404 		movl	%eax, 4(%esp)
 8670 0019 8B4508   		movl	8(%ebp), %eax
 8671 001c 890424   		movl	%eax, (%esp)
 8672 001f E8000000 		call	__ZSt37__copy_backward_input_normal_iteratorIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10T
 8672      00
 8673 0024 8945FC   		movl	%eax, -4(%ebp)
 8674 0027 8B45FC   		movl	-4(%ebp), %eax
 8675 002a C9       		leave
 8676 002b C3       		ret
 8677              	LBE94:
 8678              	Lscope75:
 8680              		.section	.text$_ZSt37__copy_backward_input_normal_iteratorIN9__gnu_cxx17__normal_iteratorIPN10Thre
 8681              		.linkonce discard
 8682              		.align 2
 8687              	.globl __ZSt37__copy_backward_input_normal_iteratorIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10
 8689              	__ZSt37__copy_backward_input_normal_iteratorIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadD
 8691              	LM340:
 8692 0000 55       		pushl	%ebp
 8693 0001 89E5     		movl	%esp, %ebp
 8694 0003 53       		pushl	%ebx
 8695 0004 83EC24   		subl	$36, %esp
 8697              	LM341:
 8698              	LBB95:
 8699 0007 8D450C   		leal	12(%ebp), %eax
 8700 000a 890424   		movl	%eax, (%esp)
 8701 000d E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 8701      00
 8702 0012 89C3     		movl	%eax, %ebx
 8703 0014 8D4508   		leal	8(%ebp), %eax
 8704 0017 890424   		movl	%eax, (%esp)
 8705 001a E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 8705      00
 8706 001f 89C2     		movl	%eax, %edx
 8707 0021 C644240C 		movb	$0, 12(%esp)
 8707      00
 8708 0026 8B4510   		movl	16(%ebp), %eax
 8709 0029 89442408 		movl	%eax, 8(%esp)
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 156


 8710 002d 8B03     		movl	(%ebx), %eax
 8711 002f 89442404 		movl	%eax, 4(%esp)
 8712 0033 8B02     		movl	(%edx), %eax
 8713 0035 890424   		movl	%eax, (%esp)
 8714 0038 E8000000 		call	__ZSt38__copy_backward_output_normal_iteratorIPN10ThreadPool10ThreadDataEN9__gnu_cxx17__norma
 8714      00
 8715 003d 8945F8   		movl	%eax, -8(%ebp)
 8716 0040 8B45F8   		movl	-8(%ebp), %eax
 8717 0043 83C424   		addl	$36, %esp
 8718 0046 5B       		popl	%ebx
 8719 0047 5D       		popl	%ebp
 8720 0048 C3       		ret
 8721              	LBE95:
 8722              	Lscope76:
 8724 0049 909090   		.section	.text$_ZSt38__copy_backward_output_normal_iteratorIPN10ThreadPool10ThreadDataEN9__gnu_cxx
 8725              		.linkonce discard
 8726              		.align 2
 8731              	.globl __ZSt38__copy_backward_output_normal_iteratorIPN10ThreadPool10ThreadDataEN9__gnu_cxx17__norm
 8733              	__ZSt38__copy_backward_output_normal_iteratorIPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iter
 8735              	LM342:
 8736 0000 55       		pushl	%ebp
 8737 0001 89E5     		movl	%esp, %ebp
 8738 0003 83EC18   		subl	$24, %esp
 8740              	LM343:
 8741              	LBB96:
 8742 0006 8D4510   		leal	16(%ebp), %eax
 8743 0009 890424   		movl	%eax, (%esp)
 8744 000c E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 8744      00
 8745 0011 8B00     		movl	(%eax), %eax
 8746 0013 89442408 		movl	%eax, 8(%esp)
 8747 0017 8B450C   		movl	12(%ebp), %eax
 8748 001a 89442404 		movl	%eax, 4(%esp)
 8749 001e 8B4508   		movl	8(%ebp), %eax
 8750 0021 890424   		movl	%eax, (%esp)
 8751 0024 E8000000 		call	__ZSt19__copy_backward_auxIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_
 8751      00
 8752 0029 8945F8   		movl	%eax, -8(%ebp)
 8753 002c 8D45F8   		leal	-8(%ebp), %eax
 8754 002f 89442404 		movl	%eax, 4(%esp)
 8755 0033 8D45FC   		leal	-4(%ebp), %eax
 8756 0036 890424   		movl	%eax, (%esp)
 8757 0039 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 8757      00
 8758 003e 8B45FC   		movl	-4(%ebp), %eax
 8759 0041 C9       		leave
 8760 0042 C3       		ret
 8761              	LBE96:
 8762              	Lscope77:
 8764 0043 90       		.section	.text$_ZSt19__copy_backward_auxIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_,"x"
 8765              		.linkonce discard
 8766              		.align 2
 8771              	.globl __ZSt19__copy_backward_auxIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_
 8773              	__ZSt19__copy_backward_auxIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_:
 8775              	LM344:
 8776 0000 55       		pushl	%ebp
 8777 0001 89E5     		movl	%esp, %ebp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 157


 8778 0003 83EC18   		subl	$24, %esp
 8780              	LM345:
 8781              	LBB97:
 8782 0006 8B4510   		movl	16(%ebp), %eax
 8783 0009 89442408 		movl	%eax, 8(%esp)
 8784 000d 8B450C   		movl	12(%ebp), %eax
 8785 0010 89442404 		movl	%eax, 4(%esp)
 8786 0014 8B4508   		movl	8(%ebp), %eax
 8787 0017 890424   		movl	%eax, (%esp)
 8788 001a E8000000 		call	__ZNSt24__copy_backward_dispatchIPN10ThreadPool10ThreadDataES2_12__false_typeE4copyES2_S2_S2_
 8788      00
 8789 001f C9       		leave
 8790 0020 C3       		ret
 8791              	LBE97:
 8792              	Lscope78:
 8794 0021 909090   		.section	.text$_ZNSt24__copy_backward_dispatchIPN10ThreadPool10ThreadDataES2_12__false_typeE4copyE
 8795              		.linkonce discard
 8796              		.align 2
 8801              	.globl __ZNSt24__copy_backward_dispatchIPN10ThreadPool10ThreadDataES2_12__false_typeE4copyES2_S2_S2
 8803              	__ZNSt24__copy_backward_dispatchIPN10ThreadPool10ThreadDataES2_12__false_typeE4copyES2_S2_S2_:
 8805              	LM346:
 8806 0000 55       		pushl	%ebp
 8807 0001 89E5     		movl	%esp, %ebp
 8808 0003 83EC18   		subl	$24, %esp
 8810              	LM347:
 8811 0006 8D4508   		leal	8(%ebp), %eax
 8812              	LBB98:
 8813 0009 890424   		movl	%eax, (%esp)
 8814 000c E8000000 		call	__ZSt19__iterator_categoryIPN10ThreadPool10ThreadDataEENSt15iterator_traitsIT_E17iterator_cat
 8814      00
 8815 0011 8845FF   		movb	%al, -1(%ebp)
 8816 0014 C644240C 		movb	$0, 12(%esp)
 8816      00
 8817 0019 8B4510   		movl	16(%ebp), %eax
 8818 001c 89442408 		movl	%eax, 8(%esp)
 8819 0020 8B450C   		movl	12(%ebp), %eax
 8820 0023 89442404 		movl	%eax, 4(%esp)
 8821 0027 8B4508   		movl	8(%ebp), %eax
 8822 002a 890424   		movl	%eax, (%esp)
 8823 002d E8000000 		call	__ZSt15__copy_backwardIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_t
 8823      00
 8824 0032 C9       		leave
 8825 0033 C3       		ret
 8826              	LBE98:
 8827              	Lscope79:
 8829              		.section	.text$_ZSt19__iterator_categoryIPN10ThreadPool10ThreadDataEENSt15iterator_traitsIT_E17ite
 8830              		.linkonce discard
 8831              		.align 2
 8833              	.globl __ZSt19__iterator_categoryIPN10ThreadPool10ThreadDataEENSt15iterator_traitsIT_E17iterator_ca
 8835              	__ZSt19__iterator_categoryIPN10ThreadPool10ThreadDataEENSt15iterator_traitsIT_E17iterator_categoryE
 8837              	Ltext38:
   1:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
   3:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // Copyright (C) 2001, 2002 Free Software Foundation, Inc.
   4:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** //
   5:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 158


   7:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   8:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 2, or (at your option)
   9:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // any later version.
  10:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  11:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  12:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  15:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  16:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License along
  17:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // with this library; see the file COPYING.  If not, write to the Free
  18:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // USA.
  20:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  21:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // As a special exception, you may use this file as part of a free software
  22:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // library without restriction.  Specifically, if other files instantiate
  23:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // templates or use macros or inline functions from this file, or you compile
  24:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // this file and link it with other files to produce an executable, this
  25:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // file does not by itself cause the resulting executable to be covered by
  26:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // the GNU General Public License.  This exception does not however
  27:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // invalidate any other reasons why the executable file might be covered by
  28:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** // the GNU General Public License.
  29:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  30:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** /*
  31:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *
  32:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  33:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  34:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *
  35:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  36:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  37:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  38:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  39:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  40:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  41:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  42:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *
  43:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *
  44:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  45:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  46:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *
  47:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  48:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  49:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  50:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  51:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  52:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  53:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  54:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  */
  55:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  56:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** /** @file stl_iterator_base_types.h
  57:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  58:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *  You should not attempt to use it directly.
  59:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *
  60:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  61:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  62:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****  */
  63:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 159


  64:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** #ifndef __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H
  65:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** #define __GLIBCPP_INTERNAL_ITERATOR_BASE_TYPES_H
  66:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  67:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  68:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  69:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** namespace std
  70:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** {
  71:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   //@{
  72:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   /**
  73:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  74:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  75:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  76:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  77:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  different operations supporetd by different iterator types.
  78:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   */
  79:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  80:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   struct input_iterator_tag {};
  81:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  82:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   struct output_iterator_tag {};
  83:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  84:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag {};
  85:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator operations.
  86:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag {};
  87:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional iterator operations.
  88:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag {};
  89:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   //@}
  90:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  91:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
  92:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   /**
  93:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
  94:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *
  95:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
  96:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
  97:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
  98:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *
  99:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 100:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 101:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   */
 102:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 103:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 104:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     struct iterator
 105:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     {
 106:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 107:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 108:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 109:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 110:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 111:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 112:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 113:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 114:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 115:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 116:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     };
 117:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
 118:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   /**
 119:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 120:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  version simply "forwards" the nested typedefs from the Iterator
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 160


 121:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 122:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 123:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   */
 124:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 125:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     struct iterator_traits {
 126:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 127:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 128:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 129:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 130:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 131:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     };
 132:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
 133:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 134:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*> {
 135:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 136:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 137:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 138:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 139:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 140:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     };
 141:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
 142:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 143:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*> {
 144:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 145:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 146:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 147:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 148:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 149:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     };
 150:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h **** 
 151:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   /**
 152:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  @if maint
 153:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 154:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 155:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****    *  @endif
 156:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   */
 157:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 158:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     inline typename iterator_traits<_Iter>::iterator_category
 159:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 160:f:/K7_TOUR/CODE/Tools/MinGW/include/c++/3.3.1/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 8839              	LM348:
 8840 0000 55       		pushl	%ebp
 8841 0001 89E5     		movl	%esp, %ebp
 8842 0003 83EC04   		subl	$4, %esp
 8844              	LM349:
 8845              	LBB99:
 8846 0006 0FB645FF 		movzbl	-1(%ebp), %eax
 8847 000a C9       		leave
 8848 000b C3       		ret
 8849              	LBE99:
 8850              	Lscope80:
 8852              		.section	.text$_ZSt15__copy_backwardIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_i
 8853              		.linkonce discard
 8854              		.align 2
 8859              	.globl __ZSt15__copy_backwardIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_
 8861              	__ZSt15__copy_backwardIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag:
 8863              	Ltext39:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 161


 8865              	LM350:
 8866 0000 55       		pushl	%ebp
 8867 0001 89E5     		movl	%esp, %ebp
 8868 0003 83EC04   		subl	$4, %esp
 8870              	LM351:
 8871              	LBB100:
 8872 0006 8B5508   		movl	8(%ebp), %edx
 8873 0009 8B450C   		movl	12(%ebp), %eax
 8874 000c 29D0     		subl	%edx, %eax
 8875 000e C1F802   		sarl	$2, %eax
 8876 0011 69C0ABAA 		imull	$-1431655765, %eax, %eax
 8876      AAAA
 8877 0017 8945FC   		movl	%eax, -4(%ebp)
 8878              	L291:
 8879 001a 837DFC00 		cmpl	$0, -4(%ebp)
 8880 001e 7F02     		jg	L294
 8881 0020 EB29     		jmp	L292
 8882              	L294:
 8884              	LM352:
 8885 0022 8D4510   		leal	16(%ebp), %eax
 8886 0025 83280C   		subl	$12, (%eax)
 8887 0028 8B4D10   		movl	16(%ebp), %ecx
 8888 002b 8D450C   		leal	12(%ebp), %eax
 8889 002e 83280C   		subl	$12, (%eax)
 8890 0031 8B550C   		movl	12(%ebp), %edx
 8891 0034 8B02     		movl	(%edx), %eax
 8892 0036 8901     		movl	%eax, (%ecx)
 8893 0038 8B4204   		movl	4(%edx), %eax
 8894 003b 894104   		movl	%eax, 4(%ecx)
 8895 003e 8B4208   		movl	8(%edx), %eax
 8896 0041 894108   		movl	%eax, 8(%ecx)
 8898              	LM353:
 8899 0044 8D45FC   		leal	-4(%ebp), %eax
 8900 0047 FF08     		decl	(%eax)
 8901 0049 EBCF     		jmp	L291
 8902              	L292:
 8904              	LM354:
 8905 004b 8B4510   		movl	16(%ebp), %eax
 8906 004e C9       		leave
 8907 004f C3       		ret
 8908              	LBE100:
 8912              	Lscope81:
 8914              		.section	.text$_ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE
 8915              		.linkonce discard
 8916              		.align 2
 8919              	.globl __ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv
 8921              	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv:
 8923              	Ltext40:
 8925              	LM355:
 8926 0000 55       		pushl	%ebp
 8927 0001 89E5     		movl	%esp, %ebp
 8929              	LM356:
 8930              	LBB101:
 8931 0003 8B4508   		movl	8(%ebp), %eax
 8932 0006 8B00     		movl	(%eax), %eax
 8933 0008 5D       		popl	%ebp
 8934 0009 C3       		ret
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 162


 8935              	LBE101:
 8936              	Lscope82:
 8938 000a 9090     		.section	.text$_ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE11_M_allocateEj,"x"
 8939              		.linkonce discard
 8940              		.align 2
 8944              	.globl __ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE11_M_allocateEj
 8946              	__ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE11_M_allocateEj:
 8948              	Ltext41:
 8950              	LM357:
 8951 0000 55       		pushl	%ebp
 8952 0001 89E5     		movl	%esp, %ebp
 8953 0003 83EC08   		subl	$8, %esp
 8955              	LM358:
 8956              	LBB102:
 8957 0006 8B450C   		movl	12(%ebp), %eax
 8958 0009 890424   		movl	%eax, (%esp)
 8959 000c E8000000 		call	__ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE8allo
 8959      00
 8960 0011 C9       		leave
 8961 0012 C3       		ret
 8962              	LBE102:
 8963              	Lscope83:
 8965 0013 90       		.section	.text$_ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi
 8966              		.linkonce discard
 8967              		.align 2
 8970              	.globl __ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE8all
 8972              	__ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE8allocateEj
 8974              	Ltext42:
 8976              	LM359:
 8977 0000 55       		pushl	%ebp
 8978 0001 89E5     		movl	%esp, %ebp
 8979 0003 83EC08   		subl	$8, %esp
 8981              	LM360:
 8982              	LBB103:
 8983 0006 C745FC00 		movl	$0, -4(%ebp)
 8983      000000
 8985              	LM361:
 8986 000d 837D0800 		cmpl	$0, 8(%ebp)
 8987 0011 741B     		je	L298
 8989              	LM362:
 8990 0013 8B4508   		movl	8(%ebp), %eax
 8991 0016 89C2     		movl	%eax, %edx
 8992 0018 01D2     		addl	%edx, %edx
 8993 001a 01C2     		addl	%eax, %edx
 8994 001c 8D049500 		leal	0(,%edx,4), %eax
 8994      000000
 8995 0023 890424   		movl	%eax, (%esp)
 8996 0026 E8000000 		call	__ZNSt24__default_alloc_templateILb1ELi0EE8allocateEj
 8996      00
 8997 002b 8945FC   		movl	%eax, -4(%ebp)
 8998              	L298:
 9000              	LM363:
 9001 002e 8B45FC   		movl	-4(%ebp), %eax
 9002 0031 C9       		leave
 9003 0032 C3       		ret
 9004              	LBE103:
 9008              	Lscope84:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 163


 9010 0033 90       		.section	.text$_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_Sa
 9011              		.linkonce discard
 9012              		.align 2
 9017              	.globl __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEE
 9019              	__ZSt4copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_
 9021              	Ltext43:
 9023              	LM364:
 9024 0000 55       		pushl	%ebp
 9025 0001 89E5     		movl	%esp, %ebp
 9026 0003 83EC18   		subl	$24, %esp
 9028              	LM365:
 9029              	LBB104:
 9030 0006 C644240C 		movb	$0, 12(%esp)
 9030      00
 9031 000b 8B4510   		movl	16(%ebp), %eax
 9032 000e 89442408 		movl	%eax, 8(%esp)
 9033 0012 8B450C   		movl	12(%ebp), %eax
 9034 0015 89442404 		movl	%eax, 4(%esp)
 9035 0019 8B4508   		movl	8(%ebp), %eax
 9036 001c 890424   		movl	%eax, (%esp)
 9037 001f E8000000 		call	__ZSt10__copy_ni1IN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS
 9037      00
 9038 0024 8945FC   		movl	%eax, -4(%ebp)
 9039 0027 8B45FC   		movl	-4(%ebp), %eax
 9040 002a C9       		leave
 9041 002b C3       		ret
 9042              	LBE104:
 9043              	Lscope85:
 9045              		.section	.text$_ZSt10__copy_ni1IN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vecto
 9046              		.linkonce discard
 9047              		.align 2
 9052              	.globl __ZSt10__copy_ni1IN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaI
 9054              	__ZSt10__copy_ni1IN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEE
 9056              	LM366:
 9057 0000 55       		pushl	%ebp
 9058 0001 89E5     		movl	%esp, %ebp
 9059 0003 53       		pushl	%ebx
 9060 0004 83EC24   		subl	$36, %esp
 9062              	LM367:
 9063              	LBB105:
 9064 0007 8D450C   		leal	12(%ebp), %eax
 9065 000a 890424   		movl	%eax, (%esp)
 9066 000d E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 9066      00
 9067 0012 89C3     		movl	%eax, %ebx
 9068 0014 8D4508   		leal	8(%ebp), %eax
 9069 0017 890424   		movl	%eax, (%esp)
 9070 001a E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 9070      00
 9071 001f 89C2     		movl	%eax, %edx
 9072 0021 C644240C 		movb	$0, 12(%esp)
 9072      00
 9073 0026 8B4510   		movl	16(%ebp), %eax
 9074 0029 89442408 		movl	%eax, 8(%esp)
 9075 002d 8B03     		movl	(%ebx), %eax
 9076 002f 89442404 		movl	%eax, 4(%esp)
 9077 0033 8B02     		movl	(%edx), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 164


 9078 0035 890424   		movl	%eax, (%esp)
 9079 0038 E8000000 		call	__ZSt10__copy_ni2IPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6vectorIS1_S
 9079      00
 9080 003d 8945F8   		movl	%eax, -8(%ebp)
 9081 0040 8B45F8   		movl	-8(%ebp), %eax
 9082 0043 83C424   		addl	$36, %esp
 9083 0046 5B       		popl	%ebx
 9084 0047 5D       		popl	%ebp
 9085 0048 C3       		ret
 9086              	LBE105:
 9087              	Lscope86:
 9089 0049 909090   		.section	.text$_ZSt10__copy_ni2IPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6ve
 9090              		.linkonce discard
 9091              		.align 2
 9096              	.globl __ZSt10__copy_ni2IPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6vectorIS1_
 9098              	__ZSt10__copy_ni2IPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6vectorIS1_SaIS1_E
 9100              	LM368:
 9101 0000 55       		pushl	%ebp
 9102 0001 89E5     		movl	%esp, %ebp
 9103 0003 83EC28   		subl	$40, %esp
 9105              	LM369:
 9106              	LBB106:
 9107 0006 8D4510   		leal	16(%ebp), %eax
 9108 0009 890424   		movl	%eax, (%esp)
 9109 000c E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 9109      00
 9110 0011 C644240C 		movb	$0, 12(%esp)
 9110      00
 9111 0016 8B00     		movl	(%eax), %eax
 9112 0018 89442408 		movl	%eax, 8(%esp)
 9113 001c 8B450C   		movl	12(%ebp), %eax
 9114 001f 89442404 		movl	%eax, 4(%esp)
 9115 0023 8B4508   		movl	8(%ebp), %eax
 9116 0026 890424   		movl	%eax, (%esp)
 9117 0029 E8000000 		call	__ZSt11__copy_aux2IPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_12__false_type
 9117      00
 9118 002e 8945F8   		movl	%eax, -8(%ebp)
 9119 0031 8D45F8   		leal	-8(%ebp), %eax
 9120 0034 89442404 		movl	%eax, 4(%esp)
 9121 0038 8D45FC   		leal	-4(%ebp), %eax
 9122 003b 890424   		movl	%eax, (%esp)
 9123 003e E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
 9123      00
 9124 0043 8B45FC   		movl	-4(%ebp), %eax
 9125 0046 C9       		leave
 9126 0047 C3       		ret
 9127              	LBE106:
 9128              	Lscope87:
 9130              		.section	.text$_ZSt11__copy_aux2IPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_12__false_type,"x"
 9131              		.linkonce discard
 9132              		.align 2
 9137              	.globl __ZSt11__copy_aux2IPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_12__false_type
 9139              	__ZSt11__copy_aux2IPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_12__false_type:
 9141              	LM370:
 9142 0000 55       		pushl	%ebp
 9143 0001 89E5     		movl	%esp, %ebp
 9144 0003 83EC18   		subl	$24, %esp
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 165


 9146              	LM371:
 9147 0006 8D4508   		leal	8(%ebp), %eax
 9148              	LBB107:
 9149 0009 890424   		movl	%eax, (%esp)
 9150 000c E8000000 		call	__ZSt19__iterator_categoryIPN10ThreadPool10ThreadDataEENSt15iterator_traitsIT_E17iterator_cat
 9150      00
 9151 0011 8845FF   		movb	%al, -1(%ebp)
 9152 0014 C644240C 		movb	$0, 12(%esp)
 9152      00
 9153 0019 8B4510   		movl	16(%ebp), %eax
 9154 001c 89442408 		movl	%eax, 8(%esp)
 9155 0020 8B450C   		movl	12(%ebp), %eax
 9156 0023 89442404 		movl	%eax, 4(%esp)
 9157 0027 8B4508   		movl	8(%ebp), %eax
 9158 002a 890424   		movl	%eax, (%esp)
 9159 002d E8000000 		call	__ZSt6__copyIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag
 9159      00
 9160 0032 C9       		leave
 9161 0033 C3       		ret
 9162              	LBE107:
 9163              	Lscope88:
 9165              		.section	.text$_ZSt6__copyIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_ta
 9166              		.linkonce discard
 9167              		.align 2
 9172              	.globl __ZSt6__copyIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag
 9174              	__ZSt6__copyIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag:
 9176              	LM372:
 9177 0000 55       		pushl	%ebp
 9178 0001 89E5     		movl	%esp, %ebp
 9179 0003 83EC04   		subl	$4, %esp
 9181              	LM373:
 9182              	LBB108:
 9183              	LBB109:
 9184 0006 8B5508   		movl	8(%ebp), %edx
 9185 0009 8B450C   		movl	12(%ebp), %eax
 9186 000c 29D0     		subl	%edx, %eax
 9187 000e C1F802   		sarl	$2, %eax
 9188 0011 69C0ABAA 		imull	$-1431655765, %eax, %eax
 9188      AAAA
 9189 0017 8945FC   		movl	%eax, -4(%ebp)
 9190              	L304:
 9191 001a 837DFC00 		cmpl	$0, -4(%ebp)
 9192 001e 7F02     		jg	L307
 9193 0020 EB27     		jmp	L305
 9194              	L307:
 9196              	LM374:
 9197 0022 8B4D10   		movl	16(%ebp), %ecx
 9198 0025 8B5508   		movl	8(%ebp), %edx
 9199 0028 8B02     		movl	(%edx), %eax
 9200 002a 8901     		movl	%eax, (%ecx)
 9201 002c 8B4204   		movl	4(%edx), %eax
 9202 002f 894104   		movl	%eax, 4(%ecx)
 9203 0032 8B4208   		movl	8(%edx), %eax
 9204 0035 894108   		movl	%eax, 8(%ecx)
 9206              	LM375:
 9207 0038 8345080C 		addl	$12, 8(%ebp)
 9209              	LM376:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 166


 9210 003c 8D4510   		leal	16(%ebp), %eax
 9211 003f 83000C   		addl	$12, (%eax)
 9213              	LM377:
 9214 0042 8D45FC   		leal	-4(%ebp), %eax
 9215 0045 FF08     		decl	(%eax)
 9216 0047 EBD1     		jmp	L304
 9217              	L305:
 9219              	LM378:
 9220              	LBE109:
 9221 0049 8B4510   		movl	16(%ebp), %eax
 9222 004c C9       		leave
 9223 004d C3       		ret
 9224              	LBE108:
 9228              	Lscope89:
 9230 004e 9090     		.section	.text$_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6ve
 9231              		.linkonce discard
 9232              		.align 2
 9236              	.globl __ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_
 9238              	__ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_E
 9240              	Ltext44:
 9242              	LM379:
 9243 0000 55       		pushl	%ebp
 9244 0001 89E5     		movl	%esp, %ebp
 9245 0003 83EC08   		subl	$8, %esp
 9247              	LM380:
 9248              	LBB110:
 9249 0006 90       		nop
 9250              	L309:
 9251 0007 8D450C   		leal	12(%ebp), %eax
 9252 000a 89442404 		movl	%eax, 4(%esp)
 9253 000e 8D4508   		leal	8(%ebp), %eax
 9254 0011 890424   		movl	%eax, (%esp)
 9255 0014 E8000000 		call	__ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorI
 9255      00
 9256 0019 84C0     		testb	%al, %al
 9257 001b 7502     		jne	L312
 9258 001d EB20     		jmp	L308
 9259              	L312:
 9260 001f 8D4508   		leal	8(%ebp), %eax
 9261 0022 890424   		movl	%eax, (%esp)
 9262 0025 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv
 9262      00
 9263 002a 890424   		movl	%eax, (%esp)
 9264 002d E8000000 		call	__ZSt8_DestroyIN10ThreadPool10ThreadDataEEvPT_
 9264      00
 9265 0032 8D4508   		leal	8(%ebp), %eax
 9266 0035 890424   		movl	%eax, (%esp)
 9267 0038 E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 9267      00
 9268 003d EBC8     		jmp	L309
 9269              	L308:
 9270 003f C9       		leave
 9271 0040 C3       		ret
 9272              	LBE110:
 9273              	Lscope90:
 9275 0041 909090   		.section	.text$_ZSt8_DestroyIN10ThreadPool10ThreadDataEEvPT_,"x"
 9276              		.linkonce discard
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 167


 9277              		.align 2
 9280              	.globl __ZSt8_DestroyIN10ThreadPool10ThreadDataEEvPT_
 9282              	__ZSt8_DestroyIN10ThreadPool10ThreadDataEEvPT_:
 9284              	LM381:
 9285 0000 55       		pushl	%ebp
 9286 0001 89E5     		movl	%esp, %ebp
 9288              	LM382:
 9289 0003 5D       		popl	%ebp
 9290 0004 C3       		ret
 9291              	Lscope91:
 9293 0005 909090   		.section	.text$_ZN9__gnu_cxxmiIPN10ThreadPool10ThreadDataES3_St6vectorIS2_SaIS2_EEEENS_17__normal_
 9294              		.linkonce discard
 9295              		.align 2
 9299              	.globl __ZN9__gnu_cxxmiIPN10ThreadPool10ThreadDataES3_St6vectorIS2_SaIS2_EEEENS_17__normal_iterator
 9301              	__ZN9__gnu_cxxmiIPN10ThreadPool10ThreadDataES3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E
 9303              	Ltext45:
 9305              	LM383:
 9306 0000 55       		pushl	%ebp
 9307 0001 89E5     		movl	%esp, %ebp
 9308 0003 53       		pushl	%ebx
 9309 0004 83EC04   		subl	$4, %esp
 9311              	LM384:
 9312              	LBB111:
 9313 0007 8B4508   		movl	8(%ebp), %eax
 9314 000a 890424   		movl	%eax, (%esp)
 9315 000d E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 9315      00
 9316 0012 89C3     		movl	%eax, %ebx
 9317 0014 8B450C   		movl	12(%ebp), %eax
 9318 0017 890424   		movl	%eax, (%esp)
 9319 001a E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
 9319      00
 9320 001f 8B10     		movl	(%eax), %edx
 9321 0021 8B03     		movl	(%ebx), %eax
 9322 0023 29D0     		subl	%edx, %eax
 9323 0025 C1F802   		sarl	$2, %eax
 9324 0028 69C0ABAA 		imull	$-1431655765, %eax, %eax
 9324      AAAA
 9325 002e 83C404   		addl	$4, %esp
 9326 0031 5B       		popl	%ebx
 9327 0032 5D       		popl	%ebp
 9328 0033 C3       		ret
 9329              	LBE111:
 9330              	Lscope92:
 9332              		.section	.text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE14_M_create_nodeERKS1_,"x"
 9333              		.linkonce discard
 9334              		.align 2
 9338              	.globl __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE14_M_create_nodeERKS1_
 9340              	__ZNSt4listIN10ThreadPool7JobDataESaIS1_EE14_M_create_nodeERKS1_:
 9342              	Ltext46:
 9344              	LM385:
 9345 0000 55       		pushl	%ebp
 9346 0001 89E5     		movl	%esp, %ebp
 9347 0003 83EC18   		subl	$24, %esp
 9349              	LM386:
 9350              	LBB112:
 9351 0006 8B4508   		movl	8(%ebp), %eax
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 168


 9352 0009 890424   		movl	%eax, (%esp)
 9353 000c E8000000 		call	__ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_get_nodeEv
 9353      00
 9354 0011 8945FC   		movl	%eax, -4(%ebp)
 9356              	LM387:
 9357 0014 8B450C   		movl	12(%ebp), %eax
 9358 0017 89442404 		movl	%eax, 4(%esp)
 9359 001b 8B45FC   		movl	-4(%ebp), %eax
 9360 001e 83C008   		addl	$8, %eax
 9361 0021 890424   		movl	%eax, (%esp)
 9362 0024 E8000000 		call	__ZSt10_ConstructIN10ThreadPool7JobDataES1_EvPT_RKT0_
 9362      00
 9363              	L317:
 9364              	L318:
 9365              	L320:
 9367              	LM388:
 9368 0029 8B45FC   		movl	-4(%ebp), %eax
 9369              	L315:
 9370 002c C9       		leave
 9371 002d C3       		ret
 9372              	LBE112:
 9376              	Lscope93:
 9378 002e 9090     		.section	.text$_ZSt10_ConstructIN10ThreadPool7JobDataES1_EvPT_RKT0_,"x"
 9379              		.linkonce discard
 9380              		.align 2
 9384              	.globl __ZSt10_ConstructIN10ThreadPool7JobDataES1_EvPT_RKT0_
 9386              	__ZSt10_ConstructIN10ThreadPool7JobDataES1_EvPT_RKT0_:
 9388              	Ltext47:
 9390              	LM389:
 9391 0000 55       		pushl	%ebp
 9392 0001 89E5     		movl	%esp, %ebp
 9393 0003 83EC18   		subl	$24, %esp
 9395              	LM390:
 9396              	LBB113:
 9397 0006 8B4508   		movl	8(%ebp), %eax
 9398 0009 89442404 		movl	%eax, 4(%esp)
 9399 000d C704240C 		movl	$12, (%esp)
 9399      000000
 9400 0014 E8000000 		call	__ZnwjPv
 9400      00
 9401 0019 8945FC   		movl	%eax, -4(%ebp)
 9402 001c 837DFC00 		cmpl	$0, -4(%ebp)
 9403 0020 741C     		je	L322
 9404 0022 8B550C   		movl	12(%ebp), %edx
 9405 0025 8B02     		movl	(%edx), %eax
 9406 0027 8B4DFC   		movl	-4(%ebp), %ecx
 9407 002a 8901     		movl	%eax, (%ecx)
 9408 002c 8B4204   		movl	4(%edx), %eax
 9409 002f 8B4DFC   		movl	-4(%ebp), %ecx
 9410 0032 894104   		movl	%eax, 4(%ecx)
 9411 0035 8B4208   		movl	8(%edx), %eax
 9412 0038 8B55FC   		movl	-4(%ebp), %edx
 9413 003b 894208   		movl	%eax, 8(%edx)
 9414              	L325:
 9415              	L322:
 9416 003e C9       		leave
 9417 003f C3       		ret
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 169


 9418              	LBE113:
 9419              	Lscope94:
 9421              		.section	.text$_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10Threa
 9422              		.linkonce discard
 9423              		.align 2
 9428              	.globl __ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt
 9430              	__ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vector
 9432              	Ltext48:
 9434              	LM391:
 9435 0000 55       		pushl	%ebp
 9436 0001 89E5     		movl	%esp, %ebp
 9437 0003 53       		pushl	%ebx
 9438 0004 83EC14   		subl	$20, %esp
 9440              	LM392:
 9441              	LBB114:
 9442 0007 8B4510   		movl	16(%ebp), %eax
 9443 000a 8945F8   		movl	%eax, -8(%ebp)
 9445              	LM393:
 9446              	L328:
 9447 000d 8D450C   		leal	12(%ebp), %eax
 9448 0010 89442404 		movl	%eax, 4(%esp)
 9449 0014 8D4508   		leal	8(%ebp), %eax
 9450 0017 890424   		movl	%eax, (%esp)
 9451 001a E8000000 		call	__ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorI
 9451      00
 9452 001f 84C0     		testb	%al, %al
 9453 0021 7502     		jne	L331
 9454 0023 EB3C     		jmp	L329
 9455              	L331:
 9457              	LM394:
 9458 0025 8D4508   		leal	8(%ebp), %eax
 9459 0028 890424   		movl	%eax, (%esp)
 9460 002b E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv
 9460      00
 9461 0030 89C3     		movl	%eax, %ebx
 9462 0032 8D45F8   		leal	-8(%ebp), %eax
 9463 0035 890424   		movl	%eax, (%esp)
 9464 0038 E8000000 		call	__ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv
 9464      00
 9465 003d 895C2404 		movl	%ebx, 4(%esp)
 9466 0041 890424   		movl	%eax, (%esp)
 9467 0044 E8000000 		call	__ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_
 9467      00
 9469              	LM395:
 9470 0049 8D4508   		leal	8(%ebp), %eax
 9471 004c 890424   		movl	%eax, (%esp)
 9472 004f E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 9472      00
 9473 0054 8D45F8   		leal	-8(%ebp), %eax
 9474 0057 890424   		movl	%eax, (%esp)
 9475 005a E8000000 		call	__ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
 9475      00
 9476 005f EBAC     		jmp	L328
 9477              	L329:
 9479              	LM396:
 9480 0061 8B45F8   		movl	-8(%ebp), %eax
 9481              	L333:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 170


 9483              	LM397:
 9484              	L334:
 9485              	L336:
 9486              	L327:
 9487 0064 83C414   		addl	$20, %esp
 9488 0067 5B       		popl	%ebx
 9489 0068 5D       		popl	%ebp
 9490 0069 C3       		ret
 9491              	LBE114:
 9495              	Lscope95:
 9497 006a 9090     		.section	.text$_ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPKS2_RS3_EC
 9498              		.linkonce discard
 9499              		.align 2
 9502              	.globl __ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPKS2_RS3_EC2Ev
 9504              	__ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPKS2_RS3_EC2Ev:
 9506              	Ltext49:
 9508              	LM398:
 9509              	L339:
 9510              	L338:
 9511 0000 55       		pushl	%ebp
 9512 0001 89E5     		movl	%esp, %ebp
 9514              	LM399:
 9515 0003 5D       		popl	%ebp
 9516 0004 C3       		ret
 9517              	Lscope96:
 9521 0005 909090   		.text
 9523              	Letext:
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 171


DEFINED SYMBOLS
                            *ABS*:00000000 ThreadPool.cpp
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:4184   .text:0000001e __ZN10ThreadPoolC2Eii
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6861   .rdata$_ZTV10ThreadPool:00000000 __ZTV10ThreadPool
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:4373   .text:0000020c __ZN10ThreadPoolC1Eii
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:4590   .text:000003fa __ZN10ThreadPoolD2Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:4718   .text:0000051a __ZN10ThreadPoolD1Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:4844   .text:0000063a __ZN10ThreadPoolD0Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:5708   .text:00000f82 __ZN10ThreadPool13GetWaitHandleEm
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:5806   .text:00001040 __ZN10ThreadPool10ThreadProcEPv@4
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8352   .rdata$_ZTI10ThreadPool:00000000 __ZTI10ThreadPool
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8358   .rdata$_ZTS10ThreadPool:00000000 __ZTS10ThreadPool
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9430   .text$_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_12__false_type:00000000 __ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_12__false_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8284   .text$_ZSt13__destroy_auxIPN10ThreadPool10ThreadDataEEvT_S3_12__false_type:00000000 __ZSt13__destroy_auxIPN10ThreadPool10ThreadDataEEvT_S3_12__false_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8209   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5eraseESt14_List_iteratorIS1_RS1_PS1_E:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5eraseESt14_List_iteratorIS1_RS1_PS1_E
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9386   .text$_ZSt10_ConstructIN10ThreadPool7JobDataES1_EvPT_RKT0_:00000000 __ZSt10_ConstructIN10ThreadPool7JobDataES1_EvPT_RKT0_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9340   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE14_M_create_nodeERKS1_:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE14_M_create_nodeERKS1_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8139   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE6insertESt14_List_iteratorIS1_RS1_PS1_ERKS1_:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE6insertESt14_List_iteratorIS1_RS1_PS1_ERKS1_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9301   .text$_ZN9__gnu_cxxmiIPN10ThreadPool10ThreadDataES3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE:00000000 __ZN9__gnu_cxxmiIPN10ThreadPool10ThreadDataES3_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9282   .text$_ZSt8_DestroyIN10ThreadPool10ThreadDataEEvPT_:00000000 __ZSt8_DestroyIN10ThreadPool10ThreadDataEEvPT_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9238   .text$_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEEEvT_S9_12__false_type:00000000 __ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEEEvT_S9_12__false_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9174   .text$_ZSt6__copyIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag:00000000 __ZSt6__copyIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9139   .text$_ZSt11__copy_aux2IPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_12__false_type:00000000 __ZSt11__copy_aux2IPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_12__false_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9098   .text$_ZSt10__copy_ni2IPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6vectorIS1_SaIS1_EEEEET0_T_SA_S9_11__true_type:00000000 __ZSt10__copy_ni2IPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6vectorIS1_SaIS1_EEEEET0_T_SA_S9_11__true_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9054   .text$_ZSt10__copy_ni1IN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type:00000000 __ZSt10__copy_ni1IN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9019   .text$_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:00000000 __ZSt4copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8063   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EES7_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8008   .text$_ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EdeEv:00000000 __ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EdeEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6874   .text$_ZNSt19_List_iterator_base7_M_incrEv:00000000 __ZNSt19_List_iterator_base7_M_incrEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8393   .text$_ZNSt19_List_iterator_baseC2EPSt15_List_node_base:00000000 __ZNSt19_List_iterator_baseC2EPSt15_List_node_base
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7980   .text$_ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E:00000000 __ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1EPSt10_List_nodeIS1_E
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8032   .text$_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEEEvT_S9_:00000000 __ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEEEvT_S9_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8322   .text$_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:00000000 __ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8972   .text$_ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE8allocateEj:00000000 __ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE8allocateEj
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8946   .text$_ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE11_M_allocateEj:00000000 __ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE11_M_allocateEj
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8921   .text$_ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv:00000000 __ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEdeEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8861   .text$_ZSt15__copy_backwardIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag:00000000 __ZSt15__copy_backwardIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_St26random_access_iterator_tag
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8835   .text$_ZSt19__iterator_categoryIPN10ThreadPool10ThreadDataEENSt15iterator_traitsIT_E17iterator_categoryERKS4_:00000000 __ZSt19__iterator_categoryIPN10ThreadPool10ThreadDataEENSt15iterator_traitsIT_E17iterator_categoryERKS4_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8803   .text$_ZNSt24__copy_backward_dispatchIPN10ThreadPool10ThreadDataES2_12__false_typeE4copyES2_S2_S2_:00000000 __ZNSt24__copy_backward_dispatchIPN10ThreadPool10ThreadDataES2_12__false_typeE4copyES2_S2_S2_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8773   .text$_ZSt19__copy_backward_auxIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_:00000000 __ZSt19__copy_backward_auxIPN10ThreadPool10ThreadDataES2_ET0_T_S4_S3_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8733   .text$_ZSt38__copy_backward_output_normal_iteratorIPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6vectorIS1_SaIS1_EEEEET0_T_SA_S9_11__true_type:00000000 __ZSt38__copy_backward_output_normal_iteratorIPN10ThreadPool10ThreadDataEN9__gnu_cxx17__normal_iteratorIS2_St6vectorIS1_SaIS1_EEEEET0_T_SA_S9_11__true_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7596   .text$_ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv:00000000 __ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8689   .text$_ZSt37__copy_backward_input_normal_iteratorIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type:00000000 __ZSt37__copy_backward_input_normal_iteratorIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_11__true_type
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8654   .text$_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_:00000000 __ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS3_SaIS3_EEEES8_ET0_T_SA_S9_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7619   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8630   .text$_ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPS2_RS2_EC2Ev:00000000 __ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPS2_RS2_EC2Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7566   .text$_ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_:00000000 __ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS3_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8367   .text$_ZnwjPv:00000000 __ZnwjPv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7523   .text$_ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_:00000000 __ZSt10_ConstructIN10ThreadPool10ThreadDataES1_EvPT_RKT0_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6833   .text$_ZSt8_DestroyIPN10ThreadPool10ThreadDataEEvT_S3_:00000000 __ZSt8_DestroyIPN10ThreadPool10ThreadDataEEvT_S3_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7487   .text$_ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE10deallocateEPS1_j:00000000 __ZNSt14__simple_allocIN10ThreadPool10ThreadDataESt24__default_alloc_templateILb1ELi0EEE10deallocateEPS1_j
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7460   .text$_ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1_j:00000000 __ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EE13_M_deallocateEPS1_j
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7423   .text$_ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EED2Ev:00000000 __ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EED2Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7397   .text$_ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EEC2ERKS2_:00000000 __ZNSt18_Vector_alloc_baseIN10ThreadPool10ThreadDataESaIS1_ELb1EEC2ERKS2_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7369   .text$_ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EEC2ERKS2_:00000000 __ZNSt12_Vector_baseIN10ThreadPool10ThreadDataESaIS1_EEC2ERKS2_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6793   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9pop_frontEv:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9pop_frontEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6902   .text$_ZNKSt19_List_iterator_baseeqERKS_:00000000 __ZNKSt19_List_iterator_baseeqERKS_
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 172


f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6955   .text$_ZN10ThreadPool15CheckThreadStopEv:00000000 __ZN10ThreadPool15CheckThreadStopEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6754   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE10push_frontERKS1_:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE10push_frontERKS1_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6712   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9push_backERKS1_:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE9push_backERKS1_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6673   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5clearEv:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5clearEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6641   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5clearEv:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5clearEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6617   .text$_ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv:00000000 __ZNKSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EptEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6577   .text$_ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EppEi:00000000 __ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EppEi
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6929   .text$_ZNKSt19_List_iterator_baseneERKS_:00000000 __ZNKSt19_List_iterator_baseneERKS_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6546   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE3endEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7339   .text$_ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1ERKS4_:00000000 __ZNSt14_List_iteratorIN10ThreadPool7JobDataERS1_PS1_EC1ERKS4_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6512   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EE5beginEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6490   .text$_ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv:00000000 __ZNK9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEptEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6467   .text$_ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv:00000000 __ZN9__gnu_cxx17__normal_iteratorIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEppEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6429   .text$_ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:00000000 __ZN9__gnu_cxxneIPN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6312   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6401   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:5464   .text:00000d82 __ZN10ThreadPool21GetWorkingThreadCountEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6347   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE9push_backERKS1_:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE9push_backERKS1_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:5185   .text:00000acc __ZN10ThreadPool7DestroyEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7219   .text$_ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1ELi0EEE10deallocateEPS3_j:00000000 __ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1ELi0EEE10deallocateEPS3_j
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7193   .text$_ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_nodeIS1_E:00000000 __ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_put_nodeEPSt10_List_nodeIS1_E
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8610   .text$_ZSt8_DestroyIN10ThreadPool7JobDataEEvPT_:00000000 __ZSt8_DestroyIN10ThreadPool7JobDataEEvPT_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7254   .text$_ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EE7__clearEv:00000000 __ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EE7__clearEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:4986   .text:00000814 __ZN10ThreadPool6CreateEi
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6225   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EED1Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6195   .text$_ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EEC1ERKS2_:00000000 __ZNSt6vectorIN10ThreadPool10ThreadDataESaIS1_EEC1ERKS2_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6173   .text$_ZNSaIN10ThreadPool10ThreadDataEED1Ev:00000000 __ZNSaIN10ThreadPool10ThreadDataEED1Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6153   .text$_ZNSaIN10ThreadPool10ThreadDataEEC1Ev:00000000 __ZNSaIN10ThreadPool10ThreadDataEEC1Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:4563   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EED1Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7158   .text$_ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EED2Ev:00000000 __ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EED2Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7113   .text$_ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1ELi0EEE8allocateEj:00000000 __ZNSt14__simple_allocISt10_List_nodeIN10ThreadPool7JobDataEESt24__default_alloc_templateILb1ELi0EEE8allocateEj
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7090   .text$_ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_get_nodeEv:00000000 __ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EE11_M_get_nodeEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7072   .text$_ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EEC2ERKS2_:00000000 __ZNSt16_List_alloc_baseIN10ThreadPool7JobDataESaIS1_ELb1EEC2ERKS2_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:7022   .text$_ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EEC2ERKS2_:00000000 __ZNSt10_List_baseIN10ThreadPool7JobDataESaIS1_EEC2ERKS2_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6991   .text$_ZNSt4listIN10ThreadPool7JobDataESaIS1_EEC1ERKS2_:00000000 __ZNSt4listIN10ThreadPool7JobDataESaIS1_EEC1ERKS2_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6133   .text$_ZNSaIN10ThreadPool7JobDataEED1Ev:00000000 __ZNSaIN10ThreadPool7JobDataEED1Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:6111   .text$_ZNSaIN10ThreadPool7JobDataEEC1Ev:00000000 __ZNSaIN10ThreadPool7JobDataEEC1Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:5564   .text:00000e64 __ZN10ThreadPool13AddJobToQueueEPFmPvES0_PNS_10IRunObjectENS_14ThreadPriorityE
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8589   .text$_ZNK9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv:00000000 __ZNK9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEE4baseEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8551   .text$_ZN9__gnu_cxxmiIPKN10ThreadPool10ThreadDataES4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE:00000000 __ZN9__gnu_cxxmiIPKN10ThreadPool10ThreadDataES4_St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSB_RKNS8_IT0_SA_EE
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8518   .text$_ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv:00000000 __ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE3endEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:9504   .text$_ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPKS2_RS3_EC2Ev:00000000 __ZNSt8iteratorISt26random_access_iterator_tagN10ThreadPool10ThreadDataEiPKS2_RS3_EC2Ev
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8488   .text$_ZN9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS4_:00000000 __ZN9__gnu_cxx17__normal_iteratorIPKN10ThreadPool10ThreadDataESt6vectorIS2_SaIS2_EEEC1ERKS4_
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8457   .text$_ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv:00000000 __ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE5beginEv
f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s:8418   .text$_ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE4sizeEv:00000000 __ZNKSt6vectorIN10ThreadPool10ThreadDataESaIS1_EE4sizeEv

UNDEFINED SYMBOLS
__Unwind_SjLj_Resume
___gxx_personality_sj0
__Unwind_SjLj_Register
__Unwind_SjLj_Unregister
_InitializeCriticalSection@4
__ZTIPKc
_DeleteCriticalSection@4
_CreateEventA@16
_ResumeThread@4
_SetEvent@4
GAS LISTING f:/K7_TOUR/CODE/plutommi/Customer/ResGenerator/gcctmp/cc0kbaaa.s 			page 173


_Sleep@4
_CloseHandle@4
_GetLastError@0
_EnterCriticalSection@4
_WaitForSingleObject@8
_LeaveCriticalSection@4
_GetCurrentThreadId@0
_WaitForMultipleObjects@16
_ResetEvent@4
__ZTVN10__cxxabiv117__class_type_infoE
___cxa_rethrow
___cxa_end_catch
___cxa_begin_catch
_reslog_adaptor_log
__beginthreadex
__assert
__ZNSt24__default_alloc_templateILb1ELi0EE10deallocateEPvj
___cxa_throw
___cxa_allocate_exception
__ZNSt24__default_alloc_templateILb1ELi0EE8allocateEj
__ZdlPv
