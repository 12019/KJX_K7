[APP NAME] = Cosmos Music Player App
[SCOPE] = COSMOS
[MODULE] = MOD_MMI_MEDIA_APP

#start trace

/* Vapp_music_player.cpp */

TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_RUN, "[MUSICPLY] VappMusicPlayerApp::onRun()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_INIT_1ST_STAGE, "[MUSICPLY] VappMusicPlayerApp::init1stStage(), DBState:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_INIT_2ND_STAGE, "[MUSICPLY] VappMusicPlayerApp::init2ndStage(), DBState:%d, action:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_INIT_2ND_STAGE_TIMEOUT, "[MUSICPLY] VappMusicPlayerApp::init2ndStageTimerTimeout(), initStage:%d, DBState:%d, action:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_STOP_INIT_2ND_STAGE, "[MUSICPLY] VappMusicPlayerApp::stopInit2ndStage(), DBState:%d, action:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_DEINIT, "[MUSICPLY] VappMusicPlayerApp::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC, "[MUSICPLY] VappMusicPlayerApp::onProc(), evnet: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC_EVT_ID_USB_ENTER_MS_MODE, "[MUSICPLY] VappMusicPlayerApp::onProc() EVT_ID_USB_ENTER_MS_MODE, actionMode: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC_EVT_ID_SRV_SHUTDOWN_DEINIT, "[MUSICPLY] VappMusicPlayerApp::onProc() EVT_ID_SRV_SHUTDOWN_DEINIT")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC_PRE_LOCK_ROUTING_1, "[MUSICPLY] VappMusicPlayerApp::onProcPreLockRouting(), return ERR 1, actionMode:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC_PRE_LOCK_ROUTING_2, "[MUSICPLY] VappMusicPlayerApp::onProcPreLockRouting(), return ERR 2, actionMode:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC_PRE_LOCK_ROUTING_3, "[MUSICPLY] VappMusicPlayerApp::onProcPreLockRouting(), return OK, actionMode:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC_UCM_STATUS_CHANGE_MAKING_CALL_D, "[MUSICPLY] VappMusicPlayerApp::onProcUcmStatusChange(), makingCall:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROC_ORIENTATION_CHANGE_DEGREE_D, "[MUSICPLY] VappMusicPlayerApp::onProcOrientationChange(), degree:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROCESS_CLOSE, "[MUSICPLY] VappMusicPlayerApp::onProcessClose(), actionMode: %d, playState: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_APP_CLOSING_SHRINK_DB, "[MUSICPLY] VappMusicPlayerApp::onAppClosingShrinkDB(), DBState:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_GROUP_ACTIVE, "[MUSICPLY] VappMusicPlayerApp::onGroupActive()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_GROUP_INACTIVE, "[MUSICPLY] VappMusicPlayerApp::onGroupInactive(), actionMode: %d, playState: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SHOW_WAIT_ICON, "[MUSICPLY] VappMusicPlayerApp::showWaitIcon(), delayShow: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_HIDE_WAIT_ICON, "[MUSICPLY] VappMusicPlayerApp::hideWaitIcon()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_HANDLE_POST_CLOSING_PAGE, "[MUSICPLY] VappMusicPlayerApp::handlePostClosingPage(), action=[%d], is_dying=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_CHECK_LAUNCH_TO_NP, "[MUSICPLY] VappMusicPlayerApp::checkLaunchToNowPlaying(), isLaunchByMainMenu:%d, isLaunchToNowPlaying:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SET_IS_DYING, "[MUSICPLY] VappMusicPlayerApp::setIsDying()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_EVENT_HANDLER, "[MUSICPLY] VappMusicPlayerApp::eventHandler(), ID=[%d], action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_EVENT_HANDLER_OK_ACTION_D, "[MUSICPLY] VappMusicPlayerApp::eventHandler(), OK, action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_EVENT_HANDLER_CANCEL_ACTION_D, "[MUSICPLY] VappMusicPlayerApp::eventHandler(), Cancel, action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_EVENT_HANDLER_NO_PRESS_ACTION_D, "[MUSICPLY] VappMusicPlayerApp::eventHandler(), No Press, action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_LIST_MENU_ITEM_TAPPED, "[MUSICPLY] VappMusicPlayerApp::onListMenuItemTapped(), index: %d, state: %d, action: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_LIST_MENU_ITEM_TAPPED_LIST_MENU_MODE_INVALID, "[MUSICPLY] VappMusicPlayerApp::onListMenuItemTapped(), listMenu mode invalid")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_LIST_MENU_ITEM_LONG_TAPPED, "[MUSICPLY] VappMusicPlayerApp::onListMenuItemLongTapped(), index: %d, state: %d, action: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_MENU_ITEM_TAPPED, "[MUSICPLY] VappMusicPlayerApp::onMenuItemTapped(), event:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_LIST_MENU_DRAG_STATE_CHANGE, "[MUSICPLY] VappMusicPlayerApp::onListMenuDragStateChange(), drag=[%d], suspend=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_LIST_MENU_DRAG_STATE_CHANGE_ENABLE, "[MUSICPLY] VappMusicPlayerApp::onListMenuDragStateChange(), enable")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PLAYBACK_STATE_CHANGE, "[MUSICPLY] VappMusicPlayerApp::onPlaybackStateChange(), state: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PLSVCALLBACK, "[MUSICPLY] VappMusicPlayerApp::onPLSVCallback(), event=[%d], result=[%d], param=[%d], action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_MDICALLBACK, "[MUSICPLY] VappMusicPlayerApp::onMDICallback(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PLAYER_PAGE_CALLBACK, "[MUSICPLY] VappMusicPlayerApp::onPlayerPageCallback(), action: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_CLEAR_NOW_PLAYING_PTR, "[MUSICPLY] VappMusicPlayerApp::clearNowPlayingPtr()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_CLEAR_COVER_FLOW_PTR, "[MUSICPLY] VappMusicPlayerApp::clearCoverFlowPtr()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SET_VIEW_TYPE, "[MUSICPLY] VappMusicPlayerApp::setViewType(), view:[%d], mode:[%d], index:[%d], action:[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SET_VIEW_TYPE_SERVICE_NOT_READY, "[MUSICPLY] VappMusicPlayerApp::setViewType(), service not ready")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SET_VIEW_TYPE_SAME, "[MUSICPLY] VappMusicPlayerApp::setViewType(), same")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_UPDATE_CONTENT_INDEX, "[MUSICPLY] VappMusicPlayerApp::updateContent(), index: %d, updateCount: %d, updateActiveCount: %d, reset: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_UPDATE_HIGH_LIGHT, "[MUSICPLY] VappMusicPlayerApp::updateHighLight()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_GO_TO_ROOT_SCREEN, "[MUSICPLY] VappMusicPlayerApp::goToRootScreen()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_CLOSE_SCREEN, "[MUSICPLY] VappMusicPlayerApp::closeScreen()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_GO_TO_ROOT, "[MUSICPLY] VappMusicPlayerApp::goToRoot(), action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_GO_TO_ROOT_VIEW_D, "[MUSICPLY] VappMusicPlayerApp::goToRoot(), view: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_GO_TO_NOW_PLAYING, "[MUSICPLY] VappMusicPlayerApp::goToNowPlaying(), index: %d, isStartPlay: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_NOW_PLAYING_PLAY_SONG, "[MUSICPLY] VappMusicPlayerApp::nowPlayingPlaySong(), playAfterSwitchSong=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PLAYBACK_FAIL, "[MUSICPLY] VappMusicPlayerApp::onPlaybackFail(), result:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_HANDLE_POST_ON_INVALID_FILE, "[MUSICPLY] VappMusicPlayerApp::handlePostOnInvalidFile()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_NOW_PLAYING_SET_FAVORITE, "[MUSICPLY] VappMusicPlayerApp::nowPlayingSetFavorite()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_GO_TO_SETTING, "[MUSICPLY] VappMusicPlayerApp::goToSetting()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_GO_TO_SOUND_EFFECT, "[MUSICPLY] VappMusicPlayerApp::goToSoundEffect()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_BACK_FROM_SOUND_EFFECT, "[MUSICPLY] VappMusicPlayerApp::backFromSoundEffect()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_GO_TO_COVER_FLOW, "[MUSICPLY] VappMusicPlayerApp::goToCoverFlow()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_EXIT_COVER_FLOW, "[MUSICPLY] VappMusicPlayerApp::exitCoverFlow()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_DISABLE_TAB_PAGE, "[MUSICPLY] VappMusicPlayerApp::disableTabPageTab(), isDisable:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_RESET_PEN_INPUT, "[MUSICPLY] VappMusicPlayerApp::resetPenInput()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_RESET_KEY_INPUT, "[MUSICPLY] VappMusicPlayerApp::resetKeyInput()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_KEY_BACK, "[MUSICPLY] VappMusicPlayerApp::onKeyBack()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_SCREEN_ROTATE, "[MUSICPLY] VappMusicPlayerApp::onScreenRotate(), rotateTo: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_PLAYER_PAGE_PLAY_SONG, "[MUSICPLY] VappMusicPlayerApp::playerPagePlaySong(), playAfterSwitchSong=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_PLAYER_PAGE_RESET_ERROR_MSG, "[MUSICPLY] VappMusicPlayerApp::playerPageResetErrorMsg()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_PLAYER_PAGE_RESET_SLIDER, "[MUSICPLY] VappMusicPlayerApp::playerPageResetSlider()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_PLAYER_PAGE_MAXIMIZE_SLIDER, "[MUSICPLY] VappMusicPlayerApp::playerPageMaximizeSlider()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_STOP, "[MUSICPLY] VappMusicPlayerApp::onStop()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_MEMORY_CARD_CHANGE, "[MUSICPLY] VappMusicPlayerApp::onMemoryCardChange(), isPlugIn: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SET_ACTION_MODE, "[MUSICPLY] VappMusicPlayerApp::setActionMode(), actionMode: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_FUNC_REFRESH_DB, "[MUSICPLY] VappMusicPlayerApp::onFuncRefreshDB()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_FUNC_RESET_DB, "[MUSICPLY] VappMusicPlayerApp::onFuncResetDB()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_CONFIRM, "[MUSICPLY] VappMusicPlayerApp::popupConfirm()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_CONFIRM_CLOSE, "[MUSICPLY] VappMusicPlayerApp::popupConfirmClose()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_WAITING, "[MUSICPLY] VappMusicPlayerApp::popupWaiting()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_WAITING_CANCELED, "[MUSICPLY] VappMusicPlayerApp::onWaitingCanceled()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_WAITING_CLOSE, "[MUSICPLY] VappMusicPlayerApp::popupWaitingClose()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_PROGRESS, "[MUSICPLY] VappMusicPlayerApp::popupProgress()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_PROGRESS_CLOSE, "[MUSICPLY] VappMusicPlayerApp::popupProgressClose()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_PROGRESS_CANCELED, "[MUSICPLY] VappMusicPlayerApp::onProgressCanceled()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_INPUT, "[MUSICPLY] VappMusicPlayerApp::popupInput()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_INPUT_POPUP_CONFIRM, "[MUSICPLY] VappMusicPlayerApp::onInputPopupConfirm()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_MENU, "[MUSICPLY] VappMusicPlayerApp::popupMenu()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_POPUP_MENU_CLOSE, "[MUSICPLY] VappMusicPlayerApp::popupMenuClose()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SHOW_BALLOON, "[MUSICPLY] VappMusicPlayerApp::showBalloon()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_CLOSE_ALL_POPUP_D, "[MUSICPLY] VappMusicPlayerApp::closeAllPopup(), doClose=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_CHECK_PLSVACTION, "[MUSICPLY] VappMusicPlayerApp::checkPLSVAction(): m_plsvReturnValue=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_SET_SUB_PAGE_ENTERING, "MUSICPLY] VappMusicPlayerApp::setSubPageEntering(), entering=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_EXIT_ON_ERROR, "[MUSICPLY] VappMusicPlayerApp::exitOnError(), action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_NCENTER_STATUS, "[MUSICPLY] VappMusicPlayerApp::onNCenterStatus(), evt=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_PLAYER_SCREEN_ON_KEY_INPUT_BACK, "[MUSICPLY] VappMusicPlayerScreen::onKeyInput(): Back")
TRC_MSG(TRC_VAPP_MUSICPLY_LIST_MENU_ON_DRAG_START, "[MUSICPLY] VappMusicPlayerListMenu::onDragStart()")
TRC_MSG(TRC_VAPP_MUSICPLY_LIST_MENU_ON_DRAG_END, "[MUSICPLY] VappMusicPlayerListMenu::onDragEnd()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_GROUP_HIDDEN, "[MUSICPLY] VappMusicPlayerListMenu::onGroupHidden()")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_GROUP_UNHIDDEN, "[MUSICPLY] VappMusicPlayerListMenu::onGroupUnhidden(), action=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_CREATE_TAB_PAGE, "[MUSICPLY] VappMusicPlayerTabPage::onCreateTabPage(), tabID=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_TAB_SWITCHING, "[MUSICPLY] VappMusicPlayerTabPage::onTabSwitching(), preTabID=[%d], tabID=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_ON_TAB_SWITCHED, "[MUSICPLY] VappMusicPlayerTabPage::onTabSwitched(), tabID=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_VAPP_DO_TAB_PAGE_CLOSE, "[MUSICPLY] VappMusicPlayerTabPage::doTabPageClose(), tabID=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SUBPAGE_ON_ENTER, "[MUSICPLY] VappMusicPlayerSubPage::onEnter(), isBackward=[%d] viewType=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SUBPAGE_ON_ENTERED, "[MUSICPLY] VappMusicPlayerSubPage::onEntered(), viewType=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SUBPAGE_ON_ENTERED_POST_PROC, "[MUSICPLY] VappMusicPlayerSubPage::onEnteredPostProc(), viewType=[%d], DBState=[%d], actionMode=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SUBPAGE_ON_EXIT, "[MUSICPLY] VappMusicPlayerSubPage::onExit(), isBackward=[%d] viewType=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SUBPAGE_ON_EXITED, "[MUSICPLY] VappMusicPlayerSubPage::onExited(), viewType=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SUBPAGE_ON_EXITED2, "[MUSICPLY] VappMusicPlayerSubPage::onExited2(), viewType=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SUBPAGE_UPDATELISTMENUCONTENT, "[MUSICPLY] VappMusicPlayerSubPage::updateListMenuContent(), viewType=[%d]")

/* vapp_music_player_coverflow.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_INIT, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_DEINIT, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_ENTER, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onEnter(), isBackward: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_ENTERED, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onEntered()")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_ENTERED_POST_PROC, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onEnteredPostProc()")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_EXIT, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onExit(), isBackward: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_EXITED, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onExited()")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_ON_EXITED2, "[MUSICPLY] VappMusicPlayerCoverFlowPage::onExited2()")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_PAGE_CREATE_CELL, "[MUSICPLY] VappMusicPlayerCoverFlowPage::createCell(), index:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_COVER_FLOW_MENU_UPDATE_CELL, "[MUSICPLY] VappMusicPlayerCoverFlowMenu::updateCellImage(), index:%d")


/* vapp_music_player_ctrlplayback.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_SET_CACHE,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::setCache(), reallocate=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_FREE_CACHE,  "[MUSICPLY] VappMusicPlayerCtrlPlayback::freeCache()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_REG_INT_CB,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::registerInterruptCallback(), reg=[%d], interrupt=[%d], is_reg=%d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_REG_BG_CB,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::registerBackgroundCallback()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_OPEN,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::open()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_OPEN_RESULT,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::open(), result=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_PLAY,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::play(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_DO_PLAY,     "[MUSICPLY] VappMusicPlayerCtrlPlayback::doPlay(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_DO_PLAY_1,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::doPlay(), result=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_RESUME_INT_PLAY, "[MUSICPLY] VappMusicPlayerCtrlPlayback::resumeInterruptPlay(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_PAUSE,       "[MUSICPLY] VappMusicPlayerCtrlPlayback::pause(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_RESUME,      "[MUSICPLY] VappMusicPlayerCtrlPlayback::resume(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_DO_RESUME,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::doResume(), result=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_STOP,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::stop(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_CLOSE_FILE,  "[MUSICPLY] VappMusicPlayerCtrlPlayback::closeFile(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_PLAYPAUSE,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::playpause(), state=[%d], int=[%d], int state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_SEEK,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::seek(), state=[%d], time=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_SEEK_START,  "[MUSICPLY] VappMusicPlayerCtrlPlayback::seekStart(), state=[%d], time=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_SEEK_STOP,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::seekStop()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_SET_PLAY_STATE,      "[MUSICPLY] VappMusicPlayerCtrlPlayback::setPlayState(), state=[%d], new state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_ON_MDI_CB,           "[MUSICPLY] VappMusicPlayerCtrlPlayback::onMDICallback(), result=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_TERMINATEBGPLAY,     "[MUSICPLY] VappMusicPlayerCtrlPlayback::terminateBackgroundPlay()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_ON_SEEK_CALLBACK,    "[MUSICPLY] VappMusicPlayerCtrlPlayback::onSeekCallback(), result=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_ON_MDI_INTERRUPTCB,  "[MUSICPLY] VappMusicPlayerCtrlPlayback::onMDIInterruptCallback(), result=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_ON_MDI_INTERRUPTCB_STATE,  "[MUSICPLY] VappMusicPlayerCtrlPlayback::onMDIInterruptCallback(), flag=[%d], state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_ON_MDI_BG_CB,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::onMDIBackgroundCallback(), result=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_ON_MDI_BG_CB_STATE,        "[MUSICPLY] VappMusicPlayerCtrlPlayback::onMDIBackgroundCallback(), state=[%d], int=[%d], int_state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_ON_BT_OPEN_CB,       "[MUSICPLY] VappMusicPlayerCtrlPlayback::onBTOpenCallback(), result=[%d], mode=[%d], state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_OPEN_A2DP,           "[MUSICPLY] VappMusicPlayerCtrlPlayback::openA2DP()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_BT_AUD_EVENT_HDLR,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::BTAudEventHandler(), event=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_CLEAR_INTR_STATE,   "[MUSICPLY] VappMusicPlayerCtrlPlayback::clearInterruptState(), keepInterrupt=[%d], keepState=[%d], isInterrupted=[%d], interruptedState=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_TOUCH_FB_ON,   "[MUSICPLY] VappMusicPlayerCtrlPlayback, Touch feedback ON")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRLPLAYBACK_TOUCH_FB_OFF,   "[MUSICPLY] VappMusicPlayerCtrlPlayback, Touch feedback OFF")

/* Vapp_music_player_playerbase.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_PLAYERBASE_EVENT_HDLR,  "[MUSICPLY] VappMusicPlayerPlayerBase::eventHandler(), id=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_PLAYERBASE_SHOW_ERROR,  "[MUSICPLY] VappMusicPlayerPlayerBase::showErrorMessage(), startTimer=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_PLAYERBASE_ON_KEY_ABORT,   "[MUSICPLY] VappMusicPlayerPlayerBase::onKeyAbort(), LP=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_PLAYERBASE_GET_ALBUM_COVER_BY_SONG_ID,   "[MUSICPLY] VappMusicPlayerPlayerBase::getAlbumCoverBySongId(), ID:%d, width:%d, height:%d, noBG:%d")

/* Vapp_music_player_nowplaying.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_INIT,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_DEINIT,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_ON_ENTER,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::onEnter(), isBackward=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_ON_ENTERED,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::onEntered()")
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_ON_EXIT,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::onExit(), isBackward=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_ON_EXITED,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::onExited()")
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_UPDATE_LAYOUT,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::updateLayout()")
TRC_MSG(TRC_VAPP_MUSICPLY_NOW_PLAY_SET_ALBUM_COVER,  "[MUSICPLY] VappMusicPlayerNowPlayingPage::setAlbumCover()")
TRC_MSG(TRC_VAPP_MUSICPLY_LYRIC_PANEL_INIT,  "[MUSICPLY] VappMusicPlayerLyricsPanel::initLyrics(), SUCCESS")
TRC_MSG(TRC_VAPP_MUSICPLY_LYRIC_PANEL_INIT_FAIL,  "[MUSICPLY] VappMusicPlayerLyricsPanel::initLyrics(), FAIL")
TRC_MSG(TRC_VAPP_MUSICPLY_LYRIC_PANEL_SHOW_HIDE,  "[MUSICPLY] VappMusicPlayerLyricsPanel::showHidePanel(), show=[%d]")

/* Vapp_music_player_ctrlmediacache.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_MED_CACHE_INIT,  "[MUSICPLY] VappMusicPlayerCtrlMediaCahce::initMediaCache(), itemCount=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_MED_CACHE_INIT_FAIL,  "[MUSICPLY] VappMusicPlayerCtrlMediaCahce::initMediaCache() FAIL")
TRC_MSG(TRC_VAPP_MUSICPLY_MED_CACHE_PAUSE,  "[MUSICPLY] VappMusicPlayerCtrlMediaCahce::pauseMediaCache(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_MED_CACHE_RESUME,  "[MUSICPLY] VappMusicPlayerCtrlMediaCahce::resumeMediaCache(), state=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_MED_CACHE_CLOSE,  "[MUSICPLY] VappMusicPlayerCtrlMediaCahce::closeMediaCache()")

/* Vapp_music_player_ctrlplsv.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_LIST_MENU_PROVIDER_ON_INIT, "[MUSICPLY] VappMusicPlayerListMenuProvider::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_LIST_MENU_PROVIDER_ON_DEINIT, "[MUSICPLY] VappMusicPlayerListMenuProvider::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTNT_PROVIDER_INIT,  "[MUSICPLY] VappMusicPlayerContentProvider::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTNT_PROVIDER_DEINIT,  "[MUSICPLY] VappMusicPlayerContentProvider::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTNT_PROVIDER_SWAP,  "[MUSICPLY] VappMusicPlayerContentProvider::swapItem(), from=[%d], to=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTNT_PROVIDER_SET_VIEW,  "[MUSICPLY] VappMusicPlayerContentProvider::setViewType(), current=[%d], view=[%d], mode=[%d], index=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_INIT,  "[MUSICPLY] VappMusicPlayerCtrlPLSV::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_DEINIT,  "[MUSICPLY] VappMusicPlayerCtrlPLSV::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SET_IS_READY,  "[MUSICPLY] VappMusicPlayerCtrlPLSV::setIsReady(), isReady:[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_RESET,  "[MUSICPLY] VappMusicPlayerCtrlPLSV::resetPLSV(), ret=[%d], is_ready=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_REFRESH_DB_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::refreshDB(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_REFRESH_DBCANCEL_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::refreshDBCancel(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_RESET_DB_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::resetDB(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SET_TEMP_BUFFER_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::setTempBuffer(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_CLEAR_TEMP_BUFFER_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::clearTempBuffer(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SELECT_START_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::selectStart(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SELECT_END_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::selectEnd(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SELECT_ALL_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::selectAll(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_DESELECT_ALL_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::deselectAll(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SELECT_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::select(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_DESELECT_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::deselect(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_DEL_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::del(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_DEL_SELECTED_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::delSelected(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_DEL_CANCEL_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::delCancel(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_CONFIG_DEFAULT_PLAYLIST_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::configDefaultPlaylist(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_CREATE_PLAYLIST_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::createPlaylist(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_GET_DEFAULT_PLAYLIST_TYPE_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::getDefaultPlaylistType(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_ADD_TO_PLAYLIST_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::addToPlaylist(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_ADD_SELECTED_TO_PLAYLIST_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::addSelectedToPlaylist(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_ADD_TO_PLAYLIST_CANCEL_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::addToPlaylistCancel(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_RENAME_PLAYLIST_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::renamePlaylist(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_ADD_ACTIVE_SONG_TO_FAVORITE_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::addActiveSongToFavorite(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_REMOVE_ACTIVE_SONG_FROM_FAVORITE_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::removeActiveSongFromFavorite(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_REARRANGE_START_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::rearrangeStart(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_REARRANGE_END_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::rearrangeEnd(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_REARRANGE_SWAP_POS_RESULT_D_FROM_D_TO_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::rearrangeSwapPos(), result: %d, from: %d, to: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_REARRANGE_SAVE_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::rearrangeSave(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SET_ACTIVE_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::setActive(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_GET_ACTIVE_INDEX_FROM_PLSV_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::getActiveIndexFromPLSV(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_GET_ALBUM_COVER_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::getAlbumCover(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_GET_ALBUM_COVER_ASYNC_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::getAlbumCoverAsync(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_GET_ALBUM_COVER_ASYNC_CANCEL_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::getAlbumCoverAsyncCancel(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_GET_ACTIVE_ALBUM_INDEX_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::getActiveAlbumIndex(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SEARCH_START_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::searchStart(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SEARCH_END_RESULT_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::searchEnd(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SET_VIEW_TYPE, "[MUSICPLY] VappMusicPlayerCtrlPLSV::setViewType(), viewType: %d, mode: %d, index: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SET_MEDIA_CACHE, "[MUSICPLY] VappMusicPlayerCtrlPLSV::setMediaCache(), viewType: %d, mode: %d, mediaCacheView: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SRV_PLST_LIST_EXIT_RET_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::srv_plst_list_exit(), ret: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_SRV_PLST_LIST_ENTRY_RET_D, "[MUSICPLY] VappMusicPlayerCtrlPLSV::srv_plst_list_entry(), ret: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CTRL_PLSV_PLSVCALLBACK, "[MUSICPLY] VappMusicPlayerCtrlPLSV::PLSVCallback(), event: %d, result: %d, para:%d")

/* vapp_music_player_coverflow_3d.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONINIT, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONDEINIT, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONENTER, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onEnter(), isBackward=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONENTERED, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onEntered()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONEXIT, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onExit(), isBackward=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONEXITED, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onExited()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONEXITED2, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onExited2()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONQUERYROTATE, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onQueryRotate(), orientation: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_INITUI, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::initUI()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_GETCDBOX_1, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::getCDBox(), index: %d, found available item, %d/%d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_GETCDBOX_2, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::getCDBox(), create new, %d/%d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_RELEASECDBOX_1, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::releaseCDBox()), index: %d, found item, %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_RELEASECDBOX_2, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::releaseCDBox()), index: %d, item not found, %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_SETCDBOXCOVER, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::setCDBoxCover(), index: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_SETOPENCDBOXCOVER, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::setOpenCDBoxCover(), index: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_FINDPICKEDNODE, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::findPickedNode(), found: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_OPENCDBOXSONGLIST, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::openCDBoxSongList(), index: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_CLOSECDBOXSONGLIST, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::closeCDBoxSongList()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_DOCLOSECDBOXSONGLIST, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::doCloseCDBoxSongList()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONCDBOXOPENANIMSTOPPED, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onCDBoxOpenAnimTLStopped() Open complete")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONCDBOXCLOSEANIMSTOPPED, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onCDBoxOpenAnimTLStopped() Close complete")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONKEYINPUT, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onKeyInput() Back key down")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_HIDEALLCELLIMAGES, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::hideAllCellImages(), isAnim: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_ONPLAYBACKSTATECHANGE, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::onPlaybackStateChange(), state: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_SHOWHIDEPLAYICON, "[MUSICPLY] VappMusicPlayerCoverFlow3DPage::showHideAlbumPlayIcon(), index: %d, isShow: %d")

TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_SETSCROLLINDEX, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::setScrollIndex(), perc: %d/1000, duration: %d, velocity: %d/1000")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_UPDATEMENU, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::updateMenu()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_UPDATECONTENT, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::updateContent(), index: %d/1000, focus: %d, firstVisible: %d, lastVisible: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_SETFOCUS, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::setFocus(), focus: %d, duration: %d, velocity: %d/1000")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_SETCELLHEADER, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::setCellHeader(), index: %d, isNewCreated: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONTAP_1, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onTap()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONTAP_2, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onTap(), found something, index: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONTAP_3, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onTap(), tap focused item, but in sliding anim")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONTAP_4, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onTap(), tap focused item, open CD box")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONTAP_5, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onTap(), tap non-focused item")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONPENINPUT_1, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onPenInput(), close CD box")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONPENINPUT_2, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onPenInput(), tap, onTap return FALSE")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONPENINPUT_3, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onPenInput(), tap, ignore rapid tapping")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONPENINPUT_4, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onPenInput(), slide")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONPENINPUT_5, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onPenInput(), unknown case")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONPENINPUT_6, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onPenInput(), pen input abort")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_CREATECELL, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::createCell(), index: %d, focus: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_CLOSECELL, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::closeCell(), index: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONDRAGEND_1, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onDragEnd(), xspeed = 0")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONDRAGEND_2, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onDragEnd(), xspeed <= 20")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_MENU_ONDRAGEND_3, "[MUSICPLY] VappMusicPlayerCoverFlow3DMenu::onDragEnd(), xspeed > 20, t: %d")

TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_SONGLISTPANEL_ONINIT, "[MUSICPLY] VappMusicPlayerCoverFlow3DSongListPanel::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_SONGLISTPANEL_ONDEINIT, "[MUSICPLY] VappMusicPlayerCoverFlow3DSongListPanel::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_SONGLISTPANEL_ONKEYINPUT_CLOSECDBOX, "[MUSICPLY] VappMusicPlayerCoverFlow3DSongListPanel::onKeyInput, close CD box()")
TRC_MSG(TRC_VAPP_MUSICPLY_CF_3D_SONGLISTPANEL_ONLISTITEMTAPPED, "[MUSICPLY] VappMusicPlayerCoverFlow3DSongListPanel::onListItemTapped, index: %d")


/* vapp_music_player_meta_parser.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_ONINIT, "[MUSICPLY] VappMusicPlayerMetaParser::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_ONDEINIT, "[MUSICPLY] VappMusicPlayerMetaParser::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_PARSE_FILE_FAIL, "[MUSICPLY] VappMusicPlayerMetaParser::parseFile() fail")
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_PARSE_FILE_OK, "[MUSICPLY] VappMusicPlayerMetaParser::parseFile() success")
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_GET_AUDIO_INFO_FAIL, "[MUSICPLY] VappMusicPlayerMetaParser::getAudioInfo() fail")
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_GET_AUDIO_INFO_OK, "[MUSICPLY] VappMusicPlayerMetaParser::getAudioInfo() success")
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_GET_COVER_FAIL, "[MUSICPLY] VappMusicPlayerMetaParser::getCover() fail, destW: %d, destH: %d, noBG: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_META_PARSER_GET_COVER_OK, "[MUSICPLY] VappMusicPlayerMetaParser::getCover() success, destW: %d, destH: %d, targetW: %d, targetH: %d, noBG: %d")

/* Vapp_music_player_service.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ONINIT, "[MUSICPLY] VappMusicPlayerService::onInit()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ONDEINIT, "[MUSICPLY] VappMusicPlayerService::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_CLOSE_MPLAYER, "[MUSICPLY] VappMusicPlayerService::closeMusicPlayer()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SEND_OPEN_CLOSE_EVENT, "[MUSICPLY] VappMusicPlayerService::sendOpenCloseEvent(), isOpen:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SEND_PLAY_START_EVENT, "[MUSICPLY] VappMusicPlayerService::sendPlayStartEvent()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SEND_PLAY_STOP_EVENT, "[MUSICPLY] VappMusicPlayerService::sendPlayStopEvent()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PROC_VOL_DIALOG_CHECK_VOL_TYPE, "[MUSICPLY] VappMusicPlayerService::onProcCheckVolType(), state:%d, isTopActive:%d, isPlayerPage:%d, viewType:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PROC_PROF_IS_PLAYING, "[MUSICPLY] VappMusicPlayerService::onProcProfIsPlaying(), state:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PROC_EVT_ID_USB_ENTER_MS_MODE, "[MUSICPLY] VappMusicPlayerService::onProcEnterUsbMsMode(), DBState:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_CHECK_MEM_CARD_READY, "[MUSICPLY] VappMusicPlayerService::checkMemoryCardReady(), memoryCardReady:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_DB_STATE, "[MUSICPLY] VappMusicPlayerService::setDBState(), state:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_INIT_PLSV, "[MUSICPLY] VappMusicPlayerService::initPLSV(), DBState: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_INIT_DB, "[MUSICPLY] VappMusicPlayerService::initDB(), DBState:%d, createPLSV:%d, step:%d, result:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_OPEN_DB_CANCEL, "[MUSICPLY] VappMusicPlayerService::openDBCancel(), handle:%d, result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_CLOSE_DB,  "[MUSICPLY] VappMusicPlayerService::closeDB(), ret=[%d]")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_REOPEN_DB_SRV_PLST_OPEN_AFTER_MEDIA_CHANGE_RESULT_D, "[MUSICPLY] VappMusicPlayerService::reopenDB(SRV_PLST_OPEN_AFTER_MEDIA_CHANGE), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_REALLOCMEMORY,  "[MUSICPLY] VappMusicPlayerService::reallocMemory(), shrink:%d, size:%d, db_size:%d, DBState:%d, result:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_CONFIG_DEFAULT_PLAYLIST,  "[MUSICPLY] VappMusicPlayerService::configDefaultPlaylist(), ret:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_DO_PLSV_CALLBACK, "[MUSICPLY] VappMusicPlayerService::doPLSVCallback(), event:%d, result:%d, para_2:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_GET_ALBUM_COVER_BY_DEF_BUF, "[MUSICPLY] VappMusicPlayerService::getAlbumCoverByDefaultBuffer(), ID:%d, albumCoverSongID:%d, albumCoverValid:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_GET_ALBUM_COVER_ALLOC_MEM_FAIL, "[MUSICPLY] VappMusicPlayerService::getAlbumCover() Fail to allocate memory from anonymous asm")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_GET_ALBUM_COVER_BY_ID, "[MUSICPLY] VappMusicPlayerService::getAlbumCoverByID(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_UPDATE_ACITVE_COUNT, "[MUSICPLY] VappMusicPlayerService::updateActiveCount(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_GET_ACTIVE_INDEX_FROM_PLSV, "[MUSICPLY] VappMusicPlayerService::getActiveIndexFromPLSV(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_CLR_ACTIVE_PLAYLIST,  "[MUSICPLY] VappMusicPlayerService::clearActivePlaylist(), ret:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_DURATION,  "[MUSICPLY] VappMusicPlayerService::setDuration(), ret:%d, isIDMatch:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_PREV, "[MUSICPLY] VappMusicPlayerService::prev(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_NEXT, "[MUSICPLY] VappMusicPlayerService::next(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_AUTO_NEXT, "[MUSICPLY] VappMusicPlayerService::autoNext(), result: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_REPEAT, "[MUSICPLY] VappMusicPlayerService::setRepeat(), result:%d, repeatState:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_SHUFFLE, "[MUSICPLY] VappMusicPlayerService::setShuffle(), result:%d, shuffleState:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_PLAYBACK_STATE_CHANGE, "[MUSICPLY] VappMusicPlayerService::onPlaybackStateChange(), state:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PREV_NEXT, "[MUSICPLY] VappMusicPlayerService::onPrevNext(),next:%d, mode:%d, delay:%d, state:%d, playAfterSwitchSong:%d, isBackLightOn:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PLAYER_BTN_TIMER_TICK_IS_INTERRUPTED, "[MUSICPLY] VappMusicPlayerService::onPlayerBtnTimerTick(), isInterrupted:%d, state:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PLAYER_BTN_TIMER_TICK_PLAYER_PAGE, "[MUSICPLY] VappMusicPlayerService::onPlayerBtnTimerTick(), is player page, state:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PLAYER_BTN_TIMER_TICK_PB_STATE_SWITCHING_NOT_PLAY, "[MUSICPLY] VappMusicPlayerService::onPlayerBtnTimerTick(), PB_STATE_SWITCHING_NOT_PLAY")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PLAYER_BTN_TIMER_TICK_PLAY_SONG, "[MUSICPLY] VappMusicPlayerService::onPlayerBtnTimerTick(), playSong, state: %d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PLAY, "[MUSICPLY] VappMusicPlayerService::onPlay(), delayPlay:%d, playState:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_STOP, "[MUSICPLY] VappMusicPlayerService::onStop(), playState:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_START_DELAY_PLAY_TIMER, "[MUSICPLY] VappMusicPlayerService::startDelayPlayTimer()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_STOP_DELAY_PLAY_TIMER, "[MUSICPLY] VappMusicPlayerService::stopDelayPlayTimer()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_DELAY_PLAY, "[MUSICPLY] VappMusicPlayerService::setIsDelayPlay(), isDelayPlay:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_PLAY_AFTER_SWITCH, "[MUSICPLY] VappMusicPlayerService::setPlayAfterSwitchSong(), isPlay:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_INIT_ACTIVE_LIST_VALID_STATE, "[MUSICPLY] VappMusicPlayerService::initActiveListValidState(), listCount:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_DEINIT_ACTIVE_LIST_VALID_STATE, "[MUSICPLY] VappMusicPlayerService::deinitActiveListValidState(), list:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_SONG_VALID, "[MUSICPLY] VappMusicPlayerService::setSongValid(), list:%d, index:%d, isValid:%d, count:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_SET_SONG_LYRICS_VALID, "[MUSICPLY] VappMusicPlayerService::setSongLyricsState(), list:%d, index:%d, isValid:%d, count:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_FIND_NEXT_TIMER_TIMEOUT, "[MUSICPLY] VappMusicPlayerService::findNextTimerTimeout()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_START_PB_ERR_TIMER, "[MUSICPLY] VappMusicPlayerService::startPlaybackErrTimer()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_STOP_PB_ERR_TIMER, "[MUSICPLY] VappMusicPlayerService::stopPlaybackErrTimer()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PB_ERR_TIMER_TICK, "[MUSICPLY] VappMusicPlayerService::onPlaybackErrTimerTick()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_PLAYBACK_FAIL, "[MUSICPLY] VappMusicPlayerService::onPlaybackFail(), result:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_INVALID_FILE, "[MUSICPLY] VappMusicPlayerService::onInvalidFile(), delayExecute:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_INVALID_FILE_HAS_VALID_SONG, "[MUSICPLY] VappMusicPlayerService::onInvalidFile(), hasValidSong, index:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_INVALID_FILE_NO_VALID_SONG, "[MUSICPLY] VappMusicPlayerService::onInvalidFile(), hasNoValidSong")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_HANDLE_POST_ON_INVALID_FILE, "[MUSICPLY] VappMusicPlayerService::handlePostOnInvalidFile()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_MDI_CALLBACK, "[MUSICPLY] VappMusicPlayerService::onMDICallback(), result:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_AVRCP_COMMAND, "[MUSICPLY] VappMusicPlayerService::onAVRCPCommand(), command type:%d, is APP Alive:%d, actionMode:%d, isTopActive:%d, playState:%d, isBGPlayValid:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_ON_AVRCPCOMMAND_REJECT_BY_GROUP_NOT_TOP_ACTIVE_BG_PLAY_NOT_VALID, "[MUSICPLY] VappMusicPlayerService::onAVRCPCommand(), reject by group not top active & bg play not valid")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_TURN_ON_BACK_LIGHT, "[MUSICPLY] VappMusicPlayerService::turnOnBackLight()")
TRC_MSG(TRC_VAPP_MUSICPLY_SRV_IS_BACK_LIGHT_ON, "[MUSICPLY] VappMusicPlayerService::isBackLightOn(), isON:%d")

/* vapp_music_player_ncentercell.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_NCENTER_INTENT_CB, "[MUSICPLY] NCenter::vapp_music_player_Intent_callback(), case:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_NCENTER_UPDATE_CELL, "[MUSICPLY] NCenter::vapp_music_player_update_cell()")
TRC_MSG(TRC_VAPP_MUSICPLY_NCENTER_ON_OPEN_CLOSE, "[MUSICPLY] NCenter::vapp_music_player_on_open_close(), isOpen:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_NCENTER_ON_SHOW_HIDE, "[MUSICPLY] NCenter::vapp_music_player_on_show_hide(), isShow:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_NCENTER_ON_PLAY_START_STOP, "[MUSICPLY] NCenter::vapp_music_player_on_play_start_stop(), isPlayStart:%d")

/* vapp_music_player_cui.cpp */
TRC_MSG(TRC_VAPP_MUSICPLY_VCUI_ON_RUN, "[MUSICPLY] VcuiMusicPlayer::onRun()")
TRC_MSG(TRC_VAPP_MUSICPLY_VCUI_ON_DEINIT, "[MUSICPLY] VcuiMusicPlayer::onDeinit()")
TRC_MSG(TRC_VAPP_MUSICPLY_VCUI_ON_GROUP_ACTIVE, "[MUSICPLY] VcuiMusicPlayer::onGroupActive()")
TRC_MSG(TRC_VAPP_MUSICPLY_VCUI_ON_GROUP_INACTIVE, "[MUSICPLY] VcuiMusicPlayer::onGroupInactive()")
TRC_MSG(TRC_VAPP_MUSICPLY_VCUI_ON_PROC, "[MUSICPLY] VcuiMusicPlayer::onProc(), event:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VCUI_ON_MDI_CALLBACK, "[MUSICPLY] VcuiMusicPlayer::onMDICallback(), result:%d")
TRC_MSG(TRC_VAPP_MUSICPLY_VCUI_ON_AVRCP_COMMAND, "[MUSICPLY] VcuiMusicPlayer::onCuiAVRCPCommand(), cmdType:%d, keyEvt:%d")
