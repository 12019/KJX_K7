[APP NAME] = Bluetooth App
[SCOPE] = COSMOS
[MODULE] = MOD_MMI_CONN_APP
#start trace
#vapp_bt_main.cpp
TRC_MSG(MMI_VAPPBTSETTINGPAGE_BTSETTINGEVENTHANDLE, "[BTMAIN]:VappBtSettingPage::btSettingEventHandle(),event=%Msrv_bt_cm_event_enum,m_btSettingPageSelf=%d")
TRC_MSG(MMI_VAPPBTSETTINGPAGE_ONINIT, "[BTMAIN]:VappBtSettingPage::onInit()")
TRC_MSG(MMI_VAPPBTSETTINGPAGE_ONDEINIT, "[BTMAIN]:VappBtSettingPage::onDeinit()")
TRC_MSG(MMI_VAPPBTSETTINGPAGE_ONSWITCHVISIBILITY, "[BTMAIN]:VappBtSettingPage::onSwitchVisibility()status=%Msrv_bt_cm_visibility_type")
TRC_MSG(MMI_VAPPBTSETTINGPAGE_ONSETDEVNAMEHDLR, "[BTMAIN]:VappBtSettingPage::onSetDevNameHdlr()res=%d")
TRC_MSG(MMI_VAPPBTSETTINGPAGE_ONBUTTONCLICK, "[BTMAIN]:VappBtSettingPage::onButtonClick(), Id=%d")
TRC_MSG(MMI_VAPPBTTABCTRLPAGE_ONINIT, "[BTMAIN]:VappBtTabCtrlPage::onInit()")
TRC_MSG(MMI_VAPPBTTABCTRLPAGE_ONCREATETABPAGE, "[BTMAIN]:VappBtTabCtrlPage::onCreateTabPage(),tabId=%d")
TRC_MSG(MMI_VAPPBTSETTINGSCREEN_ON1STREADY, "[BTMAIN]:VappBtSettingScreen::on1stReady()")
TRC_MSG(MMI_VAPPBTSETTINGAPP_ONRUN, "[BTMAIN]:VappBtSettingApp::onRun()")
TRC_MSG(MMI_VAPPBTCM_ONINIT, "[BTMAIN]:VappBtCm::onInit() m_cmSrvHd=%d")
TRC_MSG(MMI_VAPPBTCM_BTCMEVENTHANDLE, "[BTMAIN]:VappBtCm::btCmEventHandle() event=%Msrv_bt_cm_event_enum")
TRC_MSG(MMI_VAPPBTCM_ONINITPOWER, "[BTMAIN]:VappBtCm::onInitPower() flight_mode=%d, m_cmSetting=%d")
TRC_MSG(MMI_VAPP_BT_FLIGHT_MODE_IND_HANDLE, "[BTMAIN]:vapp_bt_flight_mode_ind_handle(), select_flight_mode=%d")
#
TRC_MSG(MMI_VAPPBTPOWERSWITCHCELL_ONINIT, "[BTMAIN]:VappBtPowerSwitchCell::onInit()")
TRC_MSG(MMI_VAPPBTPOWERSWITCHCELL_ONDEINIT, "[BTMAIN]:VappBtPowerSwitchCell::onDeinit()")
TRC_MSG(MMI_VAPPBTPOWERSWITCHCELL_ONRECEIVEBTCMEVENT, "[BTMAIN]:VappBtPowerSwitchCell::onReceiveBtCmEvent(), _event=%d, result=%d")
TRC_MSG(MMI_VAPPBTPOWERSWITCHCELL_ONSWITCH, "[BTMAIN]:VappBtPowerSwitchCell::onSwitch() _status=%d")
TRC_MSG(MMI_VAPPBTPOWERSWITCHCELL_SHOWCONFIRMSCREEN, "[BTMAIN]:VappBtPowerSwitchCell::showConfirmScreen() _m_confirmFlag=%d")
TRC_MSG(MMI_VAPPBTPOWERSWITCHCELL_ONBUTTONCLICK, "[BTMAIN]:VappBtPowerSwitchCell::onButtonClick(), id=%d")
TRC_MSG(MMI_VAPPBTPOWERSWITCHCELL_BTPOWERSWITCHEVENTHANDLE, "[BTMAIN]:VappBtPowerSwitchCell::btPowerSwitchEventHandle() event=%Msrv_bt_cm_event_enum,m_btPowerSwitchCellSelf=0x%X")
TRC_MSG(MMI_VAPPBTSETTINGCELL_ONINIT, "[BTMAIN]:VappBtSettingCell::onInit()")
TRC_MSG(MMI_VAPPBTSETTINGCELL_ONDEINIT, "[BTMAIN]:VappBtSettingCell::onDeinit()")
TRC_MSG(MMI_VAPPBTSETTINGCELL_ONTAP, "[BTMAIN]:VappBtSettingCell::onTap(), senderId=%d")
TRC_MSG(MMI_VAPPBTSETTINGCELL_BTSETTINGEVENTHANDLE, "[BTMAIN]:VappBtSettingCell::btSettingEventHandle() event=%Msrv_bt_cm_event_enum, m_btSettingSelf=0x%X")
TRC_MSG(MMI_VAPPBTSETTINGCELL_ONRECEIVEBTCMEVENT, "[BTMAIN]:VappBtSettingCell::onReceiveBtCmEvent() _event=%d, result=%d")
TRC_MSG(MMI_VAPP_BT_UPDATE_STATUS, "[BTMAIN]:vapp_bt_update_status(), status=%d")

#vapp_bt_cui.cpp
TRC_MSG(MMI_VAPPBTSELDEVPAGE_ONINIT, "[BTCUI]:VappBtSelDevPage::onInit()")
TRC_MSG(MMI_VAPPBTSELDEVPAGE_ONDEINIT, "[BTCUI]:VappBtSelDevPage::onDeinit()")
TRC_MSG(MMI_VAPPBTSELDEVPAGE_ONQUERYROTATE, "[BTCUI]:VappBtSelDevPage::onQueryRotate()")
TRC_MSG(MMI_VAPPBTSELDEVPAGEONBACK, "[BTCUI]:VappBtSelDevPage::onBack()")
TRC_MSG(MMI_VAPPBTSELDEVPAGE_ONSEARCH, "[BTCUI]:VappBtSelDevPage::onSearch()")
TRC_MSG(MMI_VAPPBTSELDEVPAGE_ONSTOP, "[BTCUI]:VappBtSelDevPage::onStop()")
TRC_MSG(MMI_VAPPBTSELDEVPAGE_ONSELDEV, "[BTCUI]:VappBtSelDevPage::onSelDev()")
TRC_MSG(MMI_VAPPBTSELDEVPAGE_HANDLEBTENENTS, "[BTCUI]:VappBtSelDevPage::handleBtEvents(event=%Msrv_bt_cm_event_enum)")
TRC_MSG(MMI_VAPPBTSELDEVSCREEN_ON1STREADY, "[BTCUI]:VappBtSelDevScreen::on1stReady()")
TRC_MSG(MMI_VAPPBTSELDEVCUI_ONRUN, "[BTCUI]:VappBtSelDevCui::onRun() m_btSelDevCuiRefCnt=0x%X")
TRC_MSG(MMI_VAPPBTSELDEVCUI_BTSELDEVPRECHECK, "[BTCUI]:VappBtSelDevCui::btSelDevPreCheck() m_btSelDevCuiRefCnt=%d")
TRC_MSG(MMI_VAPPBTSELDEVCUI_ONPROC, "[BTCUI]:VappBtSelDevCui::onProc(evt_id=EVT_ID_GROUP_CUI_BT_POWER_ON) ,result=%d")
TRC_MSG(MMI_VCUI_BT_SELECT_DEVICE, "[BTCUI]:vcui_bt_select_device() appId=%d, cod_mask=0x%X, service_id=%d")
TRC_MSG(VCUI_BT_SELECT_DEVICE_CREATE, "[BTCUI]:vcui_bt_select_device_create() appId=%d, cod_mask=0x%X, service_id=%d")
TRC_MSG(VCUI_BT_SELECT_DEVICE_RUN, "[BTCUI]:vcui_bt_select_device_run() cui_id=%d, m_btSelDevCuiId=%d")
TRC_MSG(VCUI_BT_SELECT_DEVICE_CLOSE, "[BTCUI]:vcui_bt_select_device_close() cui_id=%d, m_btSelDevCuiId=%d")
TRC_MSG(MMI_VAPPBTPOWERONCUI_ONRUN, "[BTCUI]:VappBtPowerOnCui::onRun()")
TRC_MSG(MMI_VAPPBTDEVCUI_ONBUTTONCLICK, "[BTCUI]:VappBtSelDevCui::onButtonClick() id=%d")
TRC_MSG(MMI_VAPPPOWERONCUI_ONBUTTONCLICK, "[BTCUI]:VappBtPowerOnCui::onButtonClick() id=%d")
TRC_MSG(VCUI_BT_POWER_ON_CREATE, "[BTCUI]:vcui_bt_power_on_create() appId=%d, confirm_type=%d")
TRC_MSG(VCUI_BT_POWER_ON_RUN, "[BTCUI]:vcui_bt_power_on_run() cui_id=%d")
TRC_MSG(VCUI_BT_POWER_ON_CLOSE, "[BTCUI]:vcui_bt_power_on_close() cui_id=%d")


#vapp_bt_ftp.cpp
TRC_MSG(MMI_VAPP_FTP_INIT, "[FTPMMI]:vapp_ftp_init()")
TRC_MSG(MMI_VAPP_FTP_DEINIT, "[FTPMMI]:vapp_ftp_deinit()")
TRC_MSG(MMI_VAPP_FTP_ENTER_USB_MS_CALLBACK, "[FTPMMI]:vapp_ftp_enter_usb_ms_callback()")
TRC_MSG(MMI_VAPPBTFTPSERVER_FTPSEVENTHANDLE, "[FTPMMI]:VappBtFtpServer::ftpsEventHandle()srvHd=%d, event=%Msrv_ftps_event_enum")
TRC_MSG(MMI_VAPPBTFTPSERVER_ONAUTHORIZEDONE, "[FTPMMI]:VappBtFtpServer::onAuthorizeDone(),result=%d")
#TRC_MSG(MMI_VAPPBTFTPSERVER_GETDISPLAYTEXT, "[FTPMMI]:VappBtFtpServer::getDisplayText()")
TRC_MSG(MMI_VAPPBTFTPSERVER_FTPSOPERATIONBEGINHANDLE, "[FTPMMI]:VappBtFtpServer::ftpsOperationBeginHandle()operation=%Msrv_ftps_operation_enum")
TRC_MSG(MMI_VAPPBTFTPSERVER_FTPSOPERATIONENDHANDLE, "[FTPMMI]:VappBtFtpServer::ftpsOperationEndHandle()operation=%Msrv_ftps_operation_enum")

#vapp_bt_send.cpp
TRC_MSG(MMI_VAPP_SENDPREAPP_INITCNTX, "[BTSEND]:VappBTSendingContext::initCntx() from send prepare app")
TRC_MSG(MMI_VAPP_SENDAPP_INITCNTX, "[BTSEND]:VappBTSendingContext::initCntx() from send app")
TRC_MSG(MMI_VAPP_VCARD_MULTI_INITCNTX, "[BTSEND]:Vcard multi send VappBTSendingContext::initCntx")
TRC_MSG(MMI_VAPP_SENDPREAPP_ERROR, "[BTSEND]:VappBTSendPreApp::errorHandle(),_cod=%d")
TRC_MSG(MMI_VAPP_SENDPREAPP_DEINIT, "[BTSEND]:VappBTSendPreApp::onDeinit()")
TRC_MSG(MMI_VAPP_SENDPREAPP_USBPLUGIN, "[BTSEND]:VappBTSendPreApp::onUsbPlugIn()")
TRC_MSG(MMI_VAPP_SENDPREAPP_SELECTDEVICEHDLR, "[BTSEND]:VappBTSendPreApp::selectDeviceHdlr(),result=%d")
TRC_MSG(MMI_VAPP_SENDPREAPP_STARTSEND, "[BTSEND]:VappBTSendPreApp::startSendApp()")
TRC_MSG(MMI_VAPP_SENDAPP_ERROR, "[BTSEND]:VappBTSendApp::errorHandle(),_cod=%d")
TRC_MSG(MMI_VAPP_SENDAPP_INITAPP, "[BTSEND]:VappBTSendApp::initApp()")
TRC_MSG(MMI_VAPP_SENDAPP_USBPLUGIN, "[BTSEND]:VappBTSendApp::onUsbPlugIn()")
TRC_MSG(MMI_VAPP_SENDAPP_PROFSIGHDLR, "[BTSEND]:----> VappBTSendApp::profSigHandler(),event=%d <----")
TRC_MSG(MMI_VAPP_SENDAPP_STOPSENDING, "[BTSEND]:VappBTSendApp::stopSending()")
TRC_MSG(MMI_VAPP_OPPCLIENT_SENDBEGIN, "[BTSEND]:VappBTOPPClient::sendBegin()")
TRC_MSG(MMI_VAPP_OPPCLIENT_SENDOBJ, "[BTSEND]:VappBTOPPClient::sendObject()")
TRC_MSG(MMI_VAPP_OPPCLIENT_SENDEND, "[BTSEND]:VappBTOPPClient::sendEnd()")
TRC_MSG(MMI_VAPP_OPPCLIENT_SENDCANCEL, "[BTSEND]:VappBTOPPClient::sendCancel()")
TRC_MSG(MMI_VAPP_OPPCLIENT_EVENTHDLR, "[BTSEND]:VappBTOPPClient::eventHandler(),eventId=0x%X, hd=%d")
TRC_MSG(MMI_VAPP_OPPCLIENT_SENDINDHDLR, "[BTSEND]:VappBTOPPClient::sendIndHandler(),snd_result->type=%Msrv_opp_snd_type_enum")
TRC_MSG(MMI_VAPP_OPP_CLONE, "[BTSEND]:VappBTSendingPara::cloneNameArray()")
TRC_MSG(MMI_VAPP_OPP_RELEASE_NAME, "[BTSEND]:VappBTSendingPara::releaseNameBuf()")
TRC_MSG(MMI_VAPP_OPP_CLEAN_TEMP_FILE, "[BTSEND]:VappBTSendingPara::clearTempFile()")
TRC_MSG(MMI_VAPP_OPP_LANGUAGE_CHANGED, "[BTSEND]:vapp_oppc_language_changed_hdlr()")
TRC_MSG(MMI_VAPP_OPP_PRE_RUN, "[BTSEND]:VappBTSendPreApp::onRun()")
TRC_MSG(MMI_VAPP_OPP_MMI_FAIL_LINE, "[BTSEND]:OPP Send fail at vapp_bt_send.cpp Line: %d")
TRC_MSG(MMI_VAPP_OPP_SEND_APP_DEINIT, "[BTSEND]:VappBTSendApp::onDeinit()")
TRC_MSG(MMI_VAPP_OPP_SHOW_CONN_POPUP, "[BTSEND]:VappBTSendApp::showConnPopup()")
TRC_MSG(MMI_VAPP_OPP_IS_SEND_VCARD, "[BTSEND]:Is sending vCard(0:N, 1:Y)? %d")
TRC_MSG(MMI_VAPP_OPP_SEND_FILE_NAME_NULL, "[BTSEND]:VappBTSendApp::sendObj()->Sending file name is NULL")
TRC_MSG(MMI_VAPP_OPP_GEN_NAME_STR, "[BTSEND]:VappBTSendApp::paraseFileName()")
TRC_MSG(MMI_VAPP_OPP_KILL_BY_OOM, "[BTSEND]:Kill by OOM!")
TRC_MSG(MMI_VAPP_OPP_FAIL_FOR_FORBIDDEN, "[BTSEND]:Request is forbidden at vapp_bt_send.cpp Line %d")
TRC_MSG(MMI_VAPP_NOT_OPEN_OPP, "[BTSEND]:Send Fail(not open __MMI_OPP_SUPPORT__ macro)")
TRC_MSG(MMI_VAPP_SEND_TOTAL_SIZE, "[BTSEND]:Calculate total file size is done!")
TRC_MSG(MMI_VAPP_SEND_USB_UNAVAILABLE, "[BTSEND]:VappBTSendingProf::objAvailable() USB isn't available")
TRC_MSG(MMI_VAPP_CAN_NOT_OPEN_SENDIND_FILE, "[BTSEND]:VappBTSendingProf::objAvailable() Can not open sending file. Error = %d")
TRC_MSG(MMI_VAPP_DRM_FAIL, "[BTSEND]:VappBTSendingProf::objAvailable() DRM fail, can not be sended.")
TRC_MSG(MMI_VAPP_OPP_CONNECT_FAIL, "[BTSEND]:Connecting fails.")
#vapp_bt_opp.cpp
TRC_MSG(MMI_VAPP_OPP_INIT, "[BTOPP]:vapp_opp_init()")
TRC_MSG(MMI_VAPP_OPP_DEINIT, "[BTOPP]:vapp_opp_deinit()")
TRC_MSG(MMI_VAPP_OPP_USBPLUGIN, "[BTOPP]:VappBTOPPServer::onUsbPlugIn()")
TRC_MSG(MMI_VAPP_OPP_ONSTOP, "[BTOPP]:VappBTOPPServer::onStop()")
TRC_MSG(MMI_VAPP_OPP_EVENTHDLR, "[BTOPP]:VappBTOPPServer::serviceEventHandle(),eventId=0x%X, handler=%d")
TRC_MSG(MMI_VAPP_OPP_RECVINDHDLR, "[BTSEND]:VappBTOPPServer::recvIndHandle(),recvNotify->type=%Msrv_opp_recv_type_enum")
TRC_MSG(MMI_VAPP_OPP_RECV_FAIL, "[BTSEND]:VappBTOPPServer::recvIndHandle(),recvNotify->u.err_code=%Msrv_opp_err_enum")
#vapp_bt_server.cpp
TRC_MSG(MMI_VAPP_BTSERVER_STARTNOTIFY, "[BTSERVER]:VbtNotifyIdle::startNotify(),notifyCount=%d")
TRC_MSG(MMI_VAPP_BTSERVER_STOPNOTIFY, "[BTSERVER]:VbtNotifyIdle::stopNotify(),notifyCount=%d")
TRC_MSG(MMI_VAPP_BTSERVER_LAUNCH, "[BTSERVER]:VbtServerAgent::launchServer")
TRC_MSG(MMI_VAPP_BTSERVER_TERMINATE, "[BTSERVER]:VbtServerAgent::terminateServer")
TRC_MSG(MMI_VAPP_BTSERVER_STARTNMGR, "[BTSERVER]:VbtServer::startNmgr()")
TRC_MSG(MMI_VAPP_BTSERVER_NMGRHANDLE, "[BTSERVER]:VbtServer::nmgrHandler()")
TRC_MSG(MMI_VAPP_BTSERVER_SHOW_AUTHORIZE, "[BTSERVER]:VbtServer::showAuthorize()")
TRC_MSG(MMI_VAPP_BTSERVER_ON_CONFIRMDONE_OK, "[BTSERVER]:VbtServer::showAuthorize()->press OK")
TRC_MSG(MMI_VAPP_BTSERVER_ON_CONFIRMDONE_NO, "[BTSERVER]:VbtServer::showAuthorize()->press Cancle")
TRC_MSG(MMI_VAPP_BTSERVER_TRUST_DEV, "[BTSERVER]:VbtServer::startNmgr()->Trust dev, need not confirm")

#vapp_bt_audio.cpp
TRC_MSG(MMI_VAPP_AUDIO_AUTHORIZE_DONE, "[BTAUDIO]:VbtAudioApp::onAuthorizeDone(%d)")
TRC_MSG(MMI_VAPP_AUDIO_SRV_NOTIFY, "[BTAUDIO]:VbtAudioApp::srvNotify(event = 0x%x)")


#vapp_bt_device.cpp
TRC_MSG(MMI_VAPP_DEVICE_DESTRUCT, "[BTDEVICE]:~VappBTPairedListPage(), m_state = %d")
TRC_MSG(MMI_VAPP_DEVICE_ONINIT, "[BTDEVICE]:VappBTPairedListPage::onInit()")
TRC_MSG(MMI_VAPP_DEVICE_HANDLE_BT_EVENTS, "[BTDEVICE]:VappBTPairedListPage::handleBtEvents(event=%Msrv_bt_cm_event_enum)")
TRC_MSG(MMI_VAPP_DEVICE_CONNECT_COMPLETE, "[BTDEVICE]:VappBTPairedListPage::connectComplete, m_state = %d")
TRC_MSG(MMI_VAPP_DEVICE_DISCONNECT_COMPLETE, "[BTDEVICE]:VappBTPairedListPage::disconComplete, m_state = %d, m_disconnPopup = %d")
TRC_MSG(MMI_VAPP_DEVICE_CONNECT_CANCEL, "[BTDEVICE]:VappBTPairedListPage::onConnCancelClick(), m_state = %d")
TRC_MSG(MMI_VAPP_DEVICE_DELECT_BUTTON_SELECT, "[BTDEVICE]:VappBTPairedListPage::onDeletePopupBarClick(), chosen = %d")
TRC_MSG(MMI_VAPP_DEVICE_SEARCH_FAIL, "[BTDEVICE]:VappBTPairedListPage::onSearchBarClick()")

#vapp_bt_search.cpp
TRC_MSG(MMI_VAPP_SEARCH_DESTRUCT, "[BTSEARCH]:~VappBTSearchDevPage(), m_state = %d")
TRC_MSG(MMI_VAPP_SEARCH_ONINIT, "[BTSEARCH]:VappBTSearchDevPage::onInit(), m_schSrvHd = %d")
TRC_MSG(MMI_VAPP_SEARCH_CONNECT_COMPLETE, "[BTSEARCH]:VappBTSearchDevPage::connComplete()")
TRC_MSG(MMI_VAPP_SEARCH_DISCONNECT_COMPLETE, "[BTSEARCH]:VappBTSearchDevPage::disconnComplete()")
TRC_MSG(MMI_VAPP_SEARCH_COMPLETE, "[BTSEARCH]:VappBTSearchDevPage::searchComplete, m_state = %d")
TRC_MSG(MMI_VAPP_SEARCH_BOND_RESULT, "[BTSEARCH]:VappBTSearchDevPage::bondResult(), event->result = %d, m_firstPair = %d")
TRC_MSG(MMI_VAPP_SEARCH_PAIR_RESULT, "[BTSEARCH]:VappBTSearchDevPage::pairResult(), event->result = %d, m_firstPair = %d, m_initiatorPair = %d")
TRC_MSG(MMI_VAPP_SEARCH_SELECT_DEVICE_PAIR, "[BTSEARCH]:VappBTSearchDevPage::onDevClick(), dev_idx = %d")
TRC_MSG(MMI_VAPP_SEARCH_PAIR_GO, "[BTSEARCH]:VappBTSearchDevPage::pairDev(), dev_index = %d")
TRC_MSG(MMI_VAPPBTSEARCHDEVPAGE_GETSEARCHSTATE, "[BTSEARCH]:VappBTSearchDevPage::getSearchState()=%d")
TRC_MSG(MMI_VAPPBTSEARCHDEVLISTCONTENTPROVIDER_GETMENUEMPTYTEXT, "[BTSEARCH]:VappBTSearchDevListContentProvider::getMenuEmptyText(),m_searchPage=%d")

#vapp_bt_pair.cpp
TRC_MSG(MMI_VAPP_PAIR_LAUNCHER, "[BTPAIR]:VappBTPasskeyLaunch(), gid = %d")
TRC_MSG(MMI_VAPP_PAIR_TERMINATE, "[BTPAIR]:VappBTPasskeyTerminate()")
TRC_MSG(MMI_VAPP_PAIR_INIT, "[BTPAIR]:initialize(), passkey_srv_handle = %d")
TRC_MSG(MMI_VAPP_PAIR_EVENT, "[BTPAIR]:VappBTPasskeyApp::btPasskeyEventNotify(), event = %d")
TRC_MSG(MMI_VAPP_PAIR_RESULT, "[BTPAIR]:VappBTPasskeyApp::pairResult(), result = %d")
TRC_MSG(MMI_VAPP_PAIR_PASSKEY_INPUT, "[BTPAIR]:VappBTPasskeyApp::displayPasskeyInput(), lap = 0x%x, uap = 0x%x, nap = 0x%x")
TRC_MSG(MMI_VAPP_PAIR_PASSKEY_MATCH, "[BTPAIR]:VappBTPasskeyApp::displayUserConfirm(), lap = 0x%x, uap = 0x%x, nap = 0x%x, event->display_numeric = %d")
TRC_MSG(MMI_VAPP_PAIR_PASSKEY_NOTIFY, "[BTPAIR]:VappBTPasskeyApp::displayPasskeyNotify(), lap = 0x%x, uap = 0x%x, nap = 0x%x")

#vapp_bt_pbap.cpp
TRC_MSG(MMI_VAPP_PBAP_INIT, "[BTPBAP]:VbtPbapService::onInit(), m_srvHd = %d")
TRC_MSG(MMI_VAPP_PBAP_AUTHORIZE_IND, "[BTPBAP]:serviceEventHandle::AUTHORIZE_EVENT, m_inst->m_connId = %d")
TRC_MSG(MMI_VAPP_PBAP_AUTHORIZE_DONE, "[BTPBAP]:VappBTPBAPServer::onAuthorizeDone(), result = %d")
TRC_MSG(MMI_VAPP_PBAP_STOP, "[BTPBAP]:VappBTPBAPServer::onStop()")

#vapp_bt_dun.cpp
TRC_MSG(MMI_VAPP_DUN_INIT, "[BTDUN]:VbtDunService::onInit()")
TRC_MSG(MMI_VAPP_DUN_AUTHORIZE_IND, "[BTPDUN]:serviceEventHandle::AUTHORIZE_EVENT, m_state = %d, m_connId = %d")
TRC_MSG(MMI_VAPP_DUN_AUTHORIZE_DONE, "[BTDUN]:VappBTDUNServer::onAuthorizeDone(), m_state = %d, result = %d")
TRC_MSG(MMI_VAPP_DUN_STOP, "[BTDUN]:VappBTDUNServer::onStop(), m_state = %d, m_connId = %d")

#vapp_bt_spp.cpp
TRC_MSG(MMI_VAPP_SPP_INIT, "[BTSPP]:VbtSppServerAgent::initialize()")
TRC_MSG(MMI_VAPP_SPP_AUTHORIZE_IND, "[BTPSPP]:VbtSppConnAgent::create(), port = %d, connId = %d")
TRC_MSG(MMI_VAPP_SPP_AUTHORIZE_DONE, "[BTSPP]:VbtSppServer::onAuthorizeDone(), result = %d")
TRC_MSG(MMI_VAPP_SPP_DISCONN_DONE, "[BTSPP]:VbtSppService::onDisconnectDone()")
