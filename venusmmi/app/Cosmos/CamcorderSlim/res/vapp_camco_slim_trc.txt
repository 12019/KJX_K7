[APP NAME] = Camcorder
[SCOPE] = COSMOS
[MODULE] = MOD_MMI_MEDIA_APP

#starttrace
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_INIT, "[CAMCO] onInit()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_DEINIT, "[CAMCO] onDeinit()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_ENTER, "[CAMCO] onEnter() [isBackward=%d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_ENTERED, "[CAMCO] onEntered()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_EXIT, "[CAMCO] onExit() [isBackward=%d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_QUERY_ROTATE, "[CAMCO] onQueryRotate()[%d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_UPDATE_VDO_FRAME_ROTATE, "[CAMCO] updateVideoFramRotate()[needRotateContent = %d, from = %d, to = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SET_CALLINGPARAM, "[CAMCO] setCallingParam() [mode = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_GET_FREE_STORAGE_SIZE, "[CAMCO] getFreeStorageSize() [free space = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_GET_LAST_FILE, "[CAMCO] findLastFileName() [isCameraApp = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CHECKENV, "[CAMCO] checkEnv() [cause = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_DECHECKENV, "[CAMCO] decheckEnv()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CONFIG_MEM, "[CAMCO] configMem() [size = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_RESET_MEM, "[CAMCO] resetMem() [ptr = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_INIT_ENV, "[CAMCO] initEnv()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_DEINIT_ENV, "[CAMCO] deinitEnv()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CHECK_REMOVABLE_STORAGE, "[CAMCO] checkRemovableStorage() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CHECK_SAVE_PATH, "[CAMCO] checkSavePath() [cause = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_INIT_APP, "[CAMCO] initApp() [m_isAppInited = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_INIT_APP_END, "[CAMCO] initApp() finish")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_INIT_SETTING, "[CAMCO] initSetting() [mode = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_INIT_SETTING_STORAGE, "[CAMCO] initSetting() [set default storage]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_INIT_SETTING_END, "[CAMCO] initSetting() finish")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_INIT_PREVIEW_WINDOW, "[CAMCO] initPreviewWindow() [w = %d, h = %d, x = %d, y = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_STATE, "[CAMCO] enterState() [next_state = %d, curr App = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_EXIT_STATE, "[CAMCO] exitState() [curr_state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_RECOVER_STATE, "[CAMCO] recoverState() [state = %d, event = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_HDLR, "[CAMCO] camPreviewHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_FAILED_HDLR, "[CAMCO] camPreviewFailedHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SAVE_DONE_HDLR, "[CAMCO] camSaveDoneHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_COUNT_DOWN_HDLR, "[CAMCO] camCountdownHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SMILEDECT_HDLR, "[CAMCO] camSmileDectHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_FOCUS_HDLR, "[CAMCO] camFocusHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_HDLR, "[CAMCO] recPreviewHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_FAILED_HDLR, "[CAMCO] recPreviewFailedHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORDING_HDLR, "[CAMCO] recRecordingHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PAUSE_HDLR, "[CAMCO] recPauseHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_SAVE_DONE_HDLR, "[CAMCO] recSaveDoneHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_FOCUS_HDLR, "[CAMCO] recFocusHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ERROR_POPUP_HDLR, "[CAMCO] errorPopupHdlr() [state = %d, event = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_APP_GLOBAL_EVENT_HDLR, "[CAMCO] appGlobalEventHdlr() [state = %d, event = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_EXIT_STATE, "[CAMCO] enterExitState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_PREVIEW_STATE, "[CAMCO] enterCamPreviewState() [start = %d, restart = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_PREVIEW_FAILED_STATE, "[CAMCO] enterCamPreviewFailedState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_FOCUSING_STATE, "[CAMCO] enterCamFocusingState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_FOCUSED_STATE, "[CAMCO] enterCamFocusedState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_COUNTDOWN_STATE, "[CAMCO] enterCamCountdownState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_CAPTURE_STATE, "[CAMCO] enterCamCaptureState() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_SAVE_DONE_STATE, "[CAMCO] enterCamSaveDoneState() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_CAM_SMILEDECT_STATE, "[CAMCO] enterCamSmileDectState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_PREVIEW_STATE, "[CAMCO] enterRecPreviewState() [start = %d, restart = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_PREVIEW_FAILED_STATE, "[CAMCO] enterRecPreviewFailedState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_FOCUSING_STATE, "[CAMCO] enterRecFocusingState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_FOCUSED_STATE, "[CAMCO] enterRecFocusedState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_RECORDING_STATE, "[CAMCO] enterRecRecordingState() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_PAUSE_STATE, "[CAMCO] enterRecPauseState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_SAVING_STATE, "[CAMCO] enterRecSavingState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_REC_SAVE_DONE_STATE, "[CAMCO] enterRecSaveDoneState()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ENTER_ENTER_FAIL_STATE, "[CAMCO] enterEnterFailState()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_RESULT_HW_CALLBACK, "[CAMCO] resultHWCallback() [type = %d, state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_RESULT_HW_CALLBACK_EVENT, "[CAMCO] resultHWCallback() [event = %d, value = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_RESTART_PREVIEW, "[CAMCO] camRestartPreview()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RESTART_PREVIEW, "[CAMCO] recRestartPreview()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_PREVIEW_FRAME_PREPARE_DONE, "[CAMCO] onPreviewFramePrepareDone() [m_isStartingPreview = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_PREVIEW_FRAME_PREPARE_DONE_TICK, "[CAMCO] onPreviewFrameDoneDelayTick()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SCN_DETECT_CYCLIC, "[CAMCO] sceneDetectCyclic() [state = %d, isDelayPreview = %d, isStartingPreview = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SCN_DETECT_RESULT, "[CAMCO] sceneDetectCyclic()     [current scene mode = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SMILEDETECT_CYCLIC, "[CAMCO] smiledetectCyclic() [state = %d, isDelayPreview = %d, isStartingPreview = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SMILEDETECT_RESULT, "[CAMCO] smiledetectCyclic()     [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SMILEDETECT_SUCCESS, "[CAMCO] smiledetectSuccess()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_COUNTDOWN_CYCLIC, "[CAMCO] countdownCyclic() [dur = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_COUNTDOWN_CYCLIC1, "[CAMCO] countdownCyclic()     [dur = %d, timer = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_RECORDINGCYCLIC, "[CAMCO] recordingCyclic() [time = %d, size = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_RECORD_FINISH_TICK, "[CAMCO] recordingFinishTick() [state = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_ISSLIENTMODE, "[CAMCO] isSlientMode()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_INITCOUNTDOWNSOUND, "[CAMCO] initCountDownSound()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_DEINITCOUNTDOWNSOUND, "[CAMCO] deinitCountDownSound()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_PLAY_AUTOFOCUS_SUCCESS_SOUND, "[CAMCO] playAutofocusSuccessSound() [isSlientMode = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_PLAY_AUTOFOCUS_SUCCESS_SOUND_DONE, "[CAMCO] autoFocusToneCyclic()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_PLAY_CATURE_SOUND, "[CAMCO] playCatureSound() [cap_ret = %d, isSilentMode = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_PLAY_RECORD_SOUND, "[CAMCO] playRecordSound() [isSilentMode = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_PLAY_RECORD_TONE_DONE, "[CAMCO] playRecordSoundDonw() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAPTURE, "[CAMCO] capture() [isSilentMode = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_IS_APP_ACTIVE, "[CAMCO] isAppActive() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_IS_INCALL, "[CAMCO] isInCall() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_ERROR_EXIT_TIMER_TICK, "[CAMCO] onErrorExitTimerTick()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SHOW_POPUP_SCREEN, "[CAMCO] showPopupScreen() [error_cause = %d, param = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_STOP_POPUP_SCREEN, "[CAMCO] stopPopupScreen() [is running = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_POPUP_CALLBACK, "[CAMCO] popupcallback()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_POPUP_RECOVERCALLBACK, "[CAMCO] popupRecovercallback() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_POPUP_ENTER_CALLBACK, "[CAMCO] popupEntercallback() [state = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_EXIT_CAMCO_CUI, "[CAMCO] exitCamcoCUI()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_MAPPING_SHOWN_STRING, "[CAMCO] etMappingShownString() [type = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_GETNEXTFILENAME, "[CAMCO] getNextFilename() [curr_no = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_RESTOREFILENAME, "[CAMCO] restoreFilename() [curr_no = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_TRANS_P_TO_OSD, "[CAMCO] transPointToOSDCoord() [from = %d, to = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_FMGR_EVENT, "[CAMCO] fileMgrEventHdlr()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_FONT_EVENT, "[CAMCO] fontChangeNotigyHdlr()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_STORAGE_EVENT, "[CAMCO] storageChangeNotifyHdlr()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_USB_EVENT, "[CAMCO] USBChangeNotigyHdlr()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_RESET_HW_OBJ, "[CAMCO] vapp_camco_reset_hw_obj() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_START, "[CAMCO] vapp_camco_cam_preview_start() [enter][preview start = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_START_F, "[CAMCO] vapp_camco_cam_preview_start() [leave][result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_STOP, "[CAMCO] vapp_camco_cam_preview_stop() [enter][preview start = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_STOP_F, "[CAMCO] vapp_camco_cam_preview_stop() [leave]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_START, "[CAMCO] vapp_camco_rec_preview_start() [enter][preview start = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_START_F, "[CAMCO] vapp_camco_rec_preview_start() [leave][result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_STOP, "[CAMCO] vapp_camco_rec_preview_stop() [enter][preview start = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_STOP_F, "[CAMCO] vapp_camco_rec_preview_stop() [leave]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_POWER_ON, "[CAMCO] vapp_camco_cam_power_on() [enter][power on = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_POWER_ON_F, "[CAMCO] vapp_camco_cam_power_on() [leave][result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_POWER_OFF, "[CAMCO] vapp_camco_cam_power_off() [enter][power on = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_POWER_OFF_F, "[CAMCO] vapp_camco_cam_power_off() [leave]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_POWER_ON, "[CAMCO] vapp_camco_rec_power_on() [[enter]power on = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_POWER_ON_F, "[CAMCO] vapp_camco_rec_power_on() [leave][result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_POWER_OFF, "[CAMCO] vapp_camco_rec_power_off() [enter][power on = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_POWER_OFF_F, "[CAMCO] vapp_camco_rec_power_off() [leave]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_NORMAL_SHOT, "[CAMCO] vapp_camco_cam_normal_shot() [enter]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_NORMAL_SHOT_F, "[CAMCO] vapp_camco_cam_normal_shot() [leave][result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_GET_ASD_RESULT, "[CAMCO] vapp_camco_cam_scenedetect_get_result() [mode = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SMILEDETECT_GET_RESULT, "[CAMCO] vapp_camco_cam_smiledetect_get_result() [fd_result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SMILEDETECT_GET_RESULT_1, "[CAMCO] vapp_camco_cam_smiledetect_get_result() [fd_searched_num = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SMILEDETECT_GET_RESULT_2, "[CAMCO] vapp_camco_cam_smiledetect_get_result() [sd_end_flag = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SMILEDETECT_GET_RESULT_3, "[CAMCO] vapp_camco_cam_smiledetect_get_result() [sd_searched_num = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SD_START, "[CAMCO] vapp_camco_cam_sd_start() [enter][isSmiledetectStart = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SD_START_F, "[CAMCO] vapp_camco_cam_sd_start() [leave][result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SD_STOP, "[CAMCO] vapp_camco_cam_sd_stop() [enter][isSmiledetectStart = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SD_STOP_F, "[CAMCO] vapp_camco_cam_sd_stop() [leave][result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_SAVE_CAPTURE_IMAGE, "[CAMCO] vapp_camco_cam_save_capture_image() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_START, "[CAMCO] vapp_camco_rec_record_start() [enter][isPreviewStart = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_START_F, "[CAMCO] vapp_camco_rec_record_start() [leave][result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_STOP, "[CAMCO] vapp_camco_rec_record_stop() [enter][isOnRecord = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_STOP_F, "[CAMCO] vapp_camco_rec_record_stop() [leave][result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_PAUSE, "[CAMCO] vapp_camco_rec_record_pause() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_RESUME, "[CAMCO] vapp_camco_rec_record_resume() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_CALLBACK, "[CAMCO] vapp_camco_rec_record_callback() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_GET_TIME, "[CAMCO] vapp_camco_rec_record_get_time() [time = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_GET_SIZE, "[CAMCO] vapp_camco_rec_record_get_size() [size = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_GET_COUNT, "[CAMCO] vapp_camco_rec_record_get_count() [count = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_SAVE_VIDEO, "[CAMCO] vapp_camco_rec_save_video() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_STOP_SAVE_VIDEO, "[CAMCO] vapp_camco_rec_stop_save_video()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_SAVE_VIDEO_RESULT, "[CAMCO] vapp_camco_rec_save_video_result() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_FETCH_FRAME, "[CAMCO] vapp_camco_rec_fetch_frame() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_BG_CAL_START, "[CAMCO] vapp_camco_background_calculation_start() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_BG_CAL_STOP, "[CAMCO] vapp_camco_background_calculation_stop() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_GET_EST_SIZE, "[CAMCO] vapp_camco_cam_get_estimated_picture_size() [enter]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_GET_EST_SIZE_F, "[CAMCO] vapp_camco_cam_get_estimated_picture_size() [leave][qty = %d, w = %d, h = %d, est size = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_GET_EST_SIZE, "[CAMCO] vapp_camco_rec_get_estimated_video_size() [enter]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_GET_EST_SIZE_F, "[CAMCO] vapp_camco_rec_get_estimated_video_size() [leave][qty = %d, fomate = %d, resolution = %d, storage = %d, est size = %d, reserve size = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_AUTOFOCUS_START, "[CAMCO] vapp_camco_cam_autofocus_start() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_AUTOFOCUS_STOP, "[CAMCO] vapp_camco_cam_autofocus_stop() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_GET_AUTOFOCUS_RESULT, "[CAMCO] vapp_camco_cam_get_autofocus_result() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_AUTOFOCUS_START, "[CAMCO] vapp_camco_rec_autofocus_start() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_AUTOFOCUS_STOP, "[CAMCO] vapp_camco_rec_autofocus_stop() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_GET_AUTOFOCUS_RESULT, "[CAMCO] vapp_camco_rec_get_autofocus_result() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_BK_TURN_ON, "[CAMCO] vapp_camco_bk_turn_on() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_BK_TURN_OFF, "[CAMCO] vapp_camco_bk_turn_off() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_HIGHLIGHT_TURN_ON, "[CAMCO] vapp_camco_highlight_turn_on() [result = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_HIGHLIGHT_TURN_OFF, "[CAMCO] vapp_camco_highlight_turn_off() [result = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE, "[CAMCO]       vapp_camco_setting_get_value() [setting = %d, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_CAMSCENEMODE, "[CAMCO]       vapp_camco_setting_get_value() [setting = cam SCN mode, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_CAPSIZE, "[CAMCO]       vapp_camco_setting_get_value() [setting = capsize, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_FLASH, "[CAMCO]       vapp_camco_setting_get_value() [setting = flash, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_SELFTIMER, "[CAMCO]       vapp_camco_setting_get_value() [setting = timer, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_ISO, "[CAMCO]       vapp_camco_setting_get_value() [setting = iso, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_WB, "[CAMCO]       vapp_camco_setting_get_value() [setting = wb, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_EFFECT, "[CAMCO]       vapp_camco_setting_get_value() [setting = effect, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_CAMSTORAGE, "[CAMCO]       vapp_camco_setting_get_value() [setting = cam storage, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_VDOSTORAGE, "[CAMCO]       vapp_camco_setting_get_value() [setting = vdo storage, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_CAPQTY, "[CAMCO]       vapp_camco_setting_get_value() [setting = cam qty, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_VDOSCENEMODE, "[CAMCO]       vapp_camco_setting_get_value() [setting = rec SCN mode, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_RECSIZE, "[CAMCO]       vapp_camco_setting_get_value() [setting = recsize, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_TIME_LAPSE, "[CAMCO]       vapp_camco_setting_get_value() [setting = time lapse, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_TIME_LAPSE_PERIOD, "[CAMCO]       vapp_camco_setting_get_value() [setting = time lapse period, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_LIMIT, "[CAMCO]       vapp_camco_setting_get_value() [setting = limit, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_VISQTY, "[CAMCO]       vapp_camco_setting_get_value() [setting = rec qty, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_VISCODEC, "[CAMCO]       vapp_camco_setting_get_value() [setting = rec codec, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_CAMEV, "[CAMCO]       vapp_camco_setting_get_value() [setting = cam EV, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_VDOEV, "[CAMCO]       vapp_camco_setting_get_value() [setting = rec EV, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_CAMZOOM, "[CAMCO]       vapp_camco_setting_get_value() [setting = cam zoom, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_VDOZOOM, "[CAMCO]       vapp_camco_setting_get_value() [setting = rec zoom, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_SD, "[CAMCO]       vapp_camco_setting_get_value() [setting = sd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_ASD, "[CAMCO]       vapp_camco_setting_get_value() [setting = asd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_ZSD, "[CAMCO]       vapp_camco_setting_get_value() [setting = zsd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_ACT_APP, "[CAMCO]       vapp_camco_setting_get_value() [setting = act app, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_VALUE_ACT_CAM, "[CAMCO]       vapp_camco_setting_get_value() [setting = act sensor, value = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE, "[CAMCO]       vapp_camco_setting_set_value() [setting = %d, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_CAMSCENEMODE, "[CAMCO]       vapp_camco_setting_set_value() [setting = cam SCN mode, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_CAPSIZE, "[CAMCO]       vapp_camco_setting_set_value() [setting = capsize, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_FLASH, "[CAMCO]       vapp_camco_setting_set_value() [setting = flash, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_SELFTIMER, "[CAMCO]       vapp_camco_setting_set_value() [setting = timer, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_ISO, "[CAMCO]       vapp_camco_setting_set_value() [setting = iso, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_WB, "[CAMCO]       vapp_camco_setting_set_value() [setting = wb, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_EFFECT, "[CAMCO]       vapp_camco_setting_set_value() [setting = effect, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_CAMSTORAGE, "[CAMCO]       vapp_camco_setting_set_value() [setting = cam storage, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_VDOSTORAGE, "[CAMCO]       vapp_camco_setting_set_value() [setting = vdo storage, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_CAPQTY, "[CAMCO]       vapp_camco_setting_set_value() [setting = cam qty, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_VDOSCENEMODE, "[CAMCO]       vapp_camco_setting_set_value() [setting = rec SCN mode, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_RECSIZE, "[CAMCO]       vapp_camco_setting_set_value() [setting = recsize, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_TIME_LAPSE, "[CAMCO]       vapp_camco_setting_set_value() [setting = time lapse, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_TIME_LAPSE_PERIOD, "[CAMCO]       vapp_camco_setting_set_value() [setting = time lapse period, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_LIMIT, "[CAMCO]       vapp_camco_setting_set_value() [setting = limit, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_VISQTY, "[CAMCO]       vapp_camco_setting_set_value() [setting = rec qty, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_VISCODEC, "[CAMCO]       vapp_camco_setting_set_value() [setting = rec codec, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_CAMEV, "[CAMCO]       vapp_camco_setting_set_value() [setting = cam EV, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_VDOEV, "[CAMCO]       vapp_camco_setting_set_value() [setting = rec EV, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_CAMZOOM, "[CAMCO]       vapp_camco_setting_set_value() [setting = cam zoom, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_VDOZOOM, "[CAMCO]       vapp_camco_setting_set_value() [setting = rec zoom, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_SD, "[CAMCO]       vapp_camco_setting_set_value() [setting = sd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_ASD, "[CAMCO]       vapp_camco_setting_set_value() [setting = asd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_ZSD, "[CAMCO]       vapp_camco_setting_set_value() [setting = zsd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_ACT_APP, "[CAMCO]       vapp_camco_setting_set_value() [setting = act app, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_ACT_CAM, "[CAMCO]       vapp_camco_setting_set_value() [setting = act sensor, value = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_CAMSCENEMODE, "[CAMCO] vapp_camco_setting_init() [setting = cam SCN mode]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_CAPSIZE, "[CAMCO] vapp_camco_setting_init() [setting = capsize]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_FLASH, "[CAMCO] vapp_camco_setting_init() [setting = flash]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_SELFTIMER, "[CAMCO] vapp_camco_setting_init() [setting = timer]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_ISO, "[CAMCO] vapp_camco_setting_init() [setting = iso]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_WB, "[CAMCO] vapp_camco_setting_init() [setting = wb]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_EFFECT, "[CAMCO] vapp_camco_setting_init() [setting = effect]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_CAMSTORAGE, "[CAMCO] vapp_camco_setting_init() [setting = cam storage]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_VDOSTORAGE, "[CAMCO] vapp_camco_setting_init() [setting = vdo storage]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_CAPQTY, "[CAMCO] vapp_camco_setting_init() [setting = cam qty]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_VDOSCENEMODE, "[CAMCO] vapp_camco_setting_init() [setting = rec SCN mode]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_RECSIZE, "[CAMCO] vapp_camco_setting_init() [setting = recsize]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_TIME_LAPSE, "[CAMCO] vapp_camco_setting_init() [setting = time lapse]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_TIME_LAPSE_PERIOD, "[CAMCO] vapp_camco_setting_init() [setting = time lapse period]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_LIMIT, "[CAMCO] vapp_camco_setting_init() [setting = limit]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_VISQTY, "[CAMCO] vapp_camco_setting_init() [setting = rec qty]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_VISCODEC, "[CAMCO] vapp_camco_setting_init() [setting = rec codec]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_CAMEV, "[CAMCO] vapp_camco_setting_init() [setting = cam EV]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_VDOEV, "[CAMCO] vapp_camco_setting_init() [setting = rec EV]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_CAMZOOM, "[CAMCO] vapp_camco_setting_init() [setting = cam zoom]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_VDOZOOM, "[CAMCO] vapp_camco_setting_init() [setting = rec zoom]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_SD, "[CAMCO] vapp_camco_setting_init() [setting = sd]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_ASD, "[CAMCO] vapp_camco_setting_init() [setting = asd]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_ZSD, "[CAMCO] vapp_camco_setting_init() [setting = zsd]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_ACT_APP, "[CAMCO] vapp_camco_setting_init() [setting = act app]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_ACT_CAM, "[CAMCO] vapp_camco_setting_init() [setting = act sensor]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_CAMSCENEMODE, "[CAMCO] vapp_camco_setting_default() [setting = cam SCN mode, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_CAPSIZE, "[CAMCO] vapp_camco_setting_default() [setting = capsize, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_FLASH, "[CAMCO] vapp_camco_setting_default() [setting = flash, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_SELFTIMER, "[CAMCO] vapp_camco_setting_default() [setting = timer, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_ISO, "[CAMCO] vapp_camco_setting_default() [setting = iso, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_WB, "[CAMCO] vapp_camco_setting_default() [setting = wb, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_EFFECT, "[CAMCO] vapp_camco_setting_default() [setting = effect, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_CAMSTORAGE, "[CAMCO] vapp_camco_setting_default() [setting = cam storage, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_VDOSTORAGE, "[CAMCO] vapp_camco_setting_default() [setting = vdo storage, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_CAPQTY, "[CAMCO] vapp_camco_setting_default() [setting = cam qty, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_VDOSCENEMODE, "[CAMCO] vapp_camco_setting_default() [setting = rec SCN mode, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_RECSIZE, "[CAMCO] vapp_camco_setting_default() [setting = recsize, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_TIME_LAPSE, "[CAMCO] vapp_camco_setting_default() [setting = time lapse, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_TIME_LAPSE_PERIOD, "[CAMCO] vapp_camco_setting_default() [setting = time lapse period, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_LIMIT, "[CAMCO] vapp_camco_setting_default() [setting = limit, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_VISQTY, "[CAMCO] vapp_camco_setting_default() [setting = rec qty, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_VISCODEC, "[CAMCO] vapp_camco_setting_default() [setting = rec codec, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_CAMEV, "[CAMCO] vapp_camco_setting_default() [setting = cam EV, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_VDOEV, "[CAMCO] vapp_camco_setting_default() [setting = rec EV, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_CAMZOOM, "[CAMCO] vapp_camco_setting_default() [setting = cam zoom, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_VDOZOOM, "[CAMCO] vapp_camco_setting_default() [setting = rec zoom, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_SD, "[CAMCO] vapp_camco_setting_default() [setting = sd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_ASD, "[CAMCO] vapp_camco_setting_default() [setting = asd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_ZSD, "[CAMCO] vapp_camco_setting_default() [setting = zsd, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_ACT_APP, "[CAMCO] vapp_camco_setting_default() [setting = act app, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_ACT_CAM, "[CAMCO] vapp_camco_setting_default() [setting = act sensor, value = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_CHECK_AND_SET_S, "[CAMCO] vapp_camco_setting_check_and_set() [enter][type = %d, value = %d, current value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_CHECK_AND_SET_E, "[CAMCO] vapp_camco_setting_check_and_set() [leave][current value = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_GET_MAPPING_ID, "[CAMCO] vapp_camco_setting_get_mapping_id() [setting = %d, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_UPDATE, "[CAMCO] vapp_camco_setting_update_setting() [change_setting = %d, change_value = %d, last_value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_CUSTOM_DEP, "[CAMCO] vapp_camco_setting_custom() [has depened = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_CUSTOM_KEY, "[CAMCO] vapp_camco_setting_custom() [key = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_CUSTOM_HIDE, "[CAMCO] vapp_camco_setting_custom() [hide = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_CUSTOM_UPDATE, "[CAMCO] vapp_camco_setting_custom_update() ")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_ALL, "[CAMCO] vapp_camco_setting_init_all_setting() [enter]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_INIT_ALL_F, "[CAMCO] vapp_camco_setting_init_all_setting() [leave]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_ALL, "[CAMCO] vapp_camco_setting_default_all_setting() [enter]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_DEFAULT_ALL_F, "[CAMCO] vapp_camco_setting_default_all_setting() [leave]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_ALL, "[CAMCO] vapp_camco_setting_set_value_all_setting() [enter]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SETTING_SET_VALUE_ALL_F, "[CAMCO] vapp_camco_setting_set_value_all_setting() [leave]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_ENTER_STATE, "[CAMCO][OSD] vapp_camco_osd_enter_state() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_EXIT_STATE, "[CAMCO][OSD]     vapp_camco_osd_exit_state() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_SET_PARAM, "[CAMCO][OSD] vapp_camco_osd_set_param() [type = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SET_STATUS, "[CAMCO][OSD] vapp_camco_osd_set_Status() [isSet = %d, type = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_CP_RECT_UPDATE, "[CAMCO][OSD] vapp_camco_osd_cp_rect_update() [type = %d, x = %d, y = %d, w = %d, h = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_CP_SLIDER_UPDATE, "[CAMCO][OSD] vapp_camco_osd_cp_slider_update() [value = %d, minValue = %d, maxValue = %d, isVerticalMode = %d, isInverseMode = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_CP_BASE_MENU_SELECT, "[CAMCO][OSD] vapp_camco_osd_cp_base_menu_select() [setting = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_CP_CIRCLE_MENU_SELECT, "[CAMCO][OSD] vapp_camco_osd_cp_circle_menu_select() [setting = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_CP_AD_MENU_SELECT, "[CAMCO][OSD] vapp_camco_osd_cp_advance_menu_select() [setting = %d, value = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_OSD_CP_AD_MENU_TRAVERSE, "[CAMCO][OSD] vapp_camco_osd_cp_advance_menu_traverse() [setting = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_SET_NORMAL_MODE, "[CAMCO][OSD] vapp_camco_osd_set_normal_mode() [current state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SET_CLEAR_MODE, "[CAMCO][OSD] vapp_camco_osd_set_clear_mode() [current state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SET_DIRECT_SETTING_MODE, "[CAMCO][OSD] vapp_camco_osd_set_direct_setting_mode() [current state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SET_ADVANCE_SETTING_MODE, "[CAMCO][OSD] vapp_camco_osd_set_advance_setting_mode() [current state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SET_SMILE_MODE, "[CAMCO][OSD] vapp_camco_osd_set_smile_mode() [current state = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_GALLERY_CLICK, "[CAMCO][OSD] vapp_camco_osd_flash_click()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAPTURE_CLICK, "[CAMCO][OSD] vapp_camco_osd_capture_click()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAPTURE_STATE_CHANGE, "[CAMCO][OSD] vapp_camco_osd_capture_state_change() [state = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SWITCH_SENSOR_CLICK, "[CAMCO][OSD] vapp_camco_osd_switch_sensor_click()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_SWITCH_APP_CLICK, "[CAMCO][OSD] vapp_camco_osd_switch_app_click()")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_ENTER_ADVANCE_SETTING, "[CAMCO][OSD][CAM PREVIEW] enter advance setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_ENTER_SETTING, "[CAMCO][OSD][CAM PREVIEW] enter setting (%d)")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_SET_SETTING, "[CAMCO][OSD][CAM PREVIEW] set setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_SET_ADVANCE_SETTING, "[CAMCO][OSD][CAM PREVIEW] set advance setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_SET_ZOOM_SETTING, "[CAMCO][OSD][CAM PREVIEW] set zoom setting [v = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_SET_ADDFRAME_SETTING, "[CAMCO][OSD][CAM PREVIEW] set add frame setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_LEAVE_SETTING, "[CAMCO][OSD][CAM PREVIEW] leave setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_LEAVE_ADVANCE_SETTING, "[CAMCO][OSD][CAM PREVIEW] leave advance setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_CAM_PREVIEW_TRAVERSE_ADVANCE_SETTING, "[CAMCO][OSD][CAM PREVIEW] traverse advance setting (%d)")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_ENTER_ADVANCE_SETTING, "[CAMCO][OSD][REC PREVIEW] enter advance setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_ENTER_SETTING, "[CAMCO][OSD][REC PREVIEW] enter setting (%d)")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_SET_SETTING, "[CAMCO][OSD][REC PREVIEW] set setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_SET_ADVANCE_SETTING, "[CAMCO][OSD][REC PREVIEW] set advance setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_SET_ZOOM_SETTING, "[CAMCO][OSD][REC PREVIEW] set zoom setting [v = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_LEAVE_SETTING, "[CAMCO][OSD][REC PREVIEW] leave setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_LEAVE_ADVANCE_SETTING, "[CAMCO][OSD][REC PREVIEW] leave advance setting")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PREVIEW_TRAVERSE_ADVANCE_SETTING, "[CAMCO][OSD][REC PREVIEW] traverse advance setting (%d)")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_RESET_TIMER, "[CAMCO][OSD] vapp_camco_osd_reset_timer()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_PEN_INPUT, "[CAMCO][OSD] vapp_camco_osd_on_pen_input()[m_mode = %d, type = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_ON_KEY_INPUT, "[CAMCO][OSD] vapp_camco_osd_on_key_input()[m_mode = %d, code = %d, type = %d]")

TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_RECORD_SET_ZOOM_SETTING, "[CAMCO][OSD][REC RECORDING] set zoom setting [v = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_REC_PAUSE_SET_ZOOM_SETTING, "[CAMCO][REC PAUSE] set zoom setting [v = %d]")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_STOP_CLICK, "[CAMCO][OSD] vapp_camco_osd_stop_click()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_PAUSE_CLICK, "[CAMCO][OSD] vapp_camco_osd_pause_click()")
TRC_MSG(TRC_VAPP_CAMCO_SLIM_RESUME_CLICK, "[CAMCO][OSD] vapp_camco_osd_resume_click()")