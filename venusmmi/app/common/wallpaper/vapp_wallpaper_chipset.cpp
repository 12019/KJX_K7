/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES. ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *  vapp_wallpaper_chipset.cpp
 *
 * Project:
 * --------
 *  Venus Live Wallpaper
 *
 * Description:
 * ------------
 *  Home screen wave wallpaper class
 *
 * Author:
 * -------
 * -------
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!

 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 * removed!
 *
 * removed!
 * removed!
 * removed!
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
#include "MMI_features.h"

#ifdef __MMI_VUI_HOMESCREEN_LIVE_WALLPAPER_CHIPSET__

/***************************************************************************** 
 * Include
 *****************************************************************************/
#include "vapp_wallpaper_chipset.h"
#include "mmi_rp_app_venus_wallpaper_chipset_def.h"
#include "stdlib.h"
extern "C"
{
#include "gdi_primitive.h"
#include "gdi_lcd_config.h"
#include "lcd_sw_inc.h"
#include "vrt_canvas.h"
}
#include "vfx_datatype.h"
#include "vrt_datatype.h"
#include "vfx_cpp_base.h"
#include "vfx_object.h"
#include "vfx_sys_memory.h"
#include "vapp_wallpaper.h"
#include "vfx_class_info.h"
#include "vfx_animation.h"
#include "vfx_frame.h"
#include "vfx_image_src.h"
#include "vfx_transform.h"
#include "vfx_input_event.h"
#include "vfx_basic_type.h"
#include "vfx_frame_filter.h"

#ifdef __VENUS_3D_UI_ENGINE__
#include "vfx_owner_draw.h"
#include "gles2\gl2.h"
#include "gles2\gl2ext.h"
#endif

#ifdef __MTK_TARGET__
//#define __MAUI_SOFTWARE_LA__
#endif

#if defined(__MTK_TARGET__) && defined(__MAUI_SOFTWARE_LA__)
extern "C"
{
#include "SST_sla.h"
}
#define SWLA_BEGIN(_symbol_) SLA_CustomLogging(##_symbol_##, SA_start);
#define SWLA_END(_symbol_) SLA_CustomLogging(##_symbol_##, SA_stop);
#else
#define SWLA_BEGIN(_symbol_)
#define SWLA_END(_symbol_)
#endif


/***************************************************************************** 
 * Global data
 *****************************************************************************/
static const VfxS32 SCRN_W = GDI_LCD_WIDTH;
static const VfxS32 SCRN_H = GDI_LCD_HEIGHT;

// Use path generation script to convert BMP into these lists.

#if defined(__MMI_MAINLCD_240X320__)
static const VfxS16 g_chipsetPathData[ChipsetPath::MAX_PATH_NUM][SCRN_H] = 
{
    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 },
    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 239, 238, 237, 236, 235, 234, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 234, 235, 236, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 236, 235, 234, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 231, 230, 229, 228, 227, 226, 225, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235 },
    { 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 },
    { 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209 },
    { 86, 86, 86, 86, 86, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47 },
    { 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192 },
    { 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 60, 61, 62 },
    { 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 180, 179, 178, 177 },
};

#elif defined(__MMI_MAINLCD_240X400__)
static const VfxS16 g_chipsetPathData[ChipsetPath::MAX_PATH_NUM][SCRN_H] = 
{    
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
    { 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 223, 222, 221, 220, 219, 218, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 231, 230, 229, 228, 227, 226, 225, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
    { 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32 },
    { 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207 },
    { 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 86, 87, 88, 89, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71 },
    { 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 154, 153, 152, 151, 150, 149, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168 },
    { 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, -1 },
    { 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, -1 },
};

#elif defined(__MMI_MAINLCD_320X480__)
static const VfxS16 g_chipsetPathData[ChipsetPath::MAX_PATH_NUM][SCRN_H] = 
{    
    {},
    {},
    { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 38, 37, 36, 35, 34, 33, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 48, 47, 46, 45, 44, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 43, 44, 45, 46, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39 },
    { 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 280, 281, 282, 283, 284, 285, 286, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 271, 272, 273, 274, 275, 276, 277, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 277, 276, 275, 274, 273, 272, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280 },
    { 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 94, 95, 96, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68 },
    { 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 226, 225, 224, 223, 222, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251 },
    { 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 139, 138, 137, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 138, 139, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89 },
    { 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 180, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 182, 181, 180, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230 },
    {},
    {},
};

#elif defined(__MMI_MAINLCD_480X800__)
static const VfxS16 g_chipsetPathData[ChipsetPath::MAX_PATH_NUM][SCRN_H] = 
{ 
    { 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 53, 52, 52, 51, 50, 49, 48, 48, 47, 46, 45, 44, 44, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 44, 45, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 67, 66, 66, 65, 64, 63, 62, 62, 61, 60, 59, 58, 58, 57, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 64, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 68, 69, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 73, 74, 74, 75, 76, 77, 78, 79, 80, 80, 81, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 81, 81, 80, 79, 78, 77, 76, 76, 75, 74, 73, 72, 71, 71, 70, 69, 68, 67, 66, 66, 65, 45, 44, 44, 43, 42, 42, 41, 40, 39, 39, 38, 37, 37, 36, 35, 35, 34, 33, 33, 32, 31, 30, 30, 29, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27 },
    { 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 427, 427, 428, 429, 430, 431, 431, 432, 433, 434, 435, 435, 436, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 436, 435, 434, 434, 433, 432, 431, 430, 429, 429, 428, 427, 426, 425, 424, 424, 423, 422, 421, 420, 419, 419, 418, 417, 416, 415, 414, 414, 413, 412, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 412, 413, 413, 414, 415, 416, 417, 417, 418, 419, 420, 421, 421, 422, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 422, 421, 420, 420, 419, 418, 417, 416, 415, 415, 414, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 412, 412, 411, 410, 409, 409, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 408, 407, 406, 405, 405, 404, 403, 402, 401, 400, 399, 399, 398, 397, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 397, 398, 398, 399, 400, 401, 402, 403, 403, 404, 405, 406, 407, 408, 408, 409, 410, 411, 412, 413, 413, 414, 434, 435, 435, 436, 437, 437, 438, 439, 440, 440, 441, 442, 442, 443, 444, 444, 445, 446, 446, 447, 448, 449, 449, 450, 451, 451, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452 },
    {},
    {},
    { 321, 321, 321, 321, 321, 320, 319, 318, 318, 317, 316, 315, 314, 313, 313, 312, 311, 310, 309, 308, 308, 307, 306, 305, 304, 303, 303, 302, 301, 300, 299, 298, 298, 297, 296, 295, 294, 293, 293, 292, 291, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 292, 292, 293, 294, 295, 296, 296, 297, 298, 299, 300, 300, 301, 302, 303, 304, 304, 305, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 307, 307, 308, 309, 310, 310, 311, 312, 312, 313, 314, 315, 315, 316, 317, 317, 318, 319, 320, 320, 321, 322, 323, 323, 324, 325, 325, 326, 327, 328, 328, 329, 330, 331, 332, 332, 333, 334, 335, 336, 336, 337, 338, 339, 340, 341, 341, 342, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 342, 341, 341, 340, 339, 338, 338, 337, 336, 335, 334, 334, 333, 332, 331, 331, 330, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 275, 276, 276, 277, 278, 279, 280, 280, 281, 282, 283, 283, 284, 285, 286, 287, 287, 288, 289, 290, 291, 291, 292, 293, 294, 295, 295, 296, 297, 298, 298, 299, 300, 301, 302, 302, 303, 304, 305, 306, 306, 307, 308, 309, 310, 310, 311, 312, 313, 313, 314, 315, 316, 317, 317, 318, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 320, 321, 321, 322, 323, 324, 325, 326, 326, 327, 328, 329, 330, 331, 331, 332, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 332, 331, 330, 329, 329, 328, 327, 326, 325, 324, 323, 322, 321, 321, 320, 319, 318, 317, 316, 315, 314, 314, 313, 312, 311, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310 },
    { 158, 158, 158, 158, 158, 159, 160, 161, 161, 162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 171, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 185, 186, 186, 187, 188, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 188, 187, 187, 186, 185, 184, 183, 183, 182, 181, 180, 179, 179, 178, 177, 176, 175, 175, 174, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 172, 172, 171, 170, 169, 169, 168, 167, 167, 166, 165, 164, 164, 163, 162, 162, 161, 160, 159, 159, 158, 157, 156, 156, 155, 154, 154, 153, 152, 151, 151, 150, 149, 148, 147, 147, 146, 145, 144, 143, 143, 142, 141, 140, 139, 138, 138, 137, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 138, 138, 139, 140, 141, 141, 142, 143, 144, 145, 145, 146, 147, 148, 148, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 203, 203, 202, 201, 200, 199, 199, 198, 197, 196, 196, 195, 194, 193, 192, 192, 191, 190, 189, 188, 188, 187, 186, 185, 184, 184, 183, 182, 181, 181, 180, 179, 178, 177, 177, 176, 175, 174, 173, 173, 172, 171, 170, 169, 169, 168, 167, 166, 166, 165, 164, 163, 162, 162, 161, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 159, 158, 158, 157, 156, 155, 154, 153, 153, 152, 151, 150, 149, 148, 148, 147, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 148, 149, 150, 150, 151, 152, 153, 154, 155, 156, 157, 158, 158, 159, 160, 161, 162, 163, 164, 165, 165, 166, 167, 168, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169 },
    { 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 358, 357, 357, 356, 355, 354, 353, 353, 352, 351, 350, 349, 349, 348, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 348, 349, 349, 350, 351, 352, 353, 353, 354, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 355, 356, 357, 358, 358, 359, 360, 361, 362, 363, 363, 364, 365, 366, 367, 368, 368, 369, 370, 371, 372, 373, 373, 374, 375, 376, 377, 378, 378, 379, 380, 381, 382, 383, 383, 384, 385, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 385, 384, 384, 383, 382, 381, 380, 380, 379, 378, 377, 376, 376, 375, 374, 373, 372, 372, 371, 370, 369, 368, 368, 367, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366, 365, 364, 363, 362, 362, 361, 360, 359, 358, 357, 357, 356, 355, 354, 353, 352, 352, 351, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 349, 348, 348, 347, 346, 345, 344, 343, 343, 342, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 341, 342, 343, 344, 344, 345, 346, 347, 348, 349, 349, 350, 351, 352, 353, 354, 355, 355, 356, 357, 358, 359, 360, 360, 361, 362, 363, 364, 365, 366, 366, 367, 368, 369, 370, 371, 371, 372, 373, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374 },
    { 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 122, 122, 123, 124, 125, 126, 126, 127, 128, 129, 130, 130, 131, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 131, 130, 130, 129, 128, 127, 126, 126, 125, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 123, 122, 121, 121, 120, 119, 118, 117, 116, 116, 115, 114, 113, 112, 111, 111, 110, 109, 108, 107, 106, 106, 105, 104, 103, 102, 101, 101, 100, 99, 98, 97, 96, 96, 95, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 95, 95, 96, 97, 98, 99, 99, 100, 101, 102, 103, 103, 104, 105, 106, 107, 107, 108, 109, 110, 111, 111, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 115, 116, 117, 117, 118, 119, 120, 121, 122, 122, 123, 124, 125, 126, 127, 127, 128, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 131, 131, 132, 133, 134, 135, 136, 136, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 137, 136, 135, 135, 134, 133, 132, 131, 130, 130, 129, 128, 127, 126, 125, 124, 124, 123, 122, 121, 120, 119, 119, 118, 117, 116, 115, 114, 113, 113, 112, 111, 110, 109, 108, 108, 107, 106, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105 },
};

#else 
// prevent build error 
static const VfxS16 g_chipsetPathData[ChipsetPath::MAX_PATH_NUM][SCRN_H] = {0}
#endif

#ifdef __VENUS_3D_UI_ENGINE__
#if defined(__MMI_MAINLCD_480X800__)
static const VfxU32 DOT_SPRITE_WIDTH = 117;
static const VfxU32 DOT_SPRITE_HEIGHT = 115;
static const VfxU32 TAIL_SPRITE_WIDTH = 35;
static const VfxU32 TAIL_SPRITE_HEIGHT = 183;
#else
static const VfxU32 DOT_SPRITE_WIDTH = 59;
static const VfxU32 DOT_SPRITE_HEIGHT = 60;
static const VfxU32 TAIL_SPRITE_WIDTH = 23;
static const VfxU32 TAIL_SPRITE_HEIGHT = 200;
#endif

#define GL_CHECK_ERROR

#ifdef GL_CHECK_ERROR
    #define GL_CHECK(x) \
            x; \
            { \
                GLenum glError = glGetError(); \
                VRT_EXT_ASSERT(glError == GL_NO_ERROR, glError, glError, glError); \
            }
#else
    #define GL_CHECK(x)    x;
#endif
#endif

/***************************************************************************** 
 * Function definitions
 *****************************************************************************/
inline static VfxS32 clampToScreenY(VfxS32 i)
{
    if(i < 0)
        return 0;
    if(i >= SCRN_H)
        return SCRN_H - 1;
    return i;
}

inline static VfxS32 clampToScreenX(VfxS32 i)
{
    if(i < 0)
        return 0;
    if(i >= SCRN_W)
        return SCRN_W - 1;
    return i;
}


// Copied from VRT internal function.
// VRT should not expose this interface,
// But GDI have no time to add this function.
// So we copy it here as a quick workaround.
static inline vrt_color_type util_render_RGB888_to_RGB565(vrt_color_type p)
{
    /*----------------------------------------------------------------*/
    /* Local Variables                                                */
    /*----------------------------------------------------------------*/   
    vrt_color_type   result;

    /*----------------------------------------------------------------*/
    /* Code Body                                                      */
    /*----------------------------------------------------------------*/
    /* reduce p's B[7:0] to result[4:0] */
    result = VRT_COLOR_GET_B(p) >> 3;

    /* reduce p's G[15:8] to result[10:5] */
    result += (VRT_COLOR_GET_G(p) >> 2) << 5;

    /* reduce p's R[15:8] to result[15:11] */
    result += (VRT_COLOR_GET_R(p) >> 3) << 11;

    return result;
}


extern "C" {
#ifdef __MTK_TARGET__
#pragma arm
#endif
void util_flatten_ARGB8888_to_RGB565(gdi_img_buf_struct *dst, const gdi_img_buf_struct *src, vrt_s32 width, vrt_s32 height)
{
    /*----------------------------------------------------------------*/
    /* Local Variables                                                */
    /*----------------------------------------------------------------*/
    void *dst_p = dst->ptr;
    void *src_p = src->ptr;
    vrt_s32 dst_pitch = dst->pitch_bytes;
    vrt_s32 src_pitch = src->pitch_bytes;
    const vrt_s32 src_opacity = 255;

    vrt_s32 x, y;
    vrt_u32 *src32_p;
    vrt_u16 *dst16_p;
 
    vrt_u32 alpha;

    /*----------------------------------------------------------------*/
    /* Code Body                                                      */
    /*----------------------------------------------------------------*/
    src32_p = (vrt_u32*)src_p;
    dst16_p = (vrt_u16*)dst_p;

    src_pitch /= 4;
    dst_pitch /= 2;

    for (y = height - 1; y >= 0; y--)
    {
        for (x = width - 1; x >= 0; x--)
        {
            vrt_u32 a, p;
            vrt_u32 dp, sp, s;
            
            s = *src32_p++;
            a = VRT_COLOR_GET_A(s);
            if (a)
            {
                s = util_render_RGB888_to_RGB565(s);

                if ((a == 255))
                {
                    *dst16_p = (vrt_u16)s;
                }
                else
                {
                    sp = (s | (s << 16)) & 0x7E0F81F;
                    alpha = (src_opacity * a) >> 11;

                    dp = (vrt_u32)*dst16_p;
                    dp = (dp | (dp << 16)) & 0x7E0F81F;

                    p = ((sp - dp) * alpha / 32 + dp) & 0x7E0F81F;
                    *dst16_p = (vrt_u16)(p | (p >> 16));
                }
            }         

            dst16_p++;
        }

        src32_p += src_pitch;
        dst16_p += dst_pitch;
    }        
}

static vrt_u32 util_PARGB6666_to_G11R10B11(vrt_u32 p)
{
    /*----------------------------------------------------------------*/
    /* Local Variables                                                */
    /*----------------------------------------------------------------*/
    vrt_color_type   result;

    /*----------------------------------------------------------------*/
    /* Code Body                                                      */
    /*----------------------------------------------------------------*/
    /* reduce p's B[5:0] to result[10:0] */
    result = GDI_PB_OF_PARGB6666(p) >> 1;

    /* reduce p's G[11:6] to result[31:21] */
    result += GDI_PG_OF_PARGB6666(p) << 21;

    /* reduce p's R[15:8] to result[20:11] */
    result += (GDI_PR_OF_PARGB6666(p) >> 1) << 11;

    return result;
}

/*****************************************************************************
 * FUNCTION
 *  util_flatten_PARGB8888_to_RGB565
 * DESCRIPTION
 *  Flatten with PARGB8888 and RGB565.
 * PARAMETERS
 *  dst_p             [IN]  dst RGB565 frame buffer start address
 *  src_p             [IN]  src PARGB8888 frame buffer pointer start address
 *  width             [IN]  target rect width
 *  height            [IN]  target rect height
 *  dst_pitch         [IN]  dst pitch
 *  src_pitch         [IN]  src pitch
 *  src_opacity       [IN]  src frame opacity
 * RETURNS
 *  void
 *****************************************************************************/
static void util_flatten_PARGB6666_to_RGB565(
    gdi_img_buf_struct *dst, 
    const gdi_img_buf_struct *src,
    vrt_s32 width, 
    vrt_s32 height)
{    
    // we support negative height, 
    // which means "draw up in dest buffer
    const vrt_s32 src_pitch_residual = src->pitch_bytes - (3 * width);
    const vrt_s32 dst_pitch = height >= 0 ? dst->pitch_bytes : -dst->pitch_bytes;
    if(height < 0)
    {
        height = -height;
    }

    vrt_u8 *dst_p = (vrt_u8*)dst->ptr;
    vrt_u8 *src8_p = (vrt_u8*)src->ptr;
    for (vrt_s32 y = height - 1; y >= 0; --y)
    {
        vrt_u16 *dst16_p = (vrt_u16*)dst_p;
        for (vrt_s32 x = width - 1; x >= 0; --x)
        {
            vrt_u32 a = src8_p[2] >> 3; // convert from 6-bit to 5-bit alpha
            if (a)
            {
                vrt_u32 s;
                s = (src8_p[0] | src8_p[1] << 8 | src8_p[2] << 16);
                if (a == 0x1F)
                {
                    *dst16_p = (vrt_u16)GDI_RGB565_FROM_PARGB6666(s);
                }
                else
                { 
                    vrt_u32 dp, sp;
                    // convert source to 32-bit (G:11, R:10, B:11) but value range still R:5, G:6, B:5
                    sp = util_PARGB6666_to_G11R10B11(s);
                    
                    // convert dest to 32-bit (G:11, B:10, R:11)
                    dp = (vrt_u32)*dst16_p;
                    dp = (dp | (dp << 16)) & 0x7E0F81F;                    
                    
                    // alpha-blend in 32-bit
                    const vrt_u32 p = ((sp * 0x1F - dp * a) / 32 + dp) & 0x7E0F81F;
                    // convert back to RGB565
                    *dst16_p = (vrt_u16)(p | (p >> 16));

                }
            }

            ++dst16_p;
            src8_p += 3;
        }

        src8_p += src_pitch_residual;
        dst_p += dst_pitch; // we may go down or go up (dst_pitch can be negative)
    }
}

#ifdef __MTK_TARGET__
#pragma thumb
#endif
} /* extern "C" */

typedef void (*PFNAlphaBlender)(gdi_img_buf_struct *dst, const gdi_img_buf_struct *src, vrt_s32 width, vrt_s32 height);

/***************************************************************************** 
 * Home screen UI componet: Chipset wallpaper
 *****************************************************************************/
VFX_IMPLEMENT_CLASS("Chipset Wallpaper", VappWallpaperChipset, VappWallpaper);

VappWallpaperChipset::VappWallpaperChipset():
    m_wallpaperFilter(NULL),
    m_animTimeline(NULL),
    m_wallpaper(NULL),
    m_backgroundFrame(NULL)
{
}

void VappWallpaperChipset::onCreateView()
{
#ifndef __VENUS_3D_UI_ENGINE__   

    // create the wallpaper "background" frame
    // Note: so that the background can be cached
    createBackground();

    // Then, we attach the filter to wallpaper itself
    VFX_OBJ_CREATE(m_wallpaperFilter, VappHsChipsetFilter, this);
 
    setFilter(m_wallpaperFilter);
    
    // force RGB565 format & disable colorkey
    setOpaqueMode(VFX_FRAME_OPAQUE_MODE_FULLY_OPAQUE);
    setCacheMode(VFX_CACHE_MODE_PREVENT);
    setBgColor(VFX_COLOR_TRANSPARENT);

    // initilaize timeline for filter animation
    VfxFloatTimeline *timeline = NULL;
    VFX_OBJ_CREATE(timeline, VfxFloatTimeline, this);
    timeline->setTarget(this);
    timeline->setTargetPropertyId(VRT_FRAME_PROPERTY_ID_FILTER_TIMING);
    timeline->setFromValue(0.0f);
    timeline->setToValue(VappHsChipsetFilter::FILTER_PROG_MAX);
    timeline->setDurationTime(VappHsChipsetFilter::DURATION);
    timeline->setAutoReversed(VFX_FALSE);
    timeline->setRepeatCount(VFX_TIMELINE_REPEAT_INFINITE);
    m_animTimeline = timeline;

#else

    VFX_OBJ_CREATE(m_wallpaper, VfxFrame, this);
    VFX_OBJ_CREATE(m_wallpaperFilter, VappHsChipsetFilter, m_wallpaper);

    m_wallpaper->setOwnerDraw(m_wallpaperFilter);

    m_wallpaper->setSize(getSize());
    m_wallpaper->setBgColor(VRT_COLOR_MAKE(128, 0, 0, 0));

    m_wallpaperFilter->setSize(m_wallpaper->getSize());
    m_wallpaper->setPropertyEffectCallback(m_wallpaper, VappHsChipsetFilter::onUpdate, &m_wallpaperFilter, sizeof(m_wallpaperFilter), VRT_FPE_TRIGGER_TYPE_EVERYTIME);

    // initilaize timeline for filter animation
    VfxFloatTimeline *timeline = NULL;
    VFX_OBJ_CREATE(timeline, VfxFloatTimeline, this);
    timeline->setTarget(m_wallpaper);
    timeline->setTargetPropertyId(VRT_FRAME_PROPERTY_ID_FILTER_TIMING);
    timeline->setFromValue(0.0f);
    timeline->setToValue(VappHsChipsetFilter::FILTER_PROG_MAX);
    timeline->setDurationTime(VappHsChipsetFilter::DURATION);
    timeline->setAutoReversed(VFX_FALSE);
    timeline->setRepeatCount(VFX_TIMELINE_REPEAT_INFINITE);
    m_animTimeline = timeline;
#endif    
}

void VappWallpaperChipset::createBackground()
{
    // The image is half of the screen, 
    // and we use VfxFrame to mirror it.
    // This is to reduce ROM image size.
    VFX_OBJ_CLOSE(m_backgroundFrame);
    // create a parent frame for mirror frames,
    // so that they can be cached.
    VFX_OBJ_CREATE(m_backgroundFrame, VfxFrame, this);
    m_backgroundFrame->setPos(0, 0);
    m_backgroundFrame->setSize(SCRN_W, SCRN_H);
    m_backgroundFrame->setOpaqueMode(VFX_FRAME_OPAQUE_MODE_FULLY_OPAQUE);
    m_backgroundFrame->setCacheMode(VFX_CACHE_MODE_FREEZE);
    
    // left side, attach under cache frame
    VfxFrame *pLeftBg = NULL;
    VFX_OBJ_CREATE(pLeftBg, VfxFrame, m_backgroundFrame);
    pLeftBg->setPos(0, 0);
    pLeftBg->setSize(SCRN_W / 2, SCRN_H);
    // force RGB565 format
    pLeftBg->setOpaqueMode(VFX_FRAME_OPAQUE_MODE_FULLY_OPAQUE);
    VfxImageSrc imgSrc(VAPP_WALLPAPER_IMG_CHIPSET_BG);
    pLeftBg->setImgContent(imgSrc);

    // right side, attach under cache frame
    VfxFrame *pRightBg = NULL;
    VFX_OBJ_CREATE(pRightBg, VfxFrame, m_backgroundFrame);
    pRightBg->setPos(SCRN_W - 1, 0);
    pRightBg->setSize(SCRN_W / 2, SCRN_H);
    // force RGB565 format
    pRightBg->setOpaqueMode(VFX_FRAME_OPAQUE_MODE_FULLY_OPAQUE);
    pRightBg->setImgContent(imgSrc);
    VfxTransform trans = pRightBg->getTransform();
    trans.data.affine.sx = -1;
    pRightBg->setTransform(trans);

}

void VappWallpaperChipset::onReleaseView()
{
#ifndef __VENUS_3D_UI_ENGINE__
    setFilter(NULL);
    VFX_OBJ_CLOSE(m_wallpaperFilter);
#else
    if(m_wallpaper)
    {
        m_wallpaper->setOwnerDraw(NULL);
    }
    VFX_OBJ_CLOSE(m_wallpaperFilter);
    VFX_OBJ_CLOSE(m_wallpaper);
#endif
}

void VappWallpaperChipset::onSerializeView()
{
    onReleaseView();
}

void VappWallpaperChipset::onRestoreView()
{
    onCreateView();
}

MMI_IMG_ID VappWallpaperChipset::getThumbnail()
{
    return IMG_ID_VAPP_WALLPAPER_CHIPSET_THUMBNAIL;
}

void VappWallpaperChipset::getName(VfxWString &wallpaperName)
{
    wallpaperName.loadFromRes(STR_ID_WALLPAPER_VUI_LIVE_CHIPSET);
    return;
}

VfxBool VappWallpaperChipset::onPenInput(VfxPenEvent &e)
{
    if(VFX_PEN_EVENT_TYPE_DOWN == e.type)
	{
        const VfxPoint &pos = e.getRelDownPos(this);
        VfxBool isUp = pos.y > (SCRN_H / 2);
        PathID pid = ChipsetPath::findNearestPath(pos);
        if(pid >= 0)
        {
            m_wallpaperFilter->activateUserPath(pid, isUp);
        }
    }   
    // Bypass pen event since we're wallpaper
    return VappWallpaper::onPenInput(e);
}

void VappWallpaperChipset::onSuspend()
{
    m_wallpaperFilter->m_isSuspend = VFX_TRUE;
    m_animTimeline->stop();
    VappWallpaper::onSuspend();
}

void VappWallpaperChipset::onResume()
{
    m_wallpaperFilter->m_isSuspend = VFX_FALSE;
    m_wallpaperFilter->m_drawnAfterResume = VFX_FALSE;
    m_animTimeline->start();
    VappWallpaper::onResume();
}


/***************************************************************************** 
 * VappHsChipsetFilter Implementations
 *****************************************************************************/

void ChipsetPath::init(PathID id, VfxBool fast)
{
    // initialize paths
    pathID = id;
    progress = 0;
    active = VFX_FALSE;

    // randomized attribute like speed, delay, direction
    const VfxMsec base = fast ? 800 : 2000;
    const VfxMsec timeStep = fast ? 100 : 700;
    duration = base + (rand() % 4) * timeStep;
    delayShow = fast ? 0 : (rand() % 4) * base / 2;
    isUp = (rand() % 2) == 1;   // running direction of path
}

VfxBool ChipsetPath::update(VfxMsec timePassed)
{
    if(!active)
    {
        return VFX_FALSE;
    }

    if(delayShow > 0)
    {
        delayShow -= timePassed;
    }
    else
    {
        progress += timePassed;
    }
    
    // time passed, reset state
    if(progress >= duration)
    {
        init(pathID);
    }
}

VfxBool ChipsetPath::isVisible() const
{
    return active && delayShow <= 0;
}

VfxS32 ChipsetPath::getYStart() const
{
    const VfxS32 tailHeight = 200;
    const VfxS32 yBegin = isUp ? SCRN_H : 0;
    const VfxS32 yEnd = isUp ? -tailHeight : SCRN_H + tailHeight;
    const VfxS32 yNow = (yEnd - yBegin) * progress / duration + yBegin;
    return yNow;
}

PathID ChipsetPath::findNearestPath(const VfxPoint &pos)
{
    // do a simple linear search in the path map
    // note we can directly jump to a y scanline
    PathID found = -1;
    VfxS32 minDist = SCRN_W;
    const int yIdx = clampToScreenY(pos.y);
    for(int i = 0; i < MAX_PATH_NUM; ++i)
    {
        const VfxS32 dist = vfxAbs(pos.x - g_chipsetPathData[i][yIdx]);
        if(minDist > dist)
        {
            minDist = dist;
            found = i;
        }
    }
    return found;
}

class ChipsetPathRenderer
{
private:
    VfxU8 *m_outBuf;
    VfxU32 m_pitchBytes;
    gdi_img_buf_color_format_enum m_cf;
    const VfxImageBuffer * const m_dotSprite;
    const VfxImageBuffer * const m_tailSprite;
        
private:
    void drawDot(PathID path, VfxS32 yStart, VfxBool isUp) const;
    void drawTail(PathID path, VfxS32 yStart, VfxBool isUp) const;
    VfxU32 getBPP() const;    
public:
    ChipsetPathRenderer(VfxU8 *outBuf, 
                        gdi_color_format outFormat,
                        VfxU32 pitchBytes,
                        const VfxImageBuffer *dotSprite, 
                        const VfxImageBuffer *tailSprite);
    void drawPath(PathID path, VfxS32 yStart, VfxBool isUp) const;
};

ChipsetPathRenderer::ChipsetPathRenderer(VfxU8 *outBuf, 
                                         gdi_color_format outFormat,
                                         VfxU32 pitchBytes, 
                                         const VfxImageBuffer *dotSprite, 
                                         const VfxImageBuffer *tailSprite) :
    m_outBuf(outBuf),
    m_pitchBytes(pitchBytes),
    m_dotSprite(dotSprite),
    m_tailSprite(tailSprite)
{
    switch(outFormat)
    {
    case GDI_COLOR_FORMAT_16:
        m_cf = GDI_IMG_BUF_COLOR_FORMAT_RGB565;
        break;
    case GDI_COLOR_FORMAT_24:
        m_cf = GDI_IMG_BUF_COLOR_FORMAT_RGB888;
        break;
    default:
        VFX_ASSERT(0);  // unsupported color format
        break;
    }
}

void ChipsetPathRenderer::drawPath(PathID path,VfxS32 yStart,VfxBool isUp) const
{
    SWLA_BEGIN("PDT");
    drawTail(path, yStart, isUp);
    SWLA_END("PDT");
    SWLA_BEGIN("PDD");
    drawDot(path, yStart, isUp);
    SWLA_END("PDD");
}

void ChipsetPathRenderer::drawTail(PathID pathID,VfxS32 yStart,VfxBool isUp) const
{
    // use only y-start of sprite.
    // the x offset depends on path data.
    gdi_img_buf_struct dst;
    dst.color_format = m_cf;
    dst.pitch_bytes = m_pitchBytes;

    VFX_DEV_ASSERT(m_tailSprite);
    const VfxImageBuffer &imgSprite = *m_tailSprite;
    
    if(!imgSprite.ptr)
        return;
    
    gdi_img_buf_struct src;
    src.ptr = imgSprite.ptr;
    src.pitch_bytes = imgSprite.pitchBytes;
    
    switch(imgSprite.colorFormat)
    {
        case VRT_COLOR_TYPE_PARGB8888:
            src.color_format = GDI_IMG_BUF_COLOR_FORMAT_PARGB8888;
            break;
        case VRT_COLOR_TYPE_ARGB8888:
            src.color_format = GDI_IMG_BUF_COLOR_FORMAT_ARGB8888;
            break;
        case VRT_COLOR_TYPE_PARGB6666:
            src.color_format = GDI_IMG_BUF_COLOR_FORMAT_PARGB6666;
            break;
        default:
            VFX_DEV_ASSERT(VFX_FALSE); // only support ARGB8888 or PARGB8888
            return;
    }


    VfxS32 direction = isUp ? 1 : -1;

    // Handle ARGB/PARGB on different platforms.
    PFNAlphaBlender blendFunc;
    if(GDI_IMG_BUF_COLOR_FORMAT_RGB565 == m_cf && vrt_get_default_alpha_color_format() == VRT_COLOR_TYPE_ARGB8888)
    {
        blendFunc = util_flatten_ARGB8888_to_RGB565;
    }
    else if(GDI_IMG_BUF_COLOR_FORMAT_RGB565 == m_cf && vrt_get_default_alpha_color_format() == VRT_COLOR_TYPE_PARGB6666)
    {
        blendFunc = util_flatten_PARGB6666_to_RGB565;
    }
    else
    {
        blendFunc = gdi_img_buf_blending;
    }

    const VfxBool canMerge = (blendFunc == util_flatten_PARGB6666_to_RGB565);

    const VfxS32 &srcHeight = imgSprite.height;
    const VfxS32 &srcWidth = imgSprite.width;
    const VfxS32 dstBeginY = clampToScreenY(yStart);
    const VfxS32 dstEndY = clampToScreenY(yStart + (srcHeight * direction));

    const VfxS32 srcBeginY = isUp ? vfxMax(0, -yStart) : vfxMax(0, (yStart - SCRN_H));
    const VfxS32 srcEndY = isUp ? vfxMin(srcHeight, SCRN_H - yStart) : vfxMin(srcHeight, yStart);

    const VfxU32 spriteOffset = imgSprite.width / 2;
    const VfxU32 DST_BPP = getBPP();
    const VfxU32 SRC_BPP = imgSprite.pitchBytes / imgSprite.width;

    // check boundary
    const VfxU8 boundaryValue = m_outBuf[m_pitchBytes * GDI_LCD_HEIGHT + 1];

    // draw the tail line by line
    src.ptr += srcBeginY * imgSprite.pitchBytes;
    dst.ptr = m_outBuf + dstBeginY * m_pitchBytes;
    for(int y = dstBeginY; y != dstEndY; )
    {
        VfxU8 * const dstBkup = dst.ptr;
        VfxU8 * const srcBkup = src.ptr;
        // offset according to path data
        const VfxS32 &xStart = g_chipsetPathData[pathID][y];
        VfxS32 blockHeight = 1;
        if(xStart >= 0)
        {
            if(canMerge)
            {
                for(int by = y+direction; xStart == g_chipsetPathData[pathID][by] && by != dstEndY;)
                {
                    ++blockHeight;
                    by += direction;
                }
            }
            
            const VfxS32 xLeft = xStart - spriteOffset;
            const VfxS32 dstX = vfxMax(0, xLeft);
            const VfxS32 srcX = vfxMax(0, -xLeft);
            const VfxS32 bltWidth = vfxMax((VfxS32)0, vfxMin((VfxS32)GDI_LCD_WIDTH - dstX, srcWidth - srcX));
            dst.ptr += dstX * DST_BPP;
            src.ptr += srcX * SRC_BPP;
            blendFunc(&dst, &src, bltWidth, canMerge ? direction * blockHeight : 1);
        }
        // advance to next line
        dst.ptr = dstBkup + (m_pitchBytes * direction * blockHeight);
        src.ptr = srcBkup + (imgSprite.pitchBytes * blockHeight);
        y += direction * blockHeight;
    }
    VFX_DEV_ASSERT(m_outBuf[m_pitchBytes * GDI_LCD_HEIGHT + 1] == boundaryValue);
    VFX_UNUSED(boundaryValue);
}

VfxU32 ChipsetPathRenderer::getBPP() const
{
    switch(m_cf)
    {
    case GDI_IMG_BUF_COLOR_FORMAT_RGB565:
        return 2;
    case GDI_IMG_BUF_COLOR_FORMAT_RGB888:
        return 3;
    case GDI_IMG_BUF_COLOR_FORMAT_PARGB6666:
        return 3;
    case GDI_IMG_BUF_COLOR_FORMAT_ARGB8888:
        return 4;
    case GDI_IMG_BUF_COLOR_FORMAT_PARGB8888:
        return 4;
    default:
        return 2;
    }
}

void ChipsetPathRenderer::drawDot(PathID pathID,VfxS32 yStart,VfxBool isUp) const
{
    VFX_DEV_ASSERT(m_dotSprite);
    const VfxImageBuffer &imgSprite = *m_dotSprite;
    if(!imgSprite.ptr)
        return;

    // retrieve position of center
    const VfxS32 &cx = g_chipsetPathData[pathID][yStart];
    const VfxS32 &cy = yStart;
    if(cy < 0 || cy >= SCRN_H || cx < 0 || cx >= SCRN_W)
    {
        return;
    }

    // clip the drawing region against screen
    const VfxS32 x = cx - imgSprite.width / 2;
    const VfxS32 y = cy - imgSprite.height / 2;

    const VfxS32 dstLeft = clampToScreenX(x);
    const VfxS32 dstTop = clampToScreenY(y);
    const VfxS32 dstRight = clampToScreenX(x + imgSprite.width);
    const VfxS32 dstBottom = clampToScreenY(y + imgSprite.height);

    const VfxS32 srcLeft = vfxMax(0, dstLeft - x);
    const VfxS32 srcTop = vfxMax(0, dstTop - y);
    const VfxS32 srcWidth = vfxMax((VfxU32)0, vfxMin(imgSprite.width, (VfxU32)(dstRight - dstLeft)));
    const VfxS32 srcHeight = vfxMax((VfxU32)0, vfxMin(imgSprite.height, (VfxU32)(dstBottom - dstTop)));

    if(srcWidth == 0 || srcHeight == 0)
    {
        return;
    }

    // check boundary
    const VfxU8 boundaryValue = m_outBuf[m_pitchBytes * GDI_LCD_HEIGHT + 1];

    // draw the clipped sprite
    const int DST_BPP = getBPP();
    const int SRC_BPP = imgSprite.pitchBytes / imgSprite.width;
    gdi_img_buf_struct dst;
    dst.ptr = m_outBuf + dstTop * m_pitchBytes + dstLeft * DST_BPP;
    dst.color_format = m_cf;
    dst.pitch_bytes = m_pitchBytes;

    gdi_img_buf_struct src;
    src.ptr = imgSprite.ptr + srcTop * imgSprite.pitchBytes + srcLeft * SRC_BPP;
    src.pitch_bytes = imgSprite.pitchBytes;
    switch(imgSprite.colorFormat)
    {
        case VRT_COLOR_TYPE_PARGB8888:
            src.color_format = GDI_IMG_BUF_COLOR_FORMAT_PARGB8888;
            break;
        case VRT_COLOR_TYPE_ARGB8888:
            src.color_format = GDI_IMG_BUF_COLOR_FORMAT_ARGB8888;
            break;
        case VRT_COLOR_TYPE_PARGB6666:
            src.color_format = GDI_IMG_BUF_COLOR_FORMAT_PARGB6666;
            break;
        default:
            VFX_DEV_ASSERT(VFX_FALSE); // only support ARGB8888 or PARGB8888
            return;
    }

    // Handle ARGB/PARGB on different platforms.
    if(GDI_IMG_BUF_COLOR_FORMAT_RGB565 == m_cf && vrt_get_default_alpha_color_format() == VRT_COLOR_TYPE_ARGB8888)
    {
        for(int i = 0; i < srcHeight; ++i)
        {
            util_flatten_ARGB8888_to_RGB565(&dst, &src, srcWidth, 1);
            src.ptr += src.pitch_bytes;
            dst.ptr += dst.pitch_bytes;
        }
    }
    else if(GDI_IMG_BUF_COLOR_FORMAT_RGB565 == m_cf && vrt_get_default_alpha_color_format() == VRT_COLOR_TYPE_PARGB6666)
    {
        util_flatten_PARGB6666_to_RGB565(&dst, &src, srcWidth, srcHeight);
    }
    else
    {
        gdi_img_buf_blending(&dst, &src, srcWidth, srcHeight);
    }

    VFX_DEV_ASSERT(m_outBuf[m_pitchBytes * GDI_LCD_HEIGHT + 1] == boundaryValue);
}


VappHsChipsetFilter::VappHsChipsetFilter():
    m_lastUpdateTiming(0)
{
}

void VappHsChipsetFilter::onInit()
{
#ifdef __VENUS_3D_UI_ENGINE__
    VfxOwnerDraw::onInit();
#else
    VfxFrameFilter::onInit();
#endif

    // prepare sprites for loading
    setResourceFromResId('DOTT', VAPP_WALLPAPER_IMG_CHIPSET_DOT);
    setResourceFromResId('TAIL', VAPP_WALLPAPER_IMG_CHIPSET_TAIL);

    // Initialize paths for idle animation
    for(int i = 0; i < ChipsetPath::MAX_PATH_NUM; ++i)
    {
        m_idlePaths[i].init(i);
    }

    // Initialize paths when user taps
    for(int i = 0; i < USER_PATH_NUM; ++i)
    {
        // note: although we init them here, 
        // the pathID changes upon user input.
        m_userPaths[i].init(i);
    }   

#ifdef __VENUS_3D_UI_ENGINE__
    m_tailVertices = NULL;
    m_tailTexcoord = NULL;

    m_tailVertices = (GLfloat *)applib_asm_alloc_anonymous(3000*4);
    m_tailTexcoord = (GLfloat *)applib_asm_alloc_anonymous(3000*4);
#endif    
}

VfxBool VappHsChipsetFilter::activateUserPath(PathID pid, VfxBool isUp)
{
    VFX_DEV_ASSERT(pid >= 0 && pid < ChipsetPath::MAX_PATH_NUM);

    // linear search for available slot in user paths
    // init it and return.
    for(int i = 0; i < USER_PATH_NUM; ++i)
    {
        ChipsetPath &path = m_userPaths[i];
        if(!path.isVisible())
        {
            path.init(pid, VFX_TRUE);
            path.isUp = isUp;
            path.active = VFX_TRUE;
            return VFX_TRUE;
        }
    }

    // No available slot.
    return VFX_FALSE;
}

void VappHsChipsetFilter::onDeinit()
{
#ifdef __VENUS_3D_UI_ENGINE__
    applib_asm_free_anonymous(m_tailVertices);
    applib_asm_free_anonymous(m_tailTexcoord);       

	return VfxOwnerDraw::onDeinit();
#else
	return VfxFrameFilter::onDeinit();
#endif
}

#ifndef __VENUS_3D_UI_ENGINE__
VfxFrameFilter::BufferModeEnum VappHsChipsetFilter::onGetBufferMode() const
{
    return VfxFrameFilter::BUFFER_MODE_IN_PLACE;
}
#endif

VfxMsec VappHsChipsetFilter::calculateOffsetTime(const VfxFloat timing)  const
{
	VfxFloat timeOffset = timing - m_lastUpdateTiming;
	if(timeOffset < 0.f)
		timeOffset = FILTER_PROG_MAX + timeOffset;
	return static_cast<VfxMsec>(timeOffset * DURATION / FILTER_PROG_MAX);
}

void VappHsChipsetFilter::drawAndCountActive(VfxMsec timeOffset, const ChipsetPathRenderer &renderer, VfxU32 &activeCount, ChipsetPath *paths, VfxU32 pathCount)
{
    for(int i = 0; i < pathCount; ++i)
    {
        ChipsetPath &p = paths[i];
        p.update(timeOffset);
        if(p.active)
        {
            ++activeCount;
        }
        if(p.isVisible())
        {
            renderer.drawPath(p.pathID, p.getYStart(), p.isUp);
        }
    }
}

#ifndef __VENUS_3D_UI_ENGINE__
VfxBool VappHsChipsetFilter::onProcess(VfxU8 *outBuf, VfxImageBuffer &inBuf, VfxFloat timing)
{
    SWLA_BEGIN("PFP");
    VFX_DEV_ASSERT(VRT_COLOR_TYPE_RGB565 == inBuf.colorFormat ||
                   VRT_COLOR_TYPE_RGB888 == inBuf.colorFormat);
    VfxMsec timeOffset = calculateOffsetTime(timing);
    setLastupdatetime(timing);

    if(!m_drawnAfterResume)
    {
        // to maintain a proper time offset,
        // don't advance time in the 1st frame after resume.
        // but still update the timing.
        m_drawnAfterResume = VFX_TRUE; 
        timeOffset = 0;
    }

    // The sprites are only valid during onProcess()
    // so we create local renderer object
    VfxImageBuffer dotSprite;
    VfxImageBuffer tailSprite;
    getResource('DOTT', dotSprite);
    getResource('TAIL', tailSprite);
    if(NULL == dotSprite.ptr || NULL == tailSprite.ptr)
    {
        return VFX_FALSE;
    }

    gdi_color_format cf = GDI_COLOR_FORMAT_16;
    switch(inBuf.colorFormat)
    {
        case VRT_COLOR_TYPE_RGB565:
            cf = GDI_COLOR_FORMAT_16;
            break;
        case VRT_COLOR_TYPE_RGB888:
            cf = GDI_COLOR_FORMAT_24;
            break;
    }

    const ChipsetPathRenderer renderer(outBuf, cf, inBuf.pitchBytes, &dotSprite, &tailSprite);
    
    VfxU32 activeCount = 0;
    // draw idle paths
    drawAndCountActive(timeOffset, renderer, activeCount, m_idlePaths, ChipsetPath::MAX_PATH_NUM);
    
    // draw user-input triggered paths
    drawAndCountActive(timeOffset, renderer, activeCount, m_userPaths, USER_PATH_NUM);

    // generate about IDLE_NUM paths running
    // this is to make sure there is always something moving on screen
    for(int i = activeCount; i < IDLE_NUM; ++i)
    {
        m_idlePaths[rand() % ChipsetPath::MAX_PATH_NUM].active = VFX_TRUE;
    }
    SWLA_END("PFP");
    return VFX_TRUE;
}
#endif

#ifdef __VENUS_3D_UI_ENGINE__
vrt_render_dirty_type_enum VappHsChipsetFilter::onUpdate(vrt_frame_visual_property_struct *target_frame,
                                                       const vrt_frame_visual_property_struct *watch_frame,
                                                       void *user_data,
                                                       vrt_u32 user_data_size)
{
	VappHsChipsetFilter *pThis = *reinterpret_cast<VappHsChipsetFilter**>(user_data);
    VFX_DEV_ASSERT(pThis);

    if(pThis->m_isSuspend)
    {
        return VRT_RENDER_DIRTY_TYPE_NONE;
    }

	const VfxFloat &timing = watch_frame->filter_timing;

    const VfxMsec timeOffset = pThis->calculateOffsetTime(timing);
    pThis->setLastupdatetime(timing);

    if(!pThis->m_drawnAfterResume)
    {
        // to maintain a proper time offset,
        // don't draw 1st frame after resume;
        // but still update the timing.
        pThis->m_drawnAfterResume = VFX_TRUE; 
        return VRT_RENDER_DIRTY_TYPE_NONE;
    }

    VfxU32 activeCount = 0;
    // draw idle paths
    for(VfxU32 i = 0; i < ChipsetPath::MAX_PATH_NUM; ++i)
    {
        ChipsetPath &p = pThis->m_idlePaths[i];
        p.update(timeOffset);
        if(p.active)
        {
            ++activeCount;
        }
    }

    for(VfxU32 i = 0; i < USER_PATH_NUM; ++i)
    {
        ChipsetPath &p = pThis->m_userPaths[i];
        p.update(timeOffset);
        if(p.active)
        {
            ++activeCount;
        }
    }
    
    // generate about IDLE_NUM paths running
    // this is to make sure there is always something moving on screen
    for(int i = activeCount; i < IDLE_NUM; ++i)
    {
        pThis->m_idlePaths[rand() % ChipsetPath::MAX_PATH_NUM].active = VFX_TRUE;
    }
    
    if(0 == timeOffset)
    {
        return VRT_RENDER_DIRTY_TYPE_NONE;
    }
	
    return VRT_RENDER_DIRTY_TYPE_CONTENT_DIRTY;
}

void VappHsChipsetFilter::setSize(VfxSize size)
{
    m_size = size;
}

void VappHsChipsetFilter::onInitResource()
{
    ChipsetUserData *userData = &m_data;

    GLuint vertexShader;
    GLuint fragmentShader;
    GLuint programObject;
    GLint linked;

    userData->programObject = 0;

    // Load the vertex/fragment shaders
// resource mode
//#if 0    
    vertexShader = loadWPShader ( GL_VERTEX_SHADER, VAPP_WALLPAPER_CHIPSET_VERTEX_SHADER );
    fragmentShader = loadWPShader ( GL_FRAGMENT_SHADER, VAPP_WALLPAPER_CHIPSET_FRAGMENT_SHADER );    
//#endif

// file mode
#if 0    
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
/* under construction !*/
#endif    

    // Create the program object
    programObject = GL_CHECK(glCreateProgram());

    VFX_DEV_ASSERT(programObject);

    GL_CHECK( glAttachShader ( programObject, vertexShader ) );
    GL_CHECK( glAttachShader ( programObject, fragmentShader ) );

    // Link the program
    GL_CHECK( glLinkProgram ( programObject ) );
    
    // Check the link status
    GL_CHECK( glGetProgramiv ( programObject, GL_LINK_STATUS, &linked ) );

    if ( !linked ) 
    {
        GLint infoLen = 0;
        GL_CHECK( glGetProgramiv(programObject, GL_INFO_LOG_LENGTH, &infoLen) );
        if(infoLen > 1)
        {
            //glGetProgramInfoLog(programObject, infoLen, NULL, vShaderStr);
            //kal_printf("Error linking program:\n%s\n", vShaderStr);
        }    
        glDeleteProgram ( programObject );
        VFX_DEV_ASSERT(0);
    }

    userData->uFrameSizeLoc = GL_CHECK( glGetUniformLocation(programObject, "uFrameSize") );
    userData->uFrameAnchorLoc = GL_CHECK( glGetUniformLocation ( programObject, "uFrameAnchor" ) );    
    userData->aPositionLoc = GL_CHECK( glGetAttribLocation (programObject, "aPosition" ) );
    userData->aTexCoordLoc = GL_CHECK( glGetAttribLocation (programObject, "aTexCoord" ) );

    userData->samplerLoc = GL_CHECK( glGetUniformLocation (programObject, "tex" ) );

    userData->textureDotId = CreateWPTexture2D(VAPP_WALLPAPER_IMG_CHIPSET_DOT, GL_BGRA_EXT);
    userData->textureTailId = CreateWPTexture2D(VAPP_WALLPAPER_IMG_CHIPSET_TAIL, GL_BGRA_EXT);   
    userData->textureBgId = VappWallpaper::loadResourceTexture(VAPP_WALLPAPER_IMG_CHIPSET_BG);   
    
    GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);    

    // Store the program object
    if(status == GL_FRAMEBUFFER_COMPLETE)    
        userData->programObject = programObject;

    glClearColor ( 0.0f, 0.0f, 0.0f, 0.0f );
}

void VappHsChipsetFilter::onDeinitResource()
{
    ChipsetUserData *userData = &m_data;
    
    if (userData->programObject)
    {
        glDeleteProgram(userData->programObject);
        userData->programObject = 0;
    }         
    if (userData->textureBgId)
    {
        glDeleteTextures(1, &userData->textureBgId);
        userData->textureBgId = 0;
    }       
    if (userData->textureTailId)
    {
        glDeleteTextures(1, &userData->textureTailId);
        userData->textureTailId = 0;
    } 
    if (userData->textureDotId)
    {
        glDeleteTextures(1, &userData->textureDotId);
        userData->textureDotId = 0;
    }     
}

void VappHsChipsetFilter::clearBuffer(vrt_color_type color)
{
    GL_CHECK( glClearDepthf(1.0f) );
    GL_CHECK( glClearStencil(0) );

    GL_CHECK( glClearColor(
                VRT_COLOR_GET_R(color) / 255.0f,
                VRT_COLOR_GET_G(color) / 255.0f,
                VRT_COLOR_GET_B(color) / 255.0f,
                VRT_COLOR_GET_A(color) / 255.0f) );
    
    GL_CHECK( glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT) );

#ifdef GL_FLUSH_DRAW_CALL
    GL_CHECK( glFlush() );
#endif

}

void VappHsChipsetFilter::onDraw(VfxImageBuffer &dstBuffer, VfxRect &dstRect, VfxRect &srcRect)
{   
    // get current viewport
    GLint viewportsize[4];    
    GL_CHECK( glGetIntegerv(GL_VIEWPORT, viewportsize) );

    // Clear the color buffer
    clearBuffer(VRT_COLOR_MAKE(255, 0, 0, 0));    

    ChipsetUserData *userData = &m_data;
    GLfloat vVertices[12] = {0.0f};
    GLfloat vTexcoord[8] = {0.0f};     

    // ========================================================================================================================
    // draw the right side BG
    // ========================================================================================================================                        
    // ====================================================================================
    // gen the mesh for the string flow
    // the mesh will be
    //
    // 1--------0
    //  \
    //   \
    //    \
    //     \
    //      \
    //       \
    //        \
    //         \            
    // 3--------2
    //
    
    vVertices[0] = m_size.width / 2; 
    vVertices[1] = 0;
    vVertices[3] = 0; 
    vVertices[4] = 0;
    vVertices[6] = m_size.width / 2; 
    vVertices[7] = m_size.height;
    vVertices[9] = 0; 
    vVertices[10] = m_size.height;
    
    for(VfxU16 j = 0; j < 12; j++)
    {
        if(j%3 == 0)
        {
            vVertices[j] = ((vVertices[j]) / dstRect.size.width) * 2 - 1.0f; 
        }
        else if(j%3 == 1)
        {
            vVertices[j] = ((vVertices[j] - srcRect.origin.y)/ dstRect.size.height) * 2 - 1.0f;                     
            vVertices[j] = -1 * vVertices[j];                        
        }              
    }    
    // ====================================================================================
  
    // ====================================================================================
    // gen the texture coord for the string flow
    
    // looking for the actual sprite textiure pos                    
    vTexcoord[0] = 1.0;
    vTexcoord[1] = 0.0;
    vTexcoord[2] = 0.0;
    vTexcoord[3] = 0.0;
    vTexcoord[4] = 1.0;
    vTexcoord[5] = 1.0;
    vTexcoord[6] = 0.0;
    vTexcoord[7] = 1.0;            

    // ====================================================================================         

    // Set the viewport
    glViewport ( 0, 0, dstRect.size.width, dstRect.size.height );

    // Use the program object
    glUseProgram ( userData->programObject );

    GL_CHECK( glViewport (dstRect.origin.x, dstBuffer.height - (dstRect.origin.y + dstRect.size.height),
                dstRect.size.width, dstRect.size.height ) );

    GL_CHECK( glUniform2f(userData->uFrameSizeLoc, (GLfloat)m_size.width , (GLfloat)m_size.height) );
    GL_CHECK( glUniform2f(userData->uFrameAnchorLoc, (GLfloat)srcRect.origin.x  , (GLfloat)(m_size.height - (srcRect.origin.y + srcRect.size.height))) );

    // Load the vertex data
    GL_CHECK( glVertexAttribPointer (userData->aPositionLoc, 3, GL_FLOAT, GL_FALSE, 0, vVertices ));
    GL_CHECK( glEnableVertexAttribArray (userData->aPositionLoc ));

    GL_CHECK( glVertexAttribPointer(userData->aTexCoordLoc, 2, GL_FLOAT, GL_FALSE, 0, vTexcoord) );
    GL_CHECK( glEnableVertexAttribArray(userData->aTexCoordLoc) );

    GL_CHECK( glEnable ( GL_BLEND ) );
    GL_CHECK( glBlendFuncSeparate ( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA) );

    GL_CHECK( glActiveTexture(GL_TEXTURE2) );
    GL_CHECK( glBindTexture(GL_TEXTURE_2D, userData->textureBgId) );
    GL_CHECK( glUniform1i(userData->samplerLoc, 2) );

    glVertexAttrib4f ( 1, 0.0, 1.0, 0.0, 1.0 );
    glDrawArrays ( GL_TRIANGLE_STRIP, 0, 4 );       

    // ========================================================================================================================
    // draw the left side BG
    // ========================================================================================================================                        
    // ====================================================================================
    // gen the mesh for the string flow
    // the mesh will be
    //
    // 1--------0
    //  \
    //   \
    //    \
    //     \
    //      \
    //       \
    //        \
    //         \            
    // 3--------2
    //
        
    vVertices[0] = m_size.width; 
    vVertices[1] = 0;
    vVertices[3] = m_size.width / 2; 
    vVertices[4] = 0;
    vVertices[6] = m_size.width; 
    vVertices[7] = m_size.height;
    vVertices[9] = m_size.width / 2; 
    vVertices[10] = m_size.height;
    
    for(VfxU16 j = 0; j < 12; j++)
    {
        if(j%3 == 0)
        {
            vVertices[j] = ((vVertices[j]) / dstRect.size.width) * 2 - 1.0f; 
        }
        else if(j%3 == 1)
        {
            vVertices[j] = ((vVertices[j] - srcRect.origin.y)/ dstRect.size.height) * 2 - 1.0f;                     
            vVertices[j] = -1 * vVertices[j];                        
        }              
    }        
    // ====================================================================================
  
    // ====================================================================================
    // gen the texture coord for the string flow
    
    // looking for the actual sprite textiure pos                    
    vTexcoord[0] = 0.0;
    vTexcoord[1] = 0.0;
    vTexcoord[2] = 1.0;
    vTexcoord[3] = 0.0;
    vTexcoord[4] = 0.0;
    vTexcoord[5] = 1.0;
    vTexcoord[6] = 1.0;
    vTexcoord[7] = 1.0;            

    // ====================================================================================         

    // Set the viewport
    glViewport ( 0, 0, dstRect.size.width, dstRect.size.height );

    // Use the program object
    glUseProgram ( userData->programObject );

    GL_CHECK( glViewport (dstRect.origin.x, dstBuffer.height - (dstRect.origin.y + dstRect.size.height),
                dstRect.size.width, dstRect.size.height ) );

    GL_CHECK( glUniform2f(userData->uFrameSizeLoc, (GLfloat)m_size.width , (GLfloat)m_size.height) );
    GL_CHECK( glUniform2f(userData->uFrameAnchorLoc, (GLfloat)srcRect.origin.x  , (GLfloat)(m_size.height - (srcRect.origin.y + srcRect.size.height))) );

    // Load the vertex data
    GL_CHECK( glVertexAttribPointer (userData->aPositionLoc, 3, GL_FLOAT, GL_FALSE, 0, vVertices ));
    GL_CHECK( glEnableVertexAttribArray (userData->aPositionLoc ));

    GL_CHECK( glVertexAttribPointer(userData->aTexCoordLoc, 2, GL_FLOAT, GL_FALSE, 0, vTexcoord) );
    GL_CHECK( glEnableVertexAttribArray(userData->aTexCoordLoc) );

    GL_CHECK( glEnable ( GL_BLEND ) );
    GL_CHECK( glBlendFuncSeparate ( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA) );

    GL_CHECK( glActiveTexture(GL_TEXTURE2) );
    GL_CHECK( glBindTexture(GL_TEXTURE_2D, userData->textureBgId) );
    GL_CHECK( glUniform1i(userData->samplerLoc, 2) );

    glVertexAttrib4f ( 1, 0.0, 1.0, 0.0, 1.0 );
    glDrawArrays ( GL_TRIANGLE_STRIP, 0, 4 );  

    // ========================================================================================================================
    // draw the current
    // ========================================================================================================================                            
    for(VfxU32 i = 0; i < ChipsetPath::MAX_PATH_NUM + USER_PATH_NUM; ++i)
    {
        if(m_idlePaths[i].isVisible() && m_tailVertices)
        {
            ChipsetPath p;
            if(i < ChipsetPath::MAX_PATH_NUM)
                p = m_idlePaths[i];
            else
                p = m_userPaths[i - ChipsetPath::MAX_PATH_NUM];                            
            PathID path = p.pathID;
            VfxS32 yStart = p.getYStart();
            VfxBool isUp = p.isUp;            
            const VfxU32 DST_BPP = 2;
            const VfxU32 SRC_BPP = 4;
                                     
            // ========================================================================================================================
            // draw the tail
            //     for speed up the drawing, we make all rectangle into a biug mesh
            //     like
            //
            //       --------
            //       |      |
            //       |      |
            //       |      |
            //       |      |            
            //       --------
            //          --------
            //          |      |               
            //          |      |               
            //          |      |               
            //          --------
            //             --------
            //             |      | 
            //             --------
            //          --------
            //          |      |               
            //          |      |               
            //          |      |
            //          |      |               
            //          |      |               
            //          |      |
            //          --------
            // ========================================================================================================================                        
            {
                VfxS32 direction = isUp ? 1 : -1;
                const VfxS32 &srcHeight = TAIL_SPRITE_HEIGHT;
                const VfxS32 &srcWidth = TAIL_SPRITE_WIDTH;
                const VfxS32 dstBeginY = clampToScreenY(yStart);
                const VfxS32 dstEndY = clampToScreenY(yStart + (srcHeight * direction));
                
                const VfxS32 srcBeginY = isUp ? vfxMax(0, -yStart) : vfxMax(0, (yStart - SCRN_H));
                const VfxS32 srcEndY = isUp ? vfxMin(srcHeight, SCRN_H - yStart) : vfxMin(srcHeight, yStart);
                
                const VfxU32 spriteOffset = TAIL_SPRITE_WIDTH / 2;

                // keep the Y offset location which is not used in a rectangle
                VfxS32 lastDrawY = dstBeginY - direction;
                VfxS32 lastDrawTextY = srcBeginY - 1;                

                // parameter for record which element in vertex (texture) arrayis last used
                // we combine a current into a big mesh
                // with tri-order (each 3 elements present a triangle)
                VfxU32 vTailArrayyIndex = 0;                
                VfxU32 vTailTextArrayyIndex = 0;                      
                VfxU32 VerticesCount = 0;    
                    
                // draw the tail line by line
                for(int y = dstBeginY, ty = srcBeginY; y != dstEndY; y += direction, ty += 1)
                {

                    // offset according to path data
                    const VfxS32 &xStart = g_chipsetPathData[path][y];
                                   
                    if(xStart >= 0)
                    {
                        const VfxS32 xLeft = xStart - spriteOffset;
                        const VfxS32 dstX = vfxMax(0, xLeft);
                        const VfxS32 srcX = vfxMax(0, -xLeft);

                        // if the next segment at the same x offest
                        // keep it until x offset change and draw it as a biger rect
                        if(y + direction != dstEndY)
                        {
                            VfxS32 nextY = y + direction;    
                            const VfxS32 &nextXStart = g_chipsetPathData[path][nextY];                                
                            const VfxS32 nextXLeft = nextXStart - spriteOffset;
                            const VfxS32 nextDstX = vfxMax(0, nextXLeft);
                            if(nextDstX == dstX)
                                continue;
                        }
                            
                        // ====================================================================================
                        // gen the mesh for the string flow
                        // the mesh will be
                        //
                        // 31--------0
                        //  \\
                        //   \\
                        //    \\
                        //     \\
                        //      \\
                        //       \\
                        //        \\
                        //         \\            
                        // 5--------42
                        //
                        
                        m_tailVertices[vTailArrayyIndex + 0] = ((dstX) + TAIL_SPRITE_WIDTH); 
                        m_tailVertices[vTailArrayyIndex + 1] = (lastDrawY + 1);
                        m_tailVertices[vTailArrayyIndex + 2] = 0;                        
                        m_tailVertices[vTailArrayyIndex + 3] = (dstX); 
                        m_tailVertices[vTailArrayyIndex + 4] = (lastDrawY + 1);
                        m_tailVertices[vTailArrayyIndex + 5] = 0;                        
                        m_tailVertices[vTailArrayyIndex + 6] = ((dstX) + TAIL_SPRITE_WIDTH); 
                        m_tailVertices[vTailArrayyIndex + 7] = (y + 1);
                        m_tailVertices[vTailArrayyIndex + 8] = 0;      
                        m_tailVertices[vTailArrayyIndex + 9] = (dstX); 
                        
                        m_tailVertices[vTailArrayyIndex + 10] = (lastDrawY + 1);
                        m_tailVertices[vTailArrayyIndex + 11] = 0;                        
                        m_tailVertices[vTailArrayyIndex + 12] = ((dstX) + TAIL_SPRITE_WIDTH); 
                        m_tailVertices[vTailArrayyIndex + 13] = (y + 1);
                        m_tailVertices[vTailArrayyIndex + 14] = 0;                                                
                        m_tailVertices[vTailArrayyIndex + 15] = (dstX); 
                        m_tailVertices[vTailArrayyIndex + 16] = (y + 1);
                        m_tailVertices[vTailArrayyIndex + 17] = 0;
                        
                        // normalize                         
                        VfxFloat anc_x = srcRect.origin.x ;
                        VfxFloat anc_y = m_size.height - (srcRect.origin.y + srcRect.size.height);
                        //printf("===============\n");            
                        for(VfxU16 j = 0; j < 18; j++)
                        {
                            if(j%3 == 0)
                            {
                                m_tailVertices[vTailArrayyIndex + j] = ((m_tailVertices[vTailArrayyIndex + j] - anc_x) / dstRect.size.width) * 2 - 1.0f; 
                            }
                            else if(j%3 == 1)
                            {
                                m_tailVertices[vTailArrayyIndex + j] = ((m_tailVertices[vTailArrayyIndex + j] - anc_y - srcRect.origin.y)/ dstRect.size.height) * 2 - 1.0f;                     
                                m_tailVertices[vTailArrayyIndex + j] = -1 * m_tailVertices[vTailArrayyIndex + j];                        
                            }          
                            //printf("i = %d, j = %d : V[%d] = %f\n",r,c,j,vVertices[j]);                        
                        }
                        //printf("===============\n\n\n\n");
                        // ====================================================================================
                      
                        // ====================================================================================
                        // gen the texture coord for the string flow
                        
                        // looking for the actual sprite textiure pos                    
                        m_tailTexcoord[vTailTextArrayyIndex + 0] = srcX + TAIL_SPRITE_WIDTH;
                        m_tailTexcoord[vTailTextArrayyIndex + 1] = lastDrawTextY + 1;
                        m_tailTexcoord[vTailTextArrayyIndex + 2] = srcX;
                        m_tailTexcoord[vTailTextArrayyIndex + 3] = lastDrawTextY + 1;
                        m_tailTexcoord[vTailTextArrayyIndex + 4] = srcX + TAIL_SPRITE_WIDTH;
                        m_tailTexcoord[vTailTextArrayyIndex + 5] = ty + 1;

                        m_tailTexcoord[vTailTextArrayyIndex + 6] = srcX;
                        m_tailTexcoord[vTailTextArrayyIndex + 7] = lastDrawTextY + 1;
                        m_tailTexcoord[vTailTextArrayyIndex + 8] = srcX + TAIL_SPRITE_WIDTH;
                        m_tailTexcoord[vTailTextArrayyIndex + 9] = ty + 1;                        
                        m_tailTexcoord[vTailTextArrayyIndex + 10] = srcX;
                        m_tailTexcoord[vTailTextArrayyIndex + 11] = ty + 1;


                        // normalize 
                        for(VfxU16 j = 0; j < 12; j++)
                        {
                            if(j%2 == 0)
                            {
                                m_tailTexcoord[vTailTextArrayyIndex + j] = (m_tailTexcoord[vTailTextArrayyIndex + j] / TAIL_SPRITE_WIDTH); 
                            }
                            else
                            {
                                m_tailTexcoord[vTailTextArrayyIndex + j] = (m_tailTexcoord[vTailTextArrayyIndex + j] / (TAIL_SPRITE_HEIGHT));                     
                            }                 
                        }
                        // ====================================================================================         

                        lastDrawY = y;
                        lastDrawTextY = ty;

                        vTailArrayyIndex += 18;
                        vTailTextArrayyIndex += 12;
                        VerticesCount += 6;
                    }
                                          
                }
                
                // Set the viewport
                glViewport ( 0, 0, dstRect.size.width, dstRect.size.height );

                // Use the program object
                glUseProgram ( userData->programObject );

                GL_CHECK( glViewport (dstRect.origin.x, dstBuffer.height - (dstRect.origin.y + dstRect.size.height),
                            dstRect.size.width, dstRect.size.height ) );

                GL_CHECK( glUniform2f(userData->uFrameSizeLoc, (GLfloat)m_size.width , (GLfloat)m_size.height) );
                GL_CHECK( glUniform2f(userData->uFrameAnchorLoc, (GLfloat)srcRect.origin.x  , (GLfloat)(m_size.height - (srcRect.origin.y + srcRect.size.height))) );

                // Load the vertex data
                GL_CHECK( glVertexAttribPointer (userData->aPositionLoc, 3, GL_FLOAT, GL_FALSE, 0, m_tailVertices ));
                GL_CHECK( glEnableVertexAttribArray (userData->aPositionLoc ));

                GL_CHECK( glVertexAttribPointer(userData->aTexCoordLoc, 2, GL_FLOAT, GL_FALSE, 0, m_tailTexcoord) );
                GL_CHECK( glEnableVertexAttribArray(userData->aTexCoordLoc) );

                GL_CHECK( glEnable ( GL_BLEND ) );
                GL_CHECK( glBlendFuncSeparate ( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA) );

                GL_CHECK( glActiveTexture(GL_TEXTURE0) );
                GL_CHECK( glBindTexture(GL_TEXTURE_2D, userData->textureTailId) );
                GL_CHECK( glUniform1i(userData->samplerLoc, 0) );

                glVertexAttrib4f ( 1, 0.0, 1.0, 0.0, 1.0 );
                glDrawArrays ( GL_TRIANGLES, 0, VerticesCount);    
                
            }
            // ========================================================================================================================
            // draw the tail end
            // ========================================================================================================================            

            // ========================================================================================================================
            // draw the Dot
            // ========================================================================================================================            
            {
                // retrieve position of center
                const VfxS32 &cx = g_chipsetPathData[path][yStart];
                const VfxS32 &cy = yStart;
                if(cy < 0 || cy >= SCRN_H || cx < 0 || cx >= SCRN_W)
                {
                    continue;
                }

                // clip the drawing region against screen
                const VfxS32 x = cx - DOT_SPRITE_WIDTH / 2;
                const VfxS32 y = cy - DOT_SPRITE_HEIGHT / 2;

                const VfxS32 dstLeft = clampToScreenX(x);
                const VfxS32 dstTop = clampToScreenY(y);
                const VfxS32 dstRight = clampToScreenX(x + DOT_SPRITE_WIDTH);
                const VfxS32 dstBottom = clampToScreenY(y + DOT_SPRITE_HEIGHT);

                const VfxS32 srcLeft = vfxMax(0, dstLeft - x);
                const VfxS32 srcTop = vfxMax(0, dstTop - y);
                const VfxS32 srcWidth = vfxMax((VfxU32)0, vfxMin(DOT_SPRITE_HEIGHT, (VfxU32)(dstRight - dstLeft)));
                const VfxS32 srcHeight = vfxMax((VfxU32)0, vfxMin(DOT_SPRITE_HEIGHT, (VfxU32)(dstBottom - dstTop)));

                if(srcWidth == 0 || srcHeight == 0)
                {
                    continue;
                }

                // ====================================================================================
                // gen the mesh for the string flow
                // the mesh will be
                //
                // 1--------0
                //  \
                //   \
                //    \
                //     \
                //      \
                //       \
                //        \
                //         \            
                // 3--------2
                //
                
                vVertices[0] = ((dstLeft) + DOT_SPRITE_WIDTH); 
                vVertices[1] = dstTop;
                vVertices[3] = (dstLeft); 
                vVertices[4] = dstTop;
                vVertices[6] = ((dstLeft) + DOT_SPRITE_WIDTH); 
                vVertices[7] = (dstTop + DOT_SPRITE_HEIGHT);
                vVertices[9] = (dstLeft); 
                vVertices[10] = (dstTop + DOT_SPRITE_HEIGHT);
                
                // normalize                         
                VfxFloat anc_x = srcRect.origin.x ;
                VfxFloat anc_y = m_size.height - (srcRect.origin.y + srcRect.size.height);
                //printf("===============\n");            
                for(VfxU16 j = 0; j < 12; j++)
                {
                    if(j%3 == 0)
                    {
                        vVertices[j] = ((vVertices[j] - anc_x) / dstRect.size.width) * 2 - 1.0f; 
                    }
                    else if(j%3 == 1)
                    {
                        vVertices[j] = ((vVertices[j] - anc_y - srcRect.origin.y)/ dstRect.size.height) * 2 - 1.0f;                     
                        vVertices[j] = -1 * vVertices[j];                        
                    }          
                    //printf("i = %d, j = %d : V[%d] = %f\n",r,c,j,vVertices[j]);                        
                }
                //printf("===============\n\n\n\n");
                // ====================================================================================
              
                // ====================================================================================
                // gen the texture coord for the string flow
                
                // looking for the actual sprite textiure pos                    
                vTexcoord[0] = srcLeft + TAIL_SPRITE_WIDTH;
                vTexcoord[1] = srcTop;
                vTexcoord[2] = srcLeft;
                vTexcoord[3] = srcTop;
                vTexcoord[4] = srcLeft + TAIL_SPRITE_WIDTH;
                vTexcoord[5] = srcTop + TAIL_SPRITE_HEIGHT;
                vTexcoord[6] = srcLeft;
                vTexcoord[7] = srcTop + TAIL_SPRITE_HEIGHT;            


                // normalize 
                for(VfxU16 j = 0; j < 8; j++)
                {
                    if(j%2 == 0)
                    {
                        vTexcoord[j] = (vTexcoord[j] / TAIL_SPRITE_WIDTH); 
                    }
                    else
                    {
                        vTexcoord[j] = (vTexcoord[j] / (TAIL_SPRITE_HEIGHT));                     
                    }                 
                }
                // ====================================================================================         

                // Set the viewport
                glViewport ( 0, 0, dstRect.size.width, dstRect.size.height );

                // Use the program object
                glUseProgram ( userData->programObject );

                GL_CHECK( glViewport (dstRect.origin.x, dstBuffer.height - (dstRect.origin.y + dstRect.size.height),
                            dstRect.size.width, dstRect.size.height ) );

                GL_CHECK( glUniform2f(userData->uFrameSizeLoc, (GLfloat)m_size.width , (GLfloat)m_size.height) );
                GL_CHECK( glUniform2f(userData->uFrameAnchorLoc, (GLfloat)srcRect.origin.x  , (GLfloat)(m_size.height - (srcRect.origin.y + srcRect.size.height))) );

                // Load the vertex data
                GL_CHECK( glVertexAttribPointer (userData->aPositionLoc, 3, GL_FLOAT, GL_FALSE, 0, vVertices ));
                GL_CHECK( glEnableVertexAttribArray (userData->aPositionLoc ));

                GL_CHECK( glVertexAttribPointer(userData->aTexCoordLoc, 2, GL_FLOAT, GL_FALSE, 0, vTexcoord) );
                GL_CHECK( glEnableVertexAttribArray(userData->aTexCoordLoc) );

                GL_CHECK( glEnable ( GL_BLEND ) );
                GL_CHECK( glBlendFuncSeparate ( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA) );

                GL_CHECK( glActiveTexture(GL_TEXTURE1) );
                GL_CHECK( glBindTexture(GL_TEXTURE_2D, userData->textureDotId) );
                GL_CHECK( glUniform1i(userData->samplerLoc, 1) );
      
                glVertexAttrib4f ( 1, 0.0, 1.0, 0.0, 1.0 );
                glDrawArrays ( GL_TRIANGLE_STRIP, 0, 4 );    
             }
            // ========================================================================================================================
            // draw the Dot end
            // ========================================================================================================================            
        }
    }
    
    // set back the original view port
    GL_CHECK( glViewport( viewportsize[0], viewportsize[1], viewportsize[2], viewportsize[3]) );

}

vrt_bool VappHsChipsetFilter::isUsingGLAPI() const
{
    return VRT_TRUE;
}

GLuint VappHsChipsetFilter::loadWPShader (GLenum type, const U16 resId)
{
    GLuint shader;
    GLint compiled;
    U32 size = 0;
    char *shaderSrc = NULL;
    vrt_bool isBinary = VRT_FALSE;
    GLenum glError;

    // Create the shader object
    shader = glCreateShader ( type );

    if ( shader == 0 )
    {
        return 0;
    }

    // TODO: implement vrt_sys_res_shader_lock
    //shaderSrc = (vrt_char *)vrt_sys_res_shader_lock(vrtshader->getResourceId());

    const char *start = (const char*)GetBinary(resId);
    if (start == NULL)
    {
        return 0;
    }
    /* first byte is type, 2~5 is size */
    const unsigned char *header = (const unsigned char*)start;
    size = *((U32*)(header+1));
    //   size = header[1] | header[2] << 8 | header[3] << 16 | header[4] << 24;
    start += 8;

#ifndef __MTK_TARGET__
    char *source = (char *)applib_asm_alloc_anonymous_nc(sizeof(char) * (size + 1));
    memcpy(source, start, size);

    // WORKAROUND: add null-terminal after source from res
    source[size] = 0;
    shaderSrc = source;
#else
    shaderSrc = (vrt_char*)start;
    isBinary = VRT_TRUE;
#endif

    if (isBinary)
    {
        GLenum MALI_SHADER_BINARY_ARM = 0x8F60;
        glShaderBinary (1, &shader, MALI_SHADER_BINARY_ARM, (const void* )shaderSrc, size);
        glError = glGetError();
        VRT_DEV_ASSERT(glError == GL_NO_ERROR);
    }
    else
    {
        // Load the shader source
        glShaderSource ( shader, 1, (const char **)&shaderSrc, NULL );
        glError = glGetError();
        VRT_DEV_ASSERT(glError == GL_NO_ERROR);

        // Compile the shader
        glCompileShader ( shader );
        glError = glGetError();
        VRT_DEV_ASSERT(glError == GL_NO_ERROR);

        // Check the compile status
        glGetShaderiv ( shader, GL_COMPILE_STATUS, &compiled );
        glError = glGetError();
        VRT_DEV_ASSERT(glError == GL_NO_ERROR);

        if ( !compiled )
        {
            glDeleteShader ( shader );
            glError = glGetError();
            VRT_DEV_ASSERT(glError == GL_NO_ERROR);

            return 0;
        }
    }

    return shader;  
}

GLuint VappHsChipsetFilter::loadWPShaderFileMode ( GLenum type, const char *shaderSrc )
{
    GLuint shader;
    GLint compiled;

    // Create the shader object
    shader = glCreateShader ( type );

    if ( shader == 0 )
    return 0;

    // Load the shader source
    glShaderSource ( shader, 1, &shaderSrc, NULL );

    // Compile the shader
    glCompileShader ( shader );

    // Check the compile status
    glGetShaderiv ( shader, GL_COMPILE_STATUS, &compiled );

    if ( !compiled ) 
    {
      glDeleteShader ( shader );
      return 0;
    }

    return shader;
}

GLuint VappHsChipsetFilter::CreateWPTexture2D(const U16 resId, GLenum type)
{
    // allocate texture temp buffer
    S32 imgWidth = 0, imgHeight = 0;
    PU8 mem_buffer = NULL;
    gdi_image_get_dimension_id(resId, &imgWidth, &imgHeight);
    mem_buffer = (PU8)applib_asm_alloc_anonymous_nc(imgWidth * imgHeight * gdi_bits_per_pixel(GDI_COLOR_FORMAT_32) / 8);
    if(NULL == mem_buffer)
    {
        return 0;   
    }

    // Texture object handle
    GLuint textureId;

    GLenum error;

    // Use tightly packed data
    glPixelStorei ( GL_UNPACK_ALIGNMENT, 1 );

    // Generate a texture object
    glGenTextures ( 1, &textureId );

    // Bind the texture object
    glBindTexture ( GL_TEXTURE_2D, textureId );

    GDI_RESULT res = GDI_FAILED;
    GDI_HANDLE imgLayer = GDI_LAYER_EMPTY_HANDLE;
    res = gdi_layer_create_cf_using_outside_memory(GDI_COLOR_FORMAT_32,
                                                      0, 0,
                                                      imgWidth,
                                                      imgHeight,
                                                      &imgLayer,
                                                      (PU8)mem_buffer,
                                                      imgWidth * imgHeight * gdi_bits_per_pixel(GDI_COLOR_FORMAT_32) / 8);
    gdi_layer_push_and_set_active(imgLayer);
    gdi_image_draw_id(0, 0, resId);
    gdi_layer_pop_and_restore_active();
    gdi_layer_free(imgLayer);

    glTexImage2D ( GL_TEXTURE_2D, 0, type, imgWidth, imgHeight, 0, type, GL_UNSIGNED_BYTE, mem_buffer );
    applib_asm_free_anonymous(mem_buffer);

    // Set the filtering mode
    glTexParameteri ( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
    glTexParameteri ( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

    error = glGetError();

    return textureId;
}
#endif

#endif /* __MMI_VUI_HOMESCREEN_LIVE_WALLPAPER_CHIPSET__ */
